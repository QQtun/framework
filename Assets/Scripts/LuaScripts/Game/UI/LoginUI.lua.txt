function OnOpen(self)
    Debug.Log("OnOpen name=" .. self.mName)

    self.mLoginBtn = self.mLoginBtn:GetComponent(CsClassType.UIButton);
    self.mAccountInputField = self.mAccountInputField:GetComponent(CsClassType.UIInputField);
    self.mAccountInputField.text = CS.UnityEngine.PlayerPrefs.GetString("Account", "test168");

    self.mLoginBtn.onClick:AddListener(handler(self, self.OnLoginClick));

    self.mConnectedHandle = handler(self, self.OnConneted);
    Game.GameConnection:OnConnected('+', self.mConnectedHandle);
    self.mDisconnectedHandle = handler(self, self.OnDisconneted);
    Game.GameConnection:OnDisconnected('+', self.mDisconnectedHandle);
    Framework.EventSystem:RegisterStringKeyListenerWithObject(Game.EventKey.OnRoleList, handler(self, self.OnRoleList), self);
    Framework.EventSystem:RegisterStringKeyListenerWithObject(Game.EventKey.OnCreateRole, handler(self, self.OnCreateRole), self);
    Framework.EventSystem:RegisterStringKeyListenerWithObject(Game.EventKey.OnInitGame, handler(self, self.OnInitGame), self);
end

function OnClose(self)    
    Debug.Log("OnClose name=" .. self.mName)
    Game.GameConnection:OnConnected('-', self.mConnectedHandle);
    Game.GameConnection:OnDisconnected('-', self.mDisconnectedHandle);
    Framework.EventSystem:UnregisterAll(self);
end

function OnLoginClick(self)
    Debug.Log("OnLoginClick");
    if self.mStartLogin then
        return
    end

    CS.UnityEngine.PlayerPrefs.SetString("Account", self.mAccountInputField.text);
    CS.UnityEngine.PlayerPrefs.Save();
    self.mStartLogin = true;
    Framework.ResourceManager:LoadServerConfigAsync("Assets/PublicAssets/Configs/ServerConfigs.asset", function(config)
        local loginParam = CsClass.LoginParam()
        loginParam.userName = self.mAccountInputField.text;
        loginParam.password = "1";
        loginParam.protoVer = "20190831";
        Game.GameConnection:Login(
            config:GetServerSet("博元 Login"),
            config:GetServerSet("博元 Game"),
            loginParam)
    end)
    -- Game.GameScene:LoadScene();
end

function OnConneted(self)
    Debug.Log("LoginUI OnConneted");
    self.mStartLogin = false;
    -- Framework.SceneManager:LoadScene("MainScene")
    -- Game.GameScene:LoadScene();
end

function OnDisconneted(self)
    self.mStartLogin = false;
end

function OnRoleList(self)    
    Debug.Log("LoginUI OnRoleList");

    local roleModule = Framework.ModuleManager:GetModule(ModuleId.RoleDataModule);
    local roleList = roleModule.RoleList;
    if roleList.Count == 0 then
        self:CreateRole();
    else
        self:InitGame(roleList[0]);
        -- Game.GameScene:LoadScene();
    end
end

function CreateRole(self)
    -- local roleModule = Framework.ModuleManager:GetModule(ModuleId.RoleDataModule);
    -- roleModule:CreateRole();

    -- var req = new CreateRole();
    -- req.UserId = GameConnection.Instance.CurrentSession.userID;
    -- req.UserName = GameConnection.Instance.CurrentSession.userName;
    -- req.ZoneId = GameConnection.Instance.CurrentSession.gameZoneID;
    -- // TODO
    -- req.Occupation = 1;
    -- req.Sex = 1;
    -- req.Name = "測試名稱";
    -- req.PlatformId = SystemInfo.deviceModel;
    -- req.ModleType.Add(1);
    -- req.ModleType.Add(1);
    -- req.ModleType.Add(1);
    -- req.ModleType.Add(1);
    -- Send(ServerCmd.CreateRole, req);

    local req = {
        userId = Game.GameConnection.CurrentSession.userID,
        userName = Game.GameConnection.CurrentSession.userName,
        zoneId = Game.GameConnection.CurrentSession.gameZoneID,
        occupation = 1,
        sex = 1,
        name = "測試名稱" .. Game.GameConnection.CurrentSession.userID,
        -- platformId = "lua",
        modleType = {1,1,1,1}
    }
    Game.GameConnection:Send(ServerCmd.CreateRole, req, "CreateRole");
end

function OnCreateRole(self)
    Debug.Log("LoginUI OnCreateRole");

    local roleModule = Framework.ModuleManager:GetModule(ModuleId.RoleDataModule);
    local roleList = roleModule.RoleList;
    self:InitGame(roleList[0]);
end

function InitGame(self, roleData)
    local req = {
        userId = Game.GameConnection.CurrentSession.userID,
        roleId = roleData.RoleId
    }    
    Game.GameConnection:Send(ServerCmd.InitGame, req, "InitGame");
end

function OnInitGame(self)
    Debug.Log("LoginUI OnInitGame");
    local roleModule = Framework.ModuleManager:GetModule(ModuleId.RoleDataModule);
    Framework.ModuleManager:StartGameInit();
    Game.GameScene:LoadScene(roleModule.RoleDetail.MapCode);
end