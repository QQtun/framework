// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: MapTable.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Core.Game.Table {

  /// <summary>Holder for reflection information generated from MapTable.proto</summary>
  public static partial class MapTableReflection {

    #region Descriptor
    /// <summary>File descriptor for MapTable.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MapTableReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5NYXBUYWJsZS5wcm90bxIPQ29yZS5HYW1lLlRhYmxlIi4KCE1hcFRhYmxl",
            "EiIKBHJvd3MYASADKAsyFC5Db3JlLkdhbWUuVGFibGUuTWFwIswHCgNNYXAS",
            "DAoEQ29kZRgBIAEoDRIQCghHYW1lTm90ZRgCIAEoCRIRCglCaXJ0aFBvc1gY",
            "AyABKA0SEQoJQmlydGhQb3NZGAQgASgNEhMKC0JpcnRoUmFkaXVzGAUgASgN",
            "EhYKDkJpcnRoRGlyZWN0aW9uGAYgASgFEhUKDUF1dG9UcmFuc2Zvcm0YByAB",
            "KAgSDgoGTGF5ZXIwGAggASgNEg4KBkxheWVyMRgJIAEoDRIOCgZMYXllcjIY",
            "CiABKA0SDgoGTGF5ZXIzGAsgASgNEg4KBkxheWVyNBgMIAEoDRIOCgZMYXll",
            "cjUYDSABKA0SDgoGTGF5ZXI2GA4gASgNEg4KBkxheWVyNxgPIAEoDRIOCgZM",
            "YXllcjgYECABKA0SDgoGTGF5ZXI5GBEgASgNEg8KB0xheWVyMTAYEiABKA0S",
            "DwoHTGF5ZXIxMRgTIAEoDRIPCgdMYXllcjEyGBQgASgNEg8KB0xheWVyMTMY",
            "FSABKA0SDwoHTGF5ZXIxNBgWIAEoDRIPCgdMYXllcjE1GBcgASgNEg8KB0xh",
            "eWVyMTYYGCABKA0SDwoHTGF5ZXIxNxgZIAEoDRIPCgdMYXllcjE4GBogASgN",
            "Eg8KB0xheWVyMTkYGyABKA0SDwoHTGF5ZXIyMBgcIAEoDRIPCgdMYXllcjIx",
            "GB0gASgNEg8KB0xheWVyMjIYHiABKA0SDwoHTGF5ZXIyMxgfIAEoDRIPCgdM",
            "YXllcjI0GCAgASgNEg8KB0xheWVyMjUYISABKA0SDwoHTGF5ZXIyNhgiIAEo",
            "DRIPCgdMYXllcjI3GCMgASgNEg8KB0xheWVyMjgYJCABKA0SDwoHTGF5ZXIy",
            "ORglIAEoDRIPCgdMYXllcjMwGCYgASgNEg8KB0xheWVyMzEYJyABKA0SFQoN",
            "UmV2aXZlTWFwQ29kZRgoIAEoDRIPCgdSZXZpdmVYGCkgASgNEg8KB1Jldml2",
            "ZVkYKiABKA0SFAoMUmV2aXZlUmFkaXVzGCsgASgNEhcKD1Jldml2ZURpcmVj",
            "dGlvbhgsIAEoBRIUCgxJc0NoYW5uZWxNYXAYLSABKA0SEgoKQmlydGhQb3NY",
            "MhguIAEoCRISCgpCaXJ0aFBvc1kyGC8gASgJEhQKDEJpcnRoUmFkaXVzMhgw",
            "IAEoCRIXCg9CaXJ0aERpcmVjdGlvbjIYMSABKAkSEQoJTmVlZExldmVsGDIg",
            "ASgNEhQKDE5lZWRNYWluVGFzaxgzIAEoDRITCgtOb3RJbnRvSGludBg0IAEo",
            "CRISCgpEZWFkTm90aWNlGDUgASgIYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.Game.Table.MapTable), global::Core.Game.Table.MapTable.Parser, new[]{ "Rows" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.Game.Table.Map), global::Core.Game.Table.Map.Parser, new[]{ "Code", "GameNote", "BirthPosX", "BirthPosY", "BirthRadius", "BirthDirection", "AutoTransform", "Layer0", "Layer1", "Layer2", "Layer3", "Layer4", "Layer5", "Layer6", "Layer7", "Layer8", "Layer9", "Layer10", "Layer11", "Layer12", "Layer13", "Layer14", "Layer15", "Layer16", "Layer17", "Layer18", "Layer19", "Layer20", "Layer21", "Layer22", "Layer23", "Layer24", "Layer25", "Layer26", "Layer27", "Layer28", "Layer29", "Layer30", "Layer31", "ReviveMapCode", "ReviveX", "ReviveY", "ReviveRadius", "ReviveDirection", "IsChannelMap", "BirthPosX2", "BirthPosY2", "BirthRadius2", "BirthDirection2", "NeedLevel", "NeedMainTask", "NotIntoHint", "DeadNotice" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class MapTable : pb::IMessage<MapTable>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MapTable> _parser = new pb::MessageParser<MapTable>(() => new MapTable());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapTable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.Game.Table.MapTableReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapTable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapTable(MapTable other) : this() {
      rows_ = other.rows_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapTable Clone() {
      return new MapTable(this);
    }

    /// <summary>Field number for the "rows" field.</summary>
    public const int RowsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Core.Game.Table.Map> _repeated_rows_codec
        = pb::FieldCodec.ForMessage(10, global::Core.Game.Table.Map.Parser);
    private readonly pbc::RepeatedField<global::Core.Game.Table.Map> rows_ = new pbc::RepeatedField<global::Core.Game.Table.Map>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.Game.Table.Map> Rows {
      get { return rows_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MapTable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MapTable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!rows_.Equals(other.rows_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= rows_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      rows_.WriteTo(output, _repeated_rows_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      rows_.WriteTo(ref output, _repeated_rows_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += rows_.CalculateSize(_repeated_rows_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MapTable other) {
      if (other == null) {
        return;
      }
      rows_.Add(other.rows_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            rows_.AddEntriesFrom(input, _repeated_rows_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            rows_.AddEntriesFrom(ref input, _repeated_rows_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Map : pb::IMessage<Map>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Map> _parser = new pb::MessageParser<Map>(() => new Map());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Map> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.Game.Table.MapTableReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Map() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Map(Map other) : this() {
      code_ = other.code_;
      gameNote_ = other.gameNote_;
      birthPosX_ = other.birthPosX_;
      birthPosY_ = other.birthPosY_;
      birthRadius_ = other.birthRadius_;
      birthDirection_ = other.birthDirection_;
      autoTransform_ = other.autoTransform_;
      layer0_ = other.layer0_;
      layer1_ = other.layer1_;
      layer2_ = other.layer2_;
      layer3_ = other.layer3_;
      layer4_ = other.layer4_;
      layer5_ = other.layer5_;
      layer6_ = other.layer6_;
      layer7_ = other.layer7_;
      layer8_ = other.layer8_;
      layer9_ = other.layer9_;
      layer10_ = other.layer10_;
      layer11_ = other.layer11_;
      layer12_ = other.layer12_;
      layer13_ = other.layer13_;
      layer14_ = other.layer14_;
      layer15_ = other.layer15_;
      layer16_ = other.layer16_;
      layer17_ = other.layer17_;
      layer18_ = other.layer18_;
      layer19_ = other.layer19_;
      layer20_ = other.layer20_;
      layer21_ = other.layer21_;
      layer22_ = other.layer22_;
      layer23_ = other.layer23_;
      layer24_ = other.layer24_;
      layer25_ = other.layer25_;
      layer26_ = other.layer26_;
      layer27_ = other.layer27_;
      layer28_ = other.layer28_;
      layer29_ = other.layer29_;
      layer30_ = other.layer30_;
      layer31_ = other.layer31_;
      reviveMapCode_ = other.reviveMapCode_;
      reviveX_ = other.reviveX_;
      reviveY_ = other.reviveY_;
      reviveRadius_ = other.reviveRadius_;
      reviveDirection_ = other.reviveDirection_;
      isChannelMap_ = other.isChannelMap_;
      birthPosX2_ = other.birthPosX2_;
      birthPosY2_ = other.birthPosY2_;
      birthRadius2_ = other.birthRadius2_;
      birthDirection2_ = other.birthDirection2_;
      needLevel_ = other.needLevel_;
      needMainTask_ = other.needMainTask_;
      notIntoHint_ = other.notIntoHint_;
      deadNotice_ = other.deadNotice_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Map Clone() {
      return new Map(this);
    }

    /// <summary>Field number for the "Code" field.</summary>
    public const int CodeFieldNumber = 1;
    private uint code_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "GameNote" field.</summary>
    public const int GameNoteFieldNumber = 2;
    private string gameNote_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameNote {
      get { return gameNote_; }
      set {
        gameNote_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BirthPosX" field.</summary>
    public const int BirthPosXFieldNumber = 3;
    private uint birthPosX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BirthPosX {
      get { return birthPosX_; }
      set {
        birthPosX_ = value;
      }
    }

    /// <summary>Field number for the "BirthPosY" field.</summary>
    public const int BirthPosYFieldNumber = 4;
    private uint birthPosY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BirthPosY {
      get { return birthPosY_; }
      set {
        birthPosY_ = value;
      }
    }

    /// <summary>Field number for the "BirthRadius" field.</summary>
    public const int BirthRadiusFieldNumber = 5;
    private uint birthRadius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BirthRadius {
      get { return birthRadius_; }
      set {
        birthRadius_ = value;
      }
    }

    /// <summary>Field number for the "BirthDirection" field.</summary>
    public const int BirthDirectionFieldNumber = 6;
    private int birthDirection_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BirthDirection {
      get { return birthDirection_; }
      set {
        birthDirection_ = value;
      }
    }

    /// <summary>Field number for the "AutoTransform" field.</summary>
    public const int AutoTransformFieldNumber = 7;
    private bool autoTransform_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AutoTransform {
      get { return autoTransform_; }
      set {
        autoTransform_ = value;
      }
    }

    /// <summary>Field number for the "Layer0" field.</summary>
    public const int Layer0FieldNumber = 8;
    private uint layer0_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Layer0 {
      get { return layer0_; }
      set {
        layer0_ = value;
      }
    }

    /// <summary>Field number for the "Layer1" field.</summary>
    public const int Layer1FieldNumber = 9;
    private uint layer1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Layer1 {
      get { return layer1_; }
      set {
        layer1_ = value;
      }
    }

    /// <summary>Field number for the "Layer2" field.</summary>
    public const int Layer2FieldNumber = 10;
    private uint layer2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Layer2 {
      get { return layer2_; }
      set {
        layer2_ = value;
      }
    }

    /// <summary>Field number for the "Layer3" field.</summary>
    public const int Layer3FieldNumber = 11;
    private uint layer3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Layer3 {
      get { return layer3_; }
      set {
        layer3_ = value;
      }
    }

    /// <summary>Field number for the "Layer4" field.</summary>
    public const int Layer4FieldNumber = 12;
    private uint layer4_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Layer4 {
      get { return layer4_; }
      set {
        layer4_ = value;
      }
    }

    /// <summary>Field number for the "Layer5" field.</summary>
    public const int Layer5FieldNumber = 13;
    private uint layer5_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Layer5 {
      get { return layer5_; }
      set {
        layer5_ = value;
      }
    }

    /// <summary>Field number for the "Layer6" field.</summary>
    public const int Layer6FieldNumber = 14;
    private uint layer6_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Layer6 {
      get { return layer6_; }
      set {
        layer6_ = value;
      }
    }

    /// <summary>Field number for the "Layer7" field.</summary>
    public const int Layer7FieldNumber = 15;
    private uint layer7_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Layer7 {
      get { return layer7_; }
      set {
        layer7_ = value;
      }
    }

    /// <summary>Field number for the "Layer8" field.</summary>
    public const int Layer8FieldNumber = 16;
    private uint layer8_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Layer8 {
      get { return layer8_; }
      set {
        layer8_ = value;
      }
    }

    /// <summary>Field number for the "Layer9" field.</summary>
    public const int Layer9FieldNumber = 17;
    private uint layer9_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Layer9 {
      get { return layer9_; }
      set {
        layer9_ = value;
      }
    }

    /// <summary>Field number for the "Layer10" field.</summary>
    public const int Layer10FieldNumber = 18;
    private uint layer10_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Layer10 {
      get { return layer10_; }
      set {
        layer10_ = value;
      }
    }

    /// <summary>Field number for the "Layer11" field.</summary>
    public const int Layer11FieldNumber = 19;
    private uint layer11_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Layer11 {
      get { return layer11_; }
      set {
        layer11_ = value;
      }
    }

    /// <summary>Field number for the "Layer12" field.</summary>
    public const int Layer12FieldNumber = 20;
    private uint layer12_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Layer12 {
      get { return layer12_; }
      set {
        layer12_ = value;
      }
    }

    /// <summary>Field number for the "Layer13" field.</summary>
    public const int Layer13FieldNumber = 21;
    private uint layer13_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Layer13 {
      get { return layer13_; }
      set {
        layer13_ = value;
      }
    }

    /// <summary>Field number for the "Layer14" field.</summary>
    public const int Layer14FieldNumber = 22;
    private uint layer14_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Layer14 {
      get { return layer14_; }
      set {
        layer14_ = value;
      }
    }

    /// <summary>Field number for the "Layer15" field.</summary>
    public const int Layer15FieldNumber = 23;
    private uint layer15_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Layer15 {
      get { return layer15_; }
      set {
        layer15_ = value;
      }
    }

    /// <summary>Field number for the "Layer16" field.</summary>
    public const int Layer16FieldNumber = 24;
    private uint layer16_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Layer16 {
      get { return layer16_; }
      set {
        layer16_ = value;
      }
    }

    /// <summary>Field number for the "Layer17" field.</summary>
    public const int Layer17FieldNumber = 25;
    private uint layer17_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Layer17 {
      get { return layer17_; }
      set {
        layer17_ = value;
      }
    }

    /// <summary>Field number for the "Layer18" field.</summary>
    public const int Layer18FieldNumber = 26;
    private uint layer18_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Layer18 {
      get { return layer18_; }
      set {
        layer18_ = value;
      }
    }

    /// <summary>Field number for the "Layer19" field.</summary>
    public const int Layer19FieldNumber = 27;
    private uint layer19_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Layer19 {
      get { return layer19_; }
      set {
        layer19_ = value;
      }
    }

    /// <summary>Field number for the "Layer20" field.</summary>
    public const int Layer20FieldNumber = 28;
    private uint layer20_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Layer20 {
      get { return layer20_; }
      set {
        layer20_ = value;
      }
    }

    /// <summary>Field number for the "Layer21" field.</summary>
    public const int Layer21FieldNumber = 29;
    private uint layer21_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Layer21 {
      get { return layer21_; }
      set {
        layer21_ = value;
      }
    }

    /// <summary>Field number for the "Layer22" field.</summary>
    public const int Layer22FieldNumber = 30;
    private uint layer22_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Layer22 {
      get { return layer22_; }
      set {
        layer22_ = value;
      }
    }

    /// <summary>Field number for the "Layer23" field.</summary>
    public const int Layer23FieldNumber = 31;
    private uint layer23_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Layer23 {
      get { return layer23_; }
      set {
        layer23_ = value;
      }
    }

    /// <summary>Field number for the "Layer24" field.</summary>
    public const int Layer24FieldNumber = 32;
    private uint layer24_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Layer24 {
      get { return layer24_; }
      set {
        layer24_ = value;
      }
    }

    /// <summary>Field number for the "Layer25" field.</summary>
    public const int Layer25FieldNumber = 33;
    private uint layer25_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Layer25 {
      get { return layer25_; }
      set {
        layer25_ = value;
      }
    }

    /// <summary>Field number for the "Layer26" field.</summary>
    public const int Layer26FieldNumber = 34;
    private uint layer26_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Layer26 {
      get { return layer26_; }
      set {
        layer26_ = value;
      }
    }

    /// <summary>Field number for the "Layer27" field.</summary>
    public const int Layer27FieldNumber = 35;
    private uint layer27_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Layer27 {
      get { return layer27_; }
      set {
        layer27_ = value;
      }
    }

    /// <summary>Field number for the "Layer28" field.</summary>
    public const int Layer28FieldNumber = 36;
    private uint layer28_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Layer28 {
      get { return layer28_; }
      set {
        layer28_ = value;
      }
    }

    /// <summary>Field number for the "Layer29" field.</summary>
    public const int Layer29FieldNumber = 37;
    private uint layer29_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Layer29 {
      get { return layer29_; }
      set {
        layer29_ = value;
      }
    }

    /// <summary>Field number for the "Layer30" field.</summary>
    public const int Layer30FieldNumber = 38;
    private uint layer30_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Layer30 {
      get { return layer30_; }
      set {
        layer30_ = value;
      }
    }

    /// <summary>Field number for the "Layer31" field.</summary>
    public const int Layer31FieldNumber = 39;
    private uint layer31_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Layer31 {
      get { return layer31_; }
      set {
        layer31_ = value;
      }
    }

    /// <summary>Field number for the "ReviveMapCode" field.</summary>
    public const int ReviveMapCodeFieldNumber = 40;
    private uint reviveMapCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ReviveMapCode {
      get { return reviveMapCode_; }
      set {
        reviveMapCode_ = value;
      }
    }

    /// <summary>Field number for the "ReviveX" field.</summary>
    public const int ReviveXFieldNumber = 41;
    private uint reviveX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ReviveX {
      get { return reviveX_; }
      set {
        reviveX_ = value;
      }
    }

    /// <summary>Field number for the "ReviveY" field.</summary>
    public const int ReviveYFieldNumber = 42;
    private uint reviveY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ReviveY {
      get { return reviveY_; }
      set {
        reviveY_ = value;
      }
    }

    /// <summary>Field number for the "ReviveRadius" field.</summary>
    public const int ReviveRadiusFieldNumber = 43;
    private uint reviveRadius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ReviveRadius {
      get { return reviveRadius_; }
      set {
        reviveRadius_ = value;
      }
    }

    /// <summary>Field number for the "ReviveDirection" field.</summary>
    public const int ReviveDirectionFieldNumber = 44;
    private int reviveDirection_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReviveDirection {
      get { return reviveDirection_; }
      set {
        reviveDirection_ = value;
      }
    }

    /// <summary>Field number for the "IsChannelMap" field.</summary>
    public const int IsChannelMapFieldNumber = 45;
    private uint isChannelMap_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IsChannelMap {
      get { return isChannelMap_; }
      set {
        isChannelMap_ = value;
      }
    }

    /// <summary>Field number for the "BirthPosX2" field.</summary>
    public const int BirthPosX2FieldNumber = 46;
    private string birthPosX2_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BirthPosX2 {
      get { return birthPosX2_; }
      set {
        birthPosX2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BirthPosY2" field.</summary>
    public const int BirthPosY2FieldNumber = 47;
    private string birthPosY2_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BirthPosY2 {
      get { return birthPosY2_; }
      set {
        birthPosY2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BirthRadius2" field.</summary>
    public const int BirthRadius2FieldNumber = 48;
    private string birthRadius2_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BirthRadius2 {
      get { return birthRadius2_; }
      set {
        birthRadius2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BirthDirection2" field.</summary>
    public const int BirthDirection2FieldNumber = 49;
    private string birthDirection2_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BirthDirection2 {
      get { return birthDirection2_; }
      set {
        birthDirection2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "NeedLevel" field.</summary>
    public const int NeedLevelFieldNumber = 50;
    private uint needLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NeedLevel {
      get { return needLevel_; }
      set {
        needLevel_ = value;
      }
    }

    /// <summary>Field number for the "NeedMainTask" field.</summary>
    public const int NeedMainTaskFieldNumber = 51;
    private uint needMainTask_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NeedMainTask {
      get { return needMainTask_; }
      set {
        needMainTask_ = value;
      }
    }

    /// <summary>Field number for the "NotIntoHint" field.</summary>
    public const int NotIntoHintFieldNumber = 52;
    private string notIntoHint_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NotIntoHint {
      get { return notIntoHint_; }
      set {
        notIntoHint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DeadNotice" field.</summary>
    public const int DeadNoticeFieldNumber = 53;
    private bool deadNotice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DeadNotice {
      get { return deadNotice_; }
      set {
        deadNotice_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Map);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Map other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (GameNote != other.GameNote) return false;
      if (BirthPosX != other.BirthPosX) return false;
      if (BirthPosY != other.BirthPosY) return false;
      if (BirthRadius != other.BirthRadius) return false;
      if (BirthDirection != other.BirthDirection) return false;
      if (AutoTransform != other.AutoTransform) return false;
      if (Layer0 != other.Layer0) return false;
      if (Layer1 != other.Layer1) return false;
      if (Layer2 != other.Layer2) return false;
      if (Layer3 != other.Layer3) return false;
      if (Layer4 != other.Layer4) return false;
      if (Layer5 != other.Layer5) return false;
      if (Layer6 != other.Layer6) return false;
      if (Layer7 != other.Layer7) return false;
      if (Layer8 != other.Layer8) return false;
      if (Layer9 != other.Layer9) return false;
      if (Layer10 != other.Layer10) return false;
      if (Layer11 != other.Layer11) return false;
      if (Layer12 != other.Layer12) return false;
      if (Layer13 != other.Layer13) return false;
      if (Layer14 != other.Layer14) return false;
      if (Layer15 != other.Layer15) return false;
      if (Layer16 != other.Layer16) return false;
      if (Layer17 != other.Layer17) return false;
      if (Layer18 != other.Layer18) return false;
      if (Layer19 != other.Layer19) return false;
      if (Layer20 != other.Layer20) return false;
      if (Layer21 != other.Layer21) return false;
      if (Layer22 != other.Layer22) return false;
      if (Layer23 != other.Layer23) return false;
      if (Layer24 != other.Layer24) return false;
      if (Layer25 != other.Layer25) return false;
      if (Layer26 != other.Layer26) return false;
      if (Layer27 != other.Layer27) return false;
      if (Layer28 != other.Layer28) return false;
      if (Layer29 != other.Layer29) return false;
      if (Layer30 != other.Layer30) return false;
      if (Layer31 != other.Layer31) return false;
      if (ReviveMapCode != other.ReviveMapCode) return false;
      if (ReviveX != other.ReviveX) return false;
      if (ReviveY != other.ReviveY) return false;
      if (ReviveRadius != other.ReviveRadius) return false;
      if (ReviveDirection != other.ReviveDirection) return false;
      if (IsChannelMap != other.IsChannelMap) return false;
      if (BirthPosX2 != other.BirthPosX2) return false;
      if (BirthPosY2 != other.BirthPosY2) return false;
      if (BirthRadius2 != other.BirthRadius2) return false;
      if (BirthDirection2 != other.BirthDirection2) return false;
      if (NeedLevel != other.NeedLevel) return false;
      if (NeedMainTask != other.NeedMainTask) return false;
      if (NotIntoHint != other.NotIntoHint) return false;
      if (DeadNotice != other.DeadNotice) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (GameNote.Length != 0) hash ^= GameNote.GetHashCode();
      if (BirthPosX != 0) hash ^= BirthPosX.GetHashCode();
      if (BirthPosY != 0) hash ^= BirthPosY.GetHashCode();
      if (BirthRadius != 0) hash ^= BirthRadius.GetHashCode();
      if (BirthDirection != 0) hash ^= BirthDirection.GetHashCode();
      if (AutoTransform != false) hash ^= AutoTransform.GetHashCode();
      if (Layer0 != 0) hash ^= Layer0.GetHashCode();
      if (Layer1 != 0) hash ^= Layer1.GetHashCode();
      if (Layer2 != 0) hash ^= Layer2.GetHashCode();
      if (Layer3 != 0) hash ^= Layer3.GetHashCode();
      if (Layer4 != 0) hash ^= Layer4.GetHashCode();
      if (Layer5 != 0) hash ^= Layer5.GetHashCode();
      if (Layer6 != 0) hash ^= Layer6.GetHashCode();
      if (Layer7 != 0) hash ^= Layer7.GetHashCode();
      if (Layer8 != 0) hash ^= Layer8.GetHashCode();
      if (Layer9 != 0) hash ^= Layer9.GetHashCode();
      if (Layer10 != 0) hash ^= Layer10.GetHashCode();
      if (Layer11 != 0) hash ^= Layer11.GetHashCode();
      if (Layer12 != 0) hash ^= Layer12.GetHashCode();
      if (Layer13 != 0) hash ^= Layer13.GetHashCode();
      if (Layer14 != 0) hash ^= Layer14.GetHashCode();
      if (Layer15 != 0) hash ^= Layer15.GetHashCode();
      if (Layer16 != 0) hash ^= Layer16.GetHashCode();
      if (Layer17 != 0) hash ^= Layer17.GetHashCode();
      if (Layer18 != 0) hash ^= Layer18.GetHashCode();
      if (Layer19 != 0) hash ^= Layer19.GetHashCode();
      if (Layer20 != 0) hash ^= Layer20.GetHashCode();
      if (Layer21 != 0) hash ^= Layer21.GetHashCode();
      if (Layer22 != 0) hash ^= Layer22.GetHashCode();
      if (Layer23 != 0) hash ^= Layer23.GetHashCode();
      if (Layer24 != 0) hash ^= Layer24.GetHashCode();
      if (Layer25 != 0) hash ^= Layer25.GetHashCode();
      if (Layer26 != 0) hash ^= Layer26.GetHashCode();
      if (Layer27 != 0) hash ^= Layer27.GetHashCode();
      if (Layer28 != 0) hash ^= Layer28.GetHashCode();
      if (Layer29 != 0) hash ^= Layer29.GetHashCode();
      if (Layer30 != 0) hash ^= Layer30.GetHashCode();
      if (Layer31 != 0) hash ^= Layer31.GetHashCode();
      if (ReviveMapCode != 0) hash ^= ReviveMapCode.GetHashCode();
      if (ReviveX != 0) hash ^= ReviveX.GetHashCode();
      if (ReviveY != 0) hash ^= ReviveY.GetHashCode();
      if (ReviveRadius != 0) hash ^= ReviveRadius.GetHashCode();
      if (ReviveDirection != 0) hash ^= ReviveDirection.GetHashCode();
      if (IsChannelMap != 0) hash ^= IsChannelMap.GetHashCode();
      if (BirthPosX2.Length != 0) hash ^= BirthPosX2.GetHashCode();
      if (BirthPosY2.Length != 0) hash ^= BirthPosY2.GetHashCode();
      if (BirthRadius2.Length != 0) hash ^= BirthRadius2.GetHashCode();
      if (BirthDirection2.Length != 0) hash ^= BirthDirection2.GetHashCode();
      if (NeedLevel != 0) hash ^= NeedLevel.GetHashCode();
      if (NeedMainTask != 0) hash ^= NeedMainTask.GetHashCode();
      if (NotIntoHint.Length != 0) hash ^= NotIntoHint.GetHashCode();
      if (DeadNotice != false) hash ^= DeadNotice.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Code);
      }
      if (GameNote.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(GameNote);
      }
      if (BirthPosX != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(BirthPosX);
      }
      if (BirthPosY != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(BirthPosY);
      }
      if (BirthRadius != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(BirthRadius);
      }
      if (BirthDirection != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(BirthDirection);
      }
      if (AutoTransform != false) {
        output.WriteRawTag(56);
        output.WriteBool(AutoTransform);
      }
      if (Layer0 != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Layer0);
      }
      if (Layer1 != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(Layer1);
      }
      if (Layer2 != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(Layer2);
      }
      if (Layer3 != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(Layer3);
      }
      if (Layer4 != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(Layer4);
      }
      if (Layer5 != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(Layer5);
      }
      if (Layer6 != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(Layer6);
      }
      if (Layer7 != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(Layer7);
      }
      if (Layer8 != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(Layer8);
      }
      if (Layer9 != 0) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(Layer9);
      }
      if (Layer10 != 0) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(Layer10);
      }
      if (Layer11 != 0) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(Layer11);
      }
      if (Layer12 != 0) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(Layer12);
      }
      if (Layer13 != 0) {
        output.WriteRawTag(168, 1);
        output.WriteUInt32(Layer13);
      }
      if (Layer14 != 0) {
        output.WriteRawTag(176, 1);
        output.WriteUInt32(Layer14);
      }
      if (Layer15 != 0) {
        output.WriteRawTag(184, 1);
        output.WriteUInt32(Layer15);
      }
      if (Layer16 != 0) {
        output.WriteRawTag(192, 1);
        output.WriteUInt32(Layer16);
      }
      if (Layer17 != 0) {
        output.WriteRawTag(200, 1);
        output.WriteUInt32(Layer17);
      }
      if (Layer18 != 0) {
        output.WriteRawTag(208, 1);
        output.WriteUInt32(Layer18);
      }
      if (Layer19 != 0) {
        output.WriteRawTag(216, 1);
        output.WriteUInt32(Layer19);
      }
      if (Layer20 != 0) {
        output.WriteRawTag(224, 1);
        output.WriteUInt32(Layer20);
      }
      if (Layer21 != 0) {
        output.WriteRawTag(232, 1);
        output.WriteUInt32(Layer21);
      }
      if (Layer22 != 0) {
        output.WriteRawTag(240, 1);
        output.WriteUInt32(Layer22);
      }
      if (Layer23 != 0) {
        output.WriteRawTag(248, 1);
        output.WriteUInt32(Layer23);
      }
      if (Layer24 != 0) {
        output.WriteRawTag(128, 2);
        output.WriteUInt32(Layer24);
      }
      if (Layer25 != 0) {
        output.WriteRawTag(136, 2);
        output.WriteUInt32(Layer25);
      }
      if (Layer26 != 0) {
        output.WriteRawTag(144, 2);
        output.WriteUInt32(Layer26);
      }
      if (Layer27 != 0) {
        output.WriteRawTag(152, 2);
        output.WriteUInt32(Layer27);
      }
      if (Layer28 != 0) {
        output.WriteRawTag(160, 2);
        output.WriteUInt32(Layer28);
      }
      if (Layer29 != 0) {
        output.WriteRawTag(168, 2);
        output.WriteUInt32(Layer29);
      }
      if (Layer30 != 0) {
        output.WriteRawTag(176, 2);
        output.WriteUInt32(Layer30);
      }
      if (Layer31 != 0) {
        output.WriteRawTag(184, 2);
        output.WriteUInt32(Layer31);
      }
      if (ReviveMapCode != 0) {
        output.WriteRawTag(192, 2);
        output.WriteUInt32(ReviveMapCode);
      }
      if (ReviveX != 0) {
        output.WriteRawTag(200, 2);
        output.WriteUInt32(ReviveX);
      }
      if (ReviveY != 0) {
        output.WriteRawTag(208, 2);
        output.WriteUInt32(ReviveY);
      }
      if (ReviveRadius != 0) {
        output.WriteRawTag(216, 2);
        output.WriteUInt32(ReviveRadius);
      }
      if (ReviveDirection != 0) {
        output.WriteRawTag(224, 2);
        output.WriteInt32(ReviveDirection);
      }
      if (IsChannelMap != 0) {
        output.WriteRawTag(232, 2);
        output.WriteUInt32(IsChannelMap);
      }
      if (BirthPosX2.Length != 0) {
        output.WriteRawTag(242, 2);
        output.WriteString(BirthPosX2);
      }
      if (BirthPosY2.Length != 0) {
        output.WriteRawTag(250, 2);
        output.WriteString(BirthPosY2);
      }
      if (BirthRadius2.Length != 0) {
        output.WriteRawTag(130, 3);
        output.WriteString(BirthRadius2);
      }
      if (BirthDirection2.Length != 0) {
        output.WriteRawTag(138, 3);
        output.WriteString(BirthDirection2);
      }
      if (NeedLevel != 0) {
        output.WriteRawTag(144, 3);
        output.WriteUInt32(NeedLevel);
      }
      if (NeedMainTask != 0) {
        output.WriteRawTag(152, 3);
        output.WriteUInt32(NeedMainTask);
      }
      if (NotIntoHint.Length != 0) {
        output.WriteRawTag(162, 3);
        output.WriteString(NotIntoHint);
      }
      if (DeadNotice != false) {
        output.WriteRawTag(168, 3);
        output.WriteBool(DeadNotice);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Code);
      }
      if (GameNote.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(GameNote);
      }
      if (BirthPosX != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(BirthPosX);
      }
      if (BirthPosY != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(BirthPosY);
      }
      if (BirthRadius != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(BirthRadius);
      }
      if (BirthDirection != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(BirthDirection);
      }
      if (AutoTransform != false) {
        output.WriteRawTag(56);
        output.WriteBool(AutoTransform);
      }
      if (Layer0 != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Layer0);
      }
      if (Layer1 != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(Layer1);
      }
      if (Layer2 != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(Layer2);
      }
      if (Layer3 != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(Layer3);
      }
      if (Layer4 != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(Layer4);
      }
      if (Layer5 != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(Layer5);
      }
      if (Layer6 != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(Layer6);
      }
      if (Layer7 != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(Layer7);
      }
      if (Layer8 != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(Layer8);
      }
      if (Layer9 != 0) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(Layer9);
      }
      if (Layer10 != 0) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(Layer10);
      }
      if (Layer11 != 0) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(Layer11);
      }
      if (Layer12 != 0) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(Layer12);
      }
      if (Layer13 != 0) {
        output.WriteRawTag(168, 1);
        output.WriteUInt32(Layer13);
      }
      if (Layer14 != 0) {
        output.WriteRawTag(176, 1);
        output.WriteUInt32(Layer14);
      }
      if (Layer15 != 0) {
        output.WriteRawTag(184, 1);
        output.WriteUInt32(Layer15);
      }
      if (Layer16 != 0) {
        output.WriteRawTag(192, 1);
        output.WriteUInt32(Layer16);
      }
      if (Layer17 != 0) {
        output.WriteRawTag(200, 1);
        output.WriteUInt32(Layer17);
      }
      if (Layer18 != 0) {
        output.WriteRawTag(208, 1);
        output.WriteUInt32(Layer18);
      }
      if (Layer19 != 0) {
        output.WriteRawTag(216, 1);
        output.WriteUInt32(Layer19);
      }
      if (Layer20 != 0) {
        output.WriteRawTag(224, 1);
        output.WriteUInt32(Layer20);
      }
      if (Layer21 != 0) {
        output.WriteRawTag(232, 1);
        output.WriteUInt32(Layer21);
      }
      if (Layer22 != 0) {
        output.WriteRawTag(240, 1);
        output.WriteUInt32(Layer22);
      }
      if (Layer23 != 0) {
        output.WriteRawTag(248, 1);
        output.WriteUInt32(Layer23);
      }
      if (Layer24 != 0) {
        output.WriteRawTag(128, 2);
        output.WriteUInt32(Layer24);
      }
      if (Layer25 != 0) {
        output.WriteRawTag(136, 2);
        output.WriteUInt32(Layer25);
      }
      if (Layer26 != 0) {
        output.WriteRawTag(144, 2);
        output.WriteUInt32(Layer26);
      }
      if (Layer27 != 0) {
        output.WriteRawTag(152, 2);
        output.WriteUInt32(Layer27);
      }
      if (Layer28 != 0) {
        output.WriteRawTag(160, 2);
        output.WriteUInt32(Layer28);
      }
      if (Layer29 != 0) {
        output.WriteRawTag(168, 2);
        output.WriteUInt32(Layer29);
      }
      if (Layer30 != 0) {
        output.WriteRawTag(176, 2);
        output.WriteUInt32(Layer30);
      }
      if (Layer31 != 0) {
        output.WriteRawTag(184, 2);
        output.WriteUInt32(Layer31);
      }
      if (ReviveMapCode != 0) {
        output.WriteRawTag(192, 2);
        output.WriteUInt32(ReviveMapCode);
      }
      if (ReviveX != 0) {
        output.WriteRawTag(200, 2);
        output.WriteUInt32(ReviveX);
      }
      if (ReviveY != 0) {
        output.WriteRawTag(208, 2);
        output.WriteUInt32(ReviveY);
      }
      if (ReviveRadius != 0) {
        output.WriteRawTag(216, 2);
        output.WriteUInt32(ReviveRadius);
      }
      if (ReviveDirection != 0) {
        output.WriteRawTag(224, 2);
        output.WriteInt32(ReviveDirection);
      }
      if (IsChannelMap != 0) {
        output.WriteRawTag(232, 2);
        output.WriteUInt32(IsChannelMap);
      }
      if (BirthPosX2.Length != 0) {
        output.WriteRawTag(242, 2);
        output.WriteString(BirthPosX2);
      }
      if (BirthPosY2.Length != 0) {
        output.WriteRawTag(250, 2);
        output.WriteString(BirthPosY2);
      }
      if (BirthRadius2.Length != 0) {
        output.WriteRawTag(130, 3);
        output.WriteString(BirthRadius2);
      }
      if (BirthDirection2.Length != 0) {
        output.WriteRawTag(138, 3);
        output.WriteString(BirthDirection2);
      }
      if (NeedLevel != 0) {
        output.WriteRawTag(144, 3);
        output.WriteUInt32(NeedLevel);
      }
      if (NeedMainTask != 0) {
        output.WriteRawTag(152, 3);
        output.WriteUInt32(NeedMainTask);
      }
      if (NotIntoHint.Length != 0) {
        output.WriteRawTag(162, 3);
        output.WriteString(NotIntoHint);
      }
      if (DeadNotice != false) {
        output.WriteRawTag(168, 3);
        output.WriteBool(DeadNotice);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Code);
      }
      if (GameNote.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameNote);
      }
      if (BirthPosX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BirthPosX);
      }
      if (BirthPosY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BirthPosY);
      }
      if (BirthRadius != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BirthRadius);
      }
      if (BirthDirection != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BirthDirection);
      }
      if (AutoTransform != false) {
        size += 1 + 1;
      }
      if (Layer0 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Layer0);
      }
      if (Layer1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Layer1);
      }
      if (Layer2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Layer2);
      }
      if (Layer3 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Layer3);
      }
      if (Layer4 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Layer4);
      }
      if (Layer5 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Layer5);
      }
      if (Layer6 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Layer6);
      }
      if (Layer7 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Layer7);
      }
      if (Layer8 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Layer8);
      }
      if (Layer9 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Layer9);
      }
      if (Layer10 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Layer10);
      }
      if (Layer11 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Layer11);
      }
      if (Layer12 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Layer12);
      }
      if (Layer13 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Layer13);
      }
      if (Layer14 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Layer14);
      }
      if (Layer15 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Layer15);
      }
      if (Layer16 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Layer16);
      }
      if (Layer17 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Layer17);
      }
      if (Layer18 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Layer18);
      }
      if (Layer19 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Layer19);
      }
      if (Layer20 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Layer20);
      }
      if (Layer21 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Layer21);
      }
      if (Layer22 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Layer22);
      }
      if (Layer23 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Layer23);
      }
      if (Layer24 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Layer24);
      }
      if (Layer25 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Layer25);
      }
      if (Layer26 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Layer26);
      }
      if (Layer27 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Layer27);
      }
      if (Layer28 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Layer28);
      }
      if (Layer29 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Layer29);
      }
      if (Layer30 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Layer30);
      }
      if (Layer31 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Layer31);
      }
      if (ReviveMapCode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ReviveMapCode);
      }
      if (ReviveX != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ReviveX);
      }
      if (ReviveY != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ReviveY);
      }
      if (ReviveRadius != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ReviveRadius);
      }
      if (ReviveDirection != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ReviveDirection);
      }
      if (IsChannelMap != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IsChannelMap);
      }
      if (BirthPosX2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BirthPosX2);
      }
      if (BirthPosY2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BirthPosY2);
      }
      if (BirthRadius2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BirthRadius2);
      }
      if (BirthDirection2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BirthDirection2);
      }
      if (NeedLevel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(NeedLevel);
      }
      if (NeedMainTask != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(NeedMainTask);
      }
      if (NotIntoHint.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(NotIntoHint);
      }
      if (DeadNotice != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Map other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.GameNote.Length != 0) {
        GameNote = other.GameNote;
      }
      if (other.BirthPosX != 0) {
        BirthPosX = other.BirthPosX;
      }
      if (other.BirthPosY != 0) {
        BirthPosY = other.BirthPosY;
      }
      if (other.BirthRadius != 0) {
        BirthRadius = other.BirthRadius;
      }
      if (other.BirthDirection != 0) {
        BirthDirection = other.BirthDirection;
      }
      if (other.AutoTransform != false) {
        AutoTransform = other.AutoTransform;
      }
      if (other.Layer0 != 0) {
        Layer0 = other.Layer0;
      }
      if (other.Layer1 != 0) {
        Layer1 = other.Layer1;
      }
      if (other.Layer2 != 0) {
        Layer2 = other.Layer2;
      }
      if (other.Layer3 != 0) {
        Layer3 = other.Layer3;
      }
      if (other.Layer4 != 0) {
        Layer4 = other.Layer4;
      }
      if (other.Layer5 != 0) {
        Layer5 = other.Layer5;
      }
      if (other.Layer6 != 0) {
        Layer6 = other.Layer6;
      }
      if (other.Layer7 != 0) {
        Layer7 = other.Layer7;
      }
      if (other.Layer8 != 0) {
        Layer8 = other.Layer8;
      }
      if (other.Layer9 != 0) {
        Layer9 = other.Layer9;
      }
      if (other.Layer10 != 0) {
        Layer10 = other.Layer10;
      }
      if (other.Layer11 != 0) {
        Layer11 = other.Layer11;
      }
      if (other.Layer12 != 0) {
        Layer12 = other.Layer12;
      }
      if (other.Layer13 != 0) {
        Layer13 = other.Layer13;
      }
      if (other.Layer14 != 0) {
        Layer14 = other.Layer14;
      }
      if (other.Layer15 != 0) {
        Layer15 = other.Layer15;
      }
      if (other.Layer16 != 0) {
        Layer16 = other.Layer16;
      }
      if (other.Layer17 != 0) {
        Layer17 = other.Layer17;
      }
      if (other.Layer18 != 0) {
        Layer18 = other.Layer18;
      }
      if (other.Layer19 != 0) {
        Layer19 = other.Layer19;
      }
      if (other.Layer20 != 0) {
        Layer20 = other.Layer20;
      }
      if (other.Layer21 != 0) {
        Layer21 = other.Layer21;
      }
      if (other.Layer22 != 0) {
        Layer22 = other.Layer22;
      }
      if (other.Layer23 != 0) {
        Layer23 = other.Layer23;
      }
      if (other.Layer24 != 0) {
        Layer24 = other.Layer24;
      }
      if (other.Layer25 != 0) {
        Layer25 = other.Layer25;
      }
      if (other.Layer26 != 0) {
        Layer26 = other.Layer26;
      }
      if (other.Layer27 != 0) {
        Layer27 = other.Layer27;
      }
      if (other.Layer28 != 0) {
        Layer28 = other.Layer28;
      }
      if (other.Layer29 != 0) {
        Layer29 = other.Layer29;
      }
      if (other.Layer30 != 0) {
        Layer30 = other.Layer30;
      }
      if (other.Layer31 != 0) {
        Layer31 = other.Layer31;
      }
      if (other.ReviveMapCode != 0) {
        ReviveMapCode = other.ReviveMapCode;
      }
      if (other.ReviveX != 0) {
        ReviveX = other.ReviveX;
      }
      if (other.ReviveY != 0) {
        ReviveY = other.ReviveY;
      }
      if (other.ReviveRadius != 0) {
        ReviveRadius = other.ReviveRadius;
      }
      if (other.ReviveDirection != 0) {
        ReviveDirection = other.ReviveDirection;
      }
      if (other.IsChannelMap != 0) {
        IsChannelMap = other.IsChannelMap;
      }
      if (other.BirthPosX2.Length != 0) {
        BirthPosX2 = other.BirthPosX2;
      }
      if (other.BirthPosY2.Length != 0) {
        BirthPosY2 = other.BirthPosY2;
      }
      if (other.BirthRadius2.Length != 0) {
        BirthRadius2 = other.BirthRadius2;
      }
      if (other.BirthDirection2.Length != 0) {
        BirthDirection2 = other.BirthDirection2;
      }
      if (other.NeedLevel != 0) {
        NeedLevel = other.NeedLevel;
      }
      if (other.NeedMainTask != 0) {
        NeedMainTask = other.NeedMainTask;
      }
      if (other.NotIntoHint.Length != 0) {
        NotIntoHint = other.NotIntoHint;
      }
      if (other.DeadNotice != false) {
        DeadNotice = other.DeadNotice;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = input.ReadUInt32();
            break;
          }
          case 18: {
            GameNote = input.ReadString();
            break;
          }
          case 24: {
            BirthPosX = input.ReadUInt32();
            break;
          }
          case 32: {
            BirthPosY = input.ReadUInt32();
            break;
          }
          case 40: {
            BirthRadius = input.ReadUInt32();
            break;
          }
          case 48: {
            BirthDirection = input.ReadInt32();
            break;
          }
          case 56: {
            AutoTransform = input.ReadBool();
            break;
          }
          case 64: {
            Layer0 = input.ReadUInt32();
            break;
          }
          case 72: {
            Layer1 = input.ReadUInt32();
            break;
          }
          case 80: {
            Layer2 = input.ReadUInt32();
            break;
          }
          case 88: {
            Layer3 = input.ReadUInt32();
            break;
          }
          case 96: {
            Layer4 = input.ReadUInt32();
            break;
          }
          case 104: {
            Layer5 = input.ReadUInt32();
            break;
          }
          case 112: {
            Layer6 = input.ReadUInt32();
            break;
          }
          case 120: {
            Layer7 = input.ReadUInt32();
            break;
          }
          case 128: {
            Layer8 = input.ReadUInt32();
            break;
          }
          case 136: {
            Layer9 = input.ReadUInt32();
            break;
          }
          case 144: {
            Layer10 = input.ReadUInt32();
            break;
          }
          case 152: {
            Layer11 = input.ReadUInt32();
            break;
          }
          case 160: {
            Layer12 = input.ReadUInt32();
            break;
          }
          case 168: {
            Layer13 = input.ReadUInt32();
            break;
          }
          case 176: {
            Layer14 = input.ReadUInt32();
            break;
          }
          case 184: {
            Layer15 = input.ReadUInt32();
            break;
          }
          case 192: {
            Layer16 = input.ReadUInt32();
            break;
          }
          case 200: {
            Layer17 = input.ReadUInt32();
            break;
          }
          case 208: {
            Layer18 = input.ReadUInt32();
            break;
          }
          case 216: {
            Layer19 = input.ReadUInt32();
            break;
          }
          case 224: {
            Layer20 = input.ReadUInt32();
            break;
          }
          case 232: {
            Layer21 = input.ReadUInt32();
            break;
          }
          case 240: {
            Layer22 = input.ReadUInt32();
            break;
          }
          case 248: {
            Layer23 = input.ReadUInt32();
            break;
          }
          case 256: {
            Layer24 = input.ReadUInt32();
            break;
          }
          case 264: {
            Layer25 = input.ReadUInt32();
            break;
          }
          case 272: {
            Layer26 = input.ReadUInt32();
            break;
          }
          case 280: {
            Layer27 = input.ReadUInt32();
            break;
          }
          case 288: {
            Layer28 = input.ReadUInt32();
            break;
          }
          case 296: {
            Layer29 = input.ReadUInt32();
            break;
          }
          case 304: {
            Layer30 = input.ReadUInt32();
            break;
          }
          case 312: {
            Layer31 = input.ReadUInt32();
            break;
          }
          case 320: {
            ReviveMapCode = input.ReadUInt32();
            break;
          }
          case 328: {
            ReviveX = input.ReadUInt32();
            break;
          }
          case 336: {
            ReviveY = input.ReadUInt32();
            break;
          }
          case 344: {
            ReviveRadius = input.ReadUInt32();
            break;
          }
          case 352: {
            ReviveDirection = input.ReadInt32();
            break;
          }
          case 360: {
            IsChannelMap = input.ReadUInt32();
            break;
          }
          case 370: {
            BirthPosX2 = input.ReadString();
            break;
          }
          case 378: {
            BirthPosY2 = input.ReadString();
            break;
          }
          case 386: {
            BirthRadius2 = input.ReadString();
            break;
          }
          case 394: {
            BirthDirection2 = input.ReadString();
            break;
          }
          case 400: {
            NeedLevel = input.ReadUInt32();
            break;
          }
          case 408: {
            NeedMainTask = input.ReadUInt32();
            break;
          }
          case 418: {
            NotIntoHint = input.ReadString();
            break;
          }
          case 424: {
            DeadNotice = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Code = input.ReadUInt32();
            break;
          }
          case 18: {
            GameNote = input.ReadString();
            break;
          }
          case 24: {
            BirthPosX = input.ReadUInt32();
            break;
          }
          case 32: {
            BirthPosY = input.ReadUInt32();
            break;
          }
          case 40: {
            BirthRadius = input.ReadUInt32();
            break;
          }
          case 48: {
            BirthDirection = input.ReadInt32();
            break;
          }
          case 56: {
            AutoTransform = input.ReadBool();
            break;
          }
          case 64: {
            Layer0 = input.ReadUInt32();
            break;
          }
          case 72: {
            Layer1 = input.ReadUInt32();
            break;
          }
          case 80: {
            Layer2 = input.ReadUInt32();
            break;
          }
          case 88: {
            Layer3 = input.ReadUInt32();
            break;
          }
          case 96: {
            Layer4 = input.ReadUInt32();
            break;
          }
          case 104: {
            Layer5 = input.ReadUInt32();
            break;
          }
          case 112: {
            Layer6 = input.ReadUInt32();
            break;
          }
          case 120: {
            Layer7 = input.ReadUInt32();
            break;
          }
          case 128: {
            Layer8 = input.ReadUInt32();
            break;
          }
          case 136: {
            Layer9 = input.ReadUInt32();
            break;
          }
          case 144: {
            Layer10 = input.ReadUInt32();
            break;
          }
          case 152: {
            Layer11 = input.ReadUInt32();
            break;
          }
          case 160: {
            Layer12 = input.ReadUInt32();
            break;
          }
          case 168: {
            Layer13 = input.ReadUInt32();
            break;
          }
          case 176: {
            Layer14 = input.ReadUInt32();
            break;
          }
          case 184: {
            Layer15 = input.ReadUInt32();
            break;
          }
          case 192: {
            Layer16 = input.ReadUInt32();
            break;
          }
          case 200: {
            Layer17 = input.ReadUInt32();
            break;
          }
          case 208: {
            Layer18 = input.ReadUInt32();
            break;
          }
          case 216: {
            Layer19 = input.ReadUInt32();
            break;
          }
          case 224: {
            Layer20 = input.ReadUInt32();
            break;
          }
          case 232: {
            Layer21 = input.ReadUInt32();
            break;
          }
          case 240: {
            Layer22 = input.ReadUInt32();
            break;
          }
          case 248: {
            Layer23 = input.ReadUInt32();
            break;
          }
          case 256: {
            Layer24 = input.ReadUInt32();
            break;
          }
          case 264: {
            Layer25 = input.ReadUInt32();
            break;
          }
          case 272: {
            Layer26 = input.ReadUInt32();
            break;
          }
          case 280: {
            Layer27 = input.ReadUInt32();
            break;
          }
          case 288: {
            Layer28 = input.ReadUInt32();
            break;
          }
          case 296: {
            Layer29 = input.ReadUInt32();
            break;
          }
          case 304: {
            Layer30 = input.ReadUInt32();
            break;
          }
          case 312: {
            Layer31 = input.ReadUInt32();
            break;
          }
          case 320: {
            ReviveMapCode = input.ReadUInt32();
            break;
          }
          case 328: {
            ReviveX = input.ReadUInt32();
            break;
          }
          case 336: {
            ReviveY = input.ReadUInt32();
            break;
          }
          case 344: {
            ReviveRadius = input.ReadUInt32();
            break;
          }
          case 352: {
            ReviveDirection = input.ReadInt32();
            break;
          }
          case 360: {
            IsChannelMap = input.ReadUInt32();
            break;
          }
          case 370: {
            BirthPosX2 = input.ReadString();
            break;
          }
          case 378: {
            BirthPosY2 = input.ReadString();
            break;
          }
          case 386: {
            BirthRadius2 = input.ReadString();
            break;
          }
          case 394: {
            BirthDirection2 = input.ReadString();
            break;
          }
          case 400: {
            NeedLevel = input.ReadUInt32();
            break;
          }
          case 408: {
            NeedMainTask = input.ReadUInt32();
            break;
          }
          case 418: {
            NotIntoHint = input.ReadString();
            break;
          }
          case 424: {
            DeadNotice = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
