// <auto-generated>
//     Generated by TableExportWindow.  DO NOT EDIT!
// </auto-generated>
namespace Core.Game.Table
{
    public partial class TableGroup
    {
        public static AudiosTable AudiosTable { get; private set;}
        public static ConfigTable ConfigTable { get; private set;}
        public static MagicHitTable MagicHitTable { get; private set;}
        public static MagicsTable MagicsTable { get; private set;}
        public static MapTable MapTable { get; private set;}
        public static MonstersTable MonstersTable { get; private set;}

        public static System.Action<string, System.Action<byte[]>, System.Action<string>> Loader;
        public static void ReloadAll(System.Action onLoaded = null)
        {
            int totalCount = 6; 
            int loadedCount = 0;
            System.Action checkLoaded = () =>
            {
                loadedCount++;
                if (loadedCount == totalCount)
                    onLoaded?.Invoke();
            };
            Loader?.Invoke("Audios", (bytes) => { AudiosTable = AudiosTable.Parser.ParseFrom(bytes); checkLoaded(); }, (json) => { AudiosTable = AudiosTable.Parser.ParseJson(json); checkLoaded(); });
            Loader?.Invoke("Config", (bytes) => { ConfigTable = ConfigTable.Parser.ParseFrom(bytes); checkLoaded(); }, (json) => { ConfigTable = ConfigTable.Parser.ParseJson(json); checkLoaded(); });
            Loader?.Invoke("MagicHit", (bytes) => { MagicHitTable = MagicHitTable.Parser.ParseFrom(bytes); checkLoaded(); }, (json) => { MagicHitTable = MagicHitTable.Parser.ParseJson(json); checkLoaded(); });
            Loader?.Invoke("Magics", (bytes) => { MagicsTable = MagicsTable.Parser.ParseFrom(bytes); checkLoaded(); }, (json) => { MagicsTable = MagicsTable.Parser.ParseJson(json); checkLoaded(); });
            Loader?.Invoke("Map", (bytes) => { MapTable = MapTable.Parser.ParseFrom(bytes); checkLoaded(); }, (json) => { MapTable = MapTable.Parser.ParseJson(json); checkLoaded(); });
            Loader?.Invoke("Monsters", (bytes) => { MonstersTable = MonstersTable.Parser.ParseFrom(bytes); checkLoaded(); }, (json) => { MonstersTable = MonstersTable.Parser.ParseJson(json); checkLoaded(); });
        }
    }
}
