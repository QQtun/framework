// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: MonstersTable.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Core.Game.Table {

  /// <summary>Holder for reflection information generated from MonstersTable.proto</summary>
  public static partial class MonstersTableReflection {

    #region Descriptor
    /// <summary>File descriptor for MonstersTable.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MonstersTableReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNNb25zdGVyc1RhYmxlLnByb3RvEg9Db3JlLkdhbWUuVGFibGUiOAoNTW9u",
            "c3RlcnNUYWJsZRInCgRyb3dzGAEgAygLMhkuQ29yZS5HYW1lLlRhYmxlLk1v",
            "bnN0ZXJzIpwTCghNb25zdGVycxIKCgJJRBgBIAEoDRINCgVTTmFtZRgCIAEo",
            "CRIRCglHYW1lTm90ZTEYAyABKAkSEAoIR2FtZU5vdGUYBCABKAkSEQoJR2Ft",
            "ZU5vdGUyGAUgASgJEgwKBENvZGUYBiABKAUSDwoHUGljQ29kZRgHIAEoCRIU",
            "CgxSYWRhck1vbnN0ZXIYCCABKAkSDwoHRGlzcGxheRgJIAEoBRIPCgdSZXNO",
            "YW1lGAogASgJEhEKCVJlc0lETmFtZRgLIAEoBRINCgVTY2FsZRgMIAEoDRIQ",
            "CghGdW5jdGlvbhgNIAEoCRIPCgdNYXBDb2RlGA4gASgNEhAKCFNoYWRlcklE",
            "GA8gASgNEhUKDUdob3N0U2hhZGVySUQYECABKA0SEgoKR3VhSmllRGlhbhgR",
            "IAEoCRIUCgxHdWFKaWVUZVhpYW8YEiABKA0SEgoKQm9ybkFjdGlvbhgTIAEo",
            "DRIVCg1Db21lQW5pbWF0aW9uGBQgASgNEhQKDERpZUFuaW1hdGlvbhgVIAEo",
            "DRIRCglEaWVFZmZlY3QYFiABKA0SFAoMRGVhZERpc3NvbHZlGBcgASgJEhMK",
            "C0NhbWVyYVBhcmFtGBggASgJEhAKCE1haW5Cb25lGBkgASgJEhMKC0xpZmVC",
            "YXJQb3NZGBogASgCEhkKEVJlbW92ZURlY1doZW5EZWFkGBsgASgNEgwKBFRh",
            "bGsYHCABKAkSDQoFVGFsazIYHSABKAkSEQoJTmFtZUNvbG9yGB4gASgNEhIK",
            "ClpodWFuU2hlbmcYHyABKA0SCwoDU2V4GCAgASgNEhAKCENhbVBhcmFtGCEg",
            "ASgNEhEKCVBsYXlTb3VuZBgiIAEoCRITCgtBdHRhY2tTb3VuZBgjIAEoCRIQ",
            "CghIaXRTb3VuZBgkIAEoCRIQCghEaWVTb3VuZBglIAEoCRIPCgdZb3VTaG91",
            "GCYgASgNEg8KB1p1b1Nob3UYJyABKAkSEwoLTW9uc3RlclR5cGUYKCABKA0S",
            "EwoLWHVlVGlhb1R5cGUYKSABKAkSEAoIU2tpbGxJRHMYKiABKAkSFgoOUmFu",
            "ZG9tU2tpbGxJRHMYKyABKAkSDAoEQUlJRBgsIAEoDRIUCgxEZWZhbmNlU3R5",
            "bGUYLSABKAkSGgoST2ZmUGxheVJlY292ZXJUaW1lGC4gASgNEhUKDUJpcnRo",
            "U3R1blRpbWUYLyABKA0SFwoPUmVzZXRCcmVha0FybW9yGDAgASgJEg4KBldl",
            "aWdodBgxIAEoDRIVCg1Nb25zdGVyVHlwZUV4GDIgASgNEhEKCU1vdmVCbG9j",
            "axgzIAEoDRIQCghUdXJuVGltZRg0IAEoCRITCgtBdHRhY2tSYW5nZRg1IAEo",
            "DRIRCglTZWVkUmFuZ2UYNiABKA0SEgoKVHJhY2VSYW5nZRg3IAEoDRIUCgxN",
            "b25zdGVyU3BlZWQYOCABKAISEwoLQXR0YWNrU3BlZWQYOSABKAISDwoHQ29s",
            "bGlkZRg6IAEoCRIOCgZQYXRoSWQYOyABKAkSGgoSQmF0dGxlTW92ZU1pblNw",
            "YWNlGDwgASgNEhoKEkJhdHRsZU1vdmVNYXhTcGFjZRg9IAEoDRIXCg9CYXR0",
            "bGVNb3ZlQW5nbGUYPiABKA0SDgoGUmFkaXVzGD8gASgNEhQKDEVmZmVjdFJh",
            "ZGl1cxhAIAEoDRIWCg5CYXR0bGVNb3ZlT2RkcxhBIAEoDRIXCg9CYXR0bGVG",
            "YWludE9kZHMYQiABKA0SFAoMR2F6ZU1vdmVPZGRzGEMgASgNEhIKCkF0dGFj",
            "a09kZHMYRCABKA0SFQoNTW9uc3Rlck5vdGljZRhFIAEoCRISCgpBdHRhY2tU",
            "eXBlGEYgASgNEhMKC0F0dGFja1N0eWxlGEcgASgNEhcKD01vbnN0ZXJUeXBl",
            "U29ydBhIIAEoDRIQCghNb3ZlUGFjZRhJIAEoDRIUCgxNb3ZlV2FpdFRpbWUY",
            "SiABKA0SDwoHVHVvWmhhbhhLIAEoDRIMCgRDYW1wGEwgASgNEhEKCVNlZWtT",
            "dHlsZRhNIAEoDRIUCgxVSUFwcGVuZExpZmUYTiABKA0SFQoNTWF4U3VwZXJB",
            "cm1vchhPIAEoDRIQCghNYXhNYWdpYxhQIAEoDRIYChBNaW5BdHRhY2tQZXJj",
            "ZW50GFEgASgNEhgKEE1heEF0dGFja1BlcmNlbnQYUiABKA0SFgoORGVmZW5z",
            "ZVBlcmNlbnQYUyABKA0SFwoPTURlZmVuc2VQZXJjZW50GFQgASgNEg0KBURv",
            "ZGdlGFUgASgNEgwKBEhpdFYYViABKA0SDwoHTWF4TGlmZRhXIAEoDRIUCgxS",
            "ZWNvdmVyTGlmZVYYWCABKA0SDQoFTGV2ZWwYWSABKA0SDQoFR3JhZGUYWiAB",
            "KA0SDgoGQ29tYmF0GFsgASgNEiEKGUNvdW50RG93bkluT25lVmlvbGVudFRp",
            "bWUYXCABKA0SIQoZQ291bnREb3duSW5Ud29WaW9sZW50VGltZRhdIAEoDRIT",
            "CgtWaW9sZW50QUlJRBheIAEoDRISCgpFeHBlcmllbmNlGF8gASgNEhcKD0Nv",
            "bmRpdGlvbkZhbGxJRBhgIAEoDRIOCgZGYWxsSUQYYSABKA0SEQoJRmFsbExl",
            "dmVsGGIgASgNEhIKCkZhbGxMZXZlbDIYYyABKA0SDQoFQWRkU1AYZCABKA0S",
            "FQoNRGVmYXVsdEFjdGlvbhhlIAEoCRIUCgxEb3VibGVBdHRhY2sYZiABKA0S",
            "EwoLRmF0YWxBdHRhY2sYZyABKA0SFQoNUmVjb3Zlck1hZ2ljVhhoIAEoDRIa",
            "ChJEYW1hZ2VUaG9yblBlcmNlbnQYaSABKA0SEwoLRGFtYWdlVGhvcm4YaiAB",
            "KA0SHgoWU3ViQXR0YWNrSW5qdXJlUGVyY2VudBhrIAEoDRIXCg9TdWJBdHRh",
            "Y2tJbmp1cmUYbCABKA0SHAoUSWdub3JlRGVmZW5zZVBlcmNlbnQYbSABKA0S",
            "GQoRSWdub3JlRGVmZW5zZVJhdGUYbiABKA0SDQoFTHVja3kYbyABKA0SEQoJ",
            "THVja3lUQm94GHAgASgNEhMKC0JpcnRoU3RhdHVlGHEgASgNEg4KBkJlbG9u",
            "ZxhyIAEoDRIVCg1QZXJzb25hbEppRmVuGHMgASgNEhEKCUNhbXBKaUZlbhh0",
            "IAEoDRIQCghFTW9KaUZlbhh1IAEoDRISCgpYdWVTZUppRmVuGHYgASgNEhIK",
            "CkppbkJpSmlGZW4YdyABKA0SFAoMTGFuZ0h1bkppRmVuGHggASgNYgZwcm90",
            "bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.Game.Table.MonstersTable), global::Core.Game.Table.MonstersTable.Parser, new[]{ "Rows" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.Game.Table.Monsters), global::Core.Game.Table.Monsters.Parser, new[]{ "ID", "SName", "GameNote1", "GameNote", "GameNote2", "Code", "PicCode", "RadarMonster", "Display", "ResName", "ResIDName", "Scale", "Function", "MapCode", "ShaderID", "GhostShaderID", "GuaJieDian", "GuaJieTeXiao", "BornAction", "ComeAnimation", "DieAnimation", "DieEffect", "DeadDissolve", "CameraParam", "MainBone", "LifeBarPosY", "RemoveDecWhenDead", "Talk", "Talk2", "NameColor", "ZhuanSheng", "Sex", "CamParam", "PlaySound", "AttackSound", "HitSound", "DieSound", "YouShou", "ZuoShou", "MonsterType", "XueTiaoType", "SkillIDs", "RandomSkillIDs", "AIID", "DefanceStyle", "OffPlayRecoverTime", "BirthStunTime", "ResetBreakArmor", "Weight", "MonsterTypeEx", "MoveBlock", "TurnTime", "AttackRange", "SeedRange", "TraceRange", "MonsterSpeed", "AttackSpeed", "Collide", "PathId", "BattleMoveMinSpace", "BattleMoveMaxSpace", "BattleMoveAngle", "Radius", "EffectRadius", "BattleMoveOdds", "BattleFaintOdds", "GazeMoveOdds", "AttackOdds", "MonsterNotice", "AttackType", "AttackStyle", "MonsterTypeSort", "MovePace", "MoveWaitTime", "TuoZhan", "Camp", "SeekStyle", "UIAppendLife", "MaxSuperArmor", "MaxMagic", "MinAttackPercent", "MaxAttackPercent", "DefensePercent", "MDefensePercent", "Dodge", "HitV", "MaxLife", "RecoverLifeV", "Level", "Grade", "Combat", "CountDownInOneViolentTime", "CountDownInTwoViolentTime", "ViolentAIID", "Experience", "ConditionFallID", "FallID", "FallLevel", "FallLevel2", "AddSP", "DefaultAction", "DoubleAttack", "FatalAttack", "RecoverMagicV", "DamageThornPercent", "DamageThorn", "SubAttackInjurePercent", "SubAttackInjure", "IgnoreDefensePercent", "IgnoreDefenseRate", "Lucky", "LuckyTBox", "BirthStatue", "Belong", "PersonalJiFen", "CampJiFen", "EMoJiFen", "XueSeJiFen", "JinBiJiFen", "LangHunJiFen" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class MonstersTable : pb::IMessage<MonstersTable>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MonstersTable> _parser = new pb::MessageParser<MonstersTable>(() => new MonstersTable());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MonstersTable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.Game.Table.MonstersTableReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonstersTable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonstersTable(MonstersTable other) : this() {
      rows_ = other.rows_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonstersTable Clone() {
      return new MonstersTable(this);
    }

    /// <summary>Field number for the "rows" field.</summary>
    public const int RowsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Core.Game.Table.Monsters> _repeated_rows_codec
        = pb::FieldCodec.ForMessage(10, global::Core.Game.Table.Monsters.Parser);
    private readonly pbc::RepeatedField<global::Core.Game.Table.Monsters> rows_ = new pbc::RepeatedField<global::Core.Game.Table.Monsters>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.Game.Table.Monsters> Rows {
      get { return rows_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MonstersTable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MonstersTable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!rows_.Equals(other.rows_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= rows_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      rows_.WriteTo(output, _repeated_rows_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      rows_.WriteTo(ref output, _repeated_rows_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += rows_.CalculateSize(_repeated_rows_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MonstersTable other) {
      if (other == null) {
        return;
      }
      rows_.Add(other.rows_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            rows_.AddEntriesFrom(input, _repeated_rows_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            rows_.AddEntriesFrom(ref input, _repeated_rows_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Monsters : pb::IMessage<Monsters>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Monsters> _parser = new pb::MessageParser<Monsters>(() => new Monsters());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Monsters> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.Game.Table.MonstersTableReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Monsters() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Monsters(Monsters other) : this() {
      iD_ = other.iD_;
      sName_ = other.sName_;
      gameNote1_ = other.gameNote1_;
      gameNote_ = other.gameNote_;
      gameNote2_ = other.gameNote2_;
      code_ = other.code_;
      picCode_ = other.picCode_;
      radarMonster_ = other.radarMonster_;
      display_ = other.display_;
      resName_ = other.resName_;
      resIDName_ = other.resIDName_;
      scale_ = other.scale_;
      function_ = other.function_;
      mapCode_ = other.mapCode_;
      shaderID_ = other.shaderID_;
      ghostShaderID_ = other.ghostShaderID_;
      guaJieDian_ = other.guaJieDian_;
      guaJieTeXiao_ = other.guaJieTeXiao_;
      bornAction_ = other.bornAction_;
      comeAnimation_ = other.comeAnimation_;
      dieAnimation_ = other.dieAnimation_;
      dieEffect_ = other.dieEffect_;
      deadDissolve_ = other.deadDissolve_;
      cameraParam_ = other.cameraParam_;
      mainBone_ = other.mainBone_;
      lifeBarPosY_ = other.lifeBarPosY_;
      removeDecWhenDead_ = other.removeDecWhenDead_;
      talk_ = other.talk_;
      talk2_ = other.talk2_;
      nameColor_ = other.nameColor_;
      zhuanSheng_ = other.zhuanSheng_;
      sex_ = other.sex_;
      camParam_ = other.camParam_;
      playSound_ = other.playSound_;
      attackSound_ = other.attackSound_;
      hitSound_ = other.hitSound_;
      dieSound_ = other.dieSound_;
      youShou_ = other.youShou_;
      zuoShou_ = other.zuoShou_;
      monsterType_ = other.monsterType_;
      xueTiaoType_ = other.xueTiaoType_;
      skillIDs_ = other.skillIDs_;
      randomSkillIDs_ = other.randomSkillIDs_;
      aIID_ = other.aIID_;
      defanceStyle_ = other.defanceStyle_;
      offPlayRecoverTime_ = other.offPlayRecoverTime_;
      birthStunTime_ = other.birthStunTime_;
      resetBreakArmor_ = other.resetBreakArmor_;
      weight_ = other.weight_;
      monsterTypeEx_ = other.monsterTypeEx_;
      moveBlock_ = other.moveBlock_;
      turnTime_ = other.turnTime_;
      attackRange_ = other.attackRange_;
      seedRange_ = other.seedRange_;
      traceRange_ = other.traceRange_;
      monsterSpeed_ = other.monsterSpeed_;
      attackSpeed_ = other.attackSpeed_;
      collide_ = other.collide_;
      pathId_ = other.pathId_;
      battleMoveMinSpace_ = other.battleMoveMinSpace_;
      battleMoveMaxSpace_ = other.battleMoveMaxSpace_;
      battleMoveAngle_ = other.battleMoveAngle_;
      radius_ = other.radius_;
      effectRadius_ = other.effectRadius_;
      battleMoveOdds_ = other.battleMoveOdds_;
      battleFaintOdds_ = other.battleFaintOdds_;
      gazeMoveOdds_ = other.gazeMoveOdds_;
      attackOdds_ = other.attackOdds_;
      monsterNotice_ = other.monsterNotice_;
      attackType_ = other.attackType_;
      attackStyle_ = other.attackStyle_;
      monsterTypeSort_ = other.monsterTypeSort_;
      movePace_ = other.movePace_;
      moveWaitTime_ = other.moveWaitTime_;
      tuoZhan_ = other.tuoZhan_;
      camp_ = other.camp_;
      seekStyle_ = other.seekStyle_;
      uIAppendLife_ = other.uIAppendLife_;
      maxSuperArmor_ = other.maxSuperArmor_;
      maxMagic_ = other.maxMagic_;
      minAttackPercent_ = other.minAttackPercent_;
      maxAttackPercent_ = other.maxAttackPercent_;
      defensePercent_ = other.defensePercent_;
      mDefensePercent_ = other.mDefensePercent_;
      dodge_ = other.dodge_;
      hitV_ = other.hitV_;
      maxLife_ = other.maxLife_;
      recoverLifeV_ = other.recoverLifeV_;
      level_ = other.level_;
      grade_ = other.grade_;
      combat_ = other.combat_;
      countDownInOneViolentTime_ = other.countDownInOneViolentTime_;
      countDownInTwoViolentTime_ = other.countDownInTwoViolentTime_;
      violentAIID_ = other.violentAIID_;
      experience_ = other.experience_;
      conditionFallID_ = other.conditionFallID_;
      fallID_ = other.fallID_;
      fallLevel_ = other.fallLevel_;
      fallLevel2_ = other.fallLevel2_;
      addSP_ = other.addSP_;
      defaultAction_ = other.defaultAction_;
      doubleAttack_ = other.doubleAttack_;
      fatalAttack_ = other.fatalAttack_;
      recoverMagicV_ = other.recoverMagicV_;
      damageThornPercent_ = other.damageThornPercent_;
      damageThorn_ = other.damageThorn_;
      subAttackInjurePercent_ = other.subAttackInjurePercent_;
      subAttackInjure_ = other.subAttackInjure_;
      ignoreDefensePercent_ = other.ignoreDefensePercent_;
      ignoreDefenseRate_ = other.ignoreDefenseRate_;
      lucky_ = other.lucky_;
      luckyTBox_ = other.luckyTBox_;
      birthStatue_ = other.birthStatue_;
      belong_ = other.belong_;
      personalJiFen_ = other.personalJiFen_;
      campJiFen_ = other.campJiFen_;
      eMoJiFen_ = other.eMoJiFen_;
      xueSeJiFen_ = other.xueSeJiFen_;
      jinBiJiFen_ = other.jinBiJiFen_;
      langHunJiFen_ = other.langHunJiFen_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Monsters Clone() {
      return new Monsters(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private uint iD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "SName" field.</summary>
    public const int SNameFieldNumber = 2;
    private string sName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SName {
      get { return sName_; }
      set {
        sName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "GameNote1" field.</summary>
    public const int GameNote1FieldNumber = 3;
    private string gameNote1_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameNote1 {
      get { return gameNote1_; }
      set {
        gameNote1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "GameNote" field.</summary>
    public const int GameNoteFieldNumber = 4;
    private string gameNote_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameNote {
      get { return gameNote_; }
      set {
        gameNote_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "GameNote2" field.</summary>
    public const int GameNote2FieldNumber = 5;
    private string gameNote2_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameNote2 {
      get { return gameNote2_; }
      set {
        gameNote2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Code" field.</summary>
    public const int CodeFieldNumber = 6;
    private int code_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "PicCode" field.</summary>
    public const int PicCodeFieldNumber = 7;
    private string picCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PicCode {
      get { return picCode_; }
      set {
        picCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RadarMonster" field.</summary>
    public const int RadarMonsterFieldNumber = 8;
    private string radarMonster_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RadarMonster {
      get { return radarMonster_; }
      set {
        radarMonster_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Display" field.</summary>
    public const int DisplayFieldNumber = 9;
    private int display_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Display {
      get { return display_; }
      set {
        display_ = value;
      }
    }

    /// <summary>Field number for the "ResName" field.</summary>
    public const int ResNameFieldNumber = 10;
    private string resName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResName {
      get { return resName_; }
      set {
        resName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ResIDName" field.</summary>
    public const int ResIDNameFieldNumber = 11;
    private int resIDName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ResIDName {
      get { return resIDName_; }
      set {
        resIDName_ = value;
      }
    }

    /// <summary>Field number for the "Scale" field.</summary>
    public const int ScaleFieldNumber = 12;
    private uint scale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }

    /// <summary>Field number for the "Function" field.</summary>
    public const int FunctionFieldNumber = 13;
    private string function_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Function {
      get { return function_; }
      set {
        function_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MapCode" field.</summary>
    public const int MapCodeFieldNumber = 14;
    private uint mapCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MapCode {
      get { return mapCode_; }
      set {
        mapCode_ = value;
      }
    }

    /// <summary>Field number for the "ShaderID" field.</summary>
    public const int ShaderIDFieldNumber = 15;
    private uint shaderID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ShaderID {
      get { return shaderID_; }
      set {
        shaderID_ = value;
      }
    }

    /// <summary>Field number for the "GhostShaderID" field.</summary>
    public const int GhostShaderIDFieldNumber = 16;
    private uint ghostShaderID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GhostShaderID {
      get { return ghostShaderID_; }
      set {
        ghostShaderID_ = value;
      }
    }

    /// <summary>Field number for the "GuaJieDian" field.</summary>
    public const int GuaJieDianFieldNumber = 17;
    private string guaJieDian_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GuaJieDian {
      get { return guaJieDian_; }
      set {
        guaJieDian_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "GuaJieTeXiao" field.</summary>
    public const int GuaJieTeXiaoFieldNumber = 18;
    private uint guaJieTeXiao_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GuaJieTeXiao {
      get { return guaJieTeXiao_; }
      set {
        guaJieTeXiao_ = value;
      }
    }

    /// <summary>Field number for the "BornAction" field.</summary>
    public const int BornActionFieldNumber = 19;
    private uint bornAction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BornAction {
      get { return bornAction_; }
      set {
        bornAction_ = value;
      }
    }

    /// <summary>Field number for the "ComeAnimation" field.</summary>
    public const int ComeAnimationFieldNumber = 20;
    private uint comeAnimation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ComeAnimation {
      get { return comeAnimation_; }
      set {
        comeAnimation_ = value;
      }
    }

    /// <summary>Field number for the "DieAnimation" field.</summary>
    public const int DieAnimationFieldNumber = 21;
    private uint dieAnimation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DieAnimation {
      get { return dieAnimation_; }
      set {
        dieAnimation_ = value;
      }
    }

    /// <summary>Field number for the "DieEffect" field.</summary>
    public const int DieEffectFieldNumber = 22;
    private uint dieEffect_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DieEffect {
      get { return dieEffect_; }
      set {
        dieEffect_ = value;
      }
    }

    /// <summary>Field number for the "DeadDissolve" field.</summary>
    public const int DeadDissolveFieldNumber = 23;
    private string deadDissolve_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeadDissolve {
      get { return deadDissolve_; }
      set {
        deadDissolve_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CameraParam" field.</summary>
    public const int CameraParamFieldNumber = 24;
    private string cameraParam_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CameraParam {
      get { return cameraParam_; }
      set {
        cameraParam_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MainBone" field.</summary>
    public const int MainBoneFieldNumber = 25;
    private string mainBone_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MainBone {
      get { return mainBone_; }
      set {
        mainBone_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LifeBarPosY" field.</summary>
    public const int LifeBarPosYFieldNumber = 26;
    private float lifeBarPosY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LifeBarPosY {
      get { return lifeBarPosY_; }
      set {
        lifeBarPosY_ = value;
      }
    }

    /// <summary>Field number for the "RemoveDecWhenDead" field.</summary>
    public const int RemoveDecWhenDeadFieldNumber = 27;
    private uint removeDecWhenDead_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RemoveDecWhenDead {
      get { return removeDecWhenDead_; }
      set {
        removeDecWhenDead_ = value;
      }
    }

    /// <summary>Field number for the "Talk" field.</summary>
    public const int TalkFieldNumber = 28;
    private string talk_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Talk {
      get { return talk_; }
      set {
        talk_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Talk2" field.</summary>
    public const int Talk2FieldNumber = 29;
    private string talk2_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Talk2 {
      get { return talk2_; }
      set {
        talk2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "NameColor" field.</summary>
    public const int NameColorFieldNumber = 30;
    private uint nameColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NameColor {
      get { return nameColor_; }
      set {
        nameColor_ = value;
      }
    }

    /// <summary>Field number for the "ZhuanSheng" field.</summary>
    public const int ZhuanShengFieldNumber = 31;
    private uint zhuanSheng_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ZhuanSheng {
      get { return zhuanSheng_; }
      set {
        zhuanSheng_ = value;
      }
    }

    /// <summary>Field number for the "Sex" field.</summary>
    public const int SexFieldNumber = 32;
    private uint sex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Sex {
      get { return sex_; }
      set {
        sex_ = value;
      }
    }

    /// <summary>Field number for the "CamParam" field.</summary>
    public const int CamParamFieldNumber = 33;
    private uint camParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CamParam {
      get { return camParam_; }
      set {
        camParam_ = value;
      }
    }

    /// <summary>Field number for the "PlaySound" field.</summary>
    public const int PlaySoundFieldNumber = 34;
    private string playSound_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlaySound {
      get { return playSound_; }
      set {
        playSound_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AttackSound" field.</summary>
    public const int AttackSoundFieldNumber = 35;
    private string attackSound_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AttackSound {
      get { return attackSound_; }
      set {
        attackSound_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HitSound" field.</summary>
    public const int HitSoundFieldNumber = 36;
    private string hitSound_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HitSound {
      get { return hitSound_; }
      set {
        hitSound_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DieSound" field.</summary>
    public const int DieSoundFieldNumber = 37;
    private string dieSound_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DieSound {
      get { return dieSound_; }
      set {
        dieSound_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "YouShou" field.</summary>
    public const int YouShouFieldNumber = 38;
    private uint youShou_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint YouShou {
      get { return youShou_; }
      set {
        youShou_ = value;
      }
    }

    /// <summary>Field number for the "ZuoShou" field.</summary>
    public const int ZuoShouFieldNumber = 39;
    private string zuoShou_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ZuoShou {
      get { return zuoShou_; }
      set {
        zuoShou_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MonsterType" field.</summary>
    public const int MonsterTypeFieldNumber = 40;
    private uint monsterType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MonsterType {
      get { return monsterType_; }
      set {
        monsterType_ = value;
      }
    }

    /// <summary>Field number for the "XueTiaoType" field.</summary>
    public const int XueTiaoTypeFieldNumber = 41;
    private string xueTiaoType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string XueTiaoType {
      get { return xueTiaoType_; }
      set {
        xueTiaoType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SkillIDs" field.</summary>
    public const int SkillIDsFieldNumber = 42;
    private string skillIDs_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillIDs {
      get { return skillIDs_; }
      set {
        skillIDs_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RandomSkillIDs" field.</summary>
    public const int RandomSkillIDsFieldNumber = 43;
    private string randomSkillIDs_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RandomSkillIDs {
      get { return randomSkillIDs_; }
      set {
        randomSkillIDs_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AIID" field.</summary>
    public const int AIIDFieldNumber = 44;
    private uint aIID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AIID {
      get { return aIID_; }
      set {
        aIID_ = value;
      }
    }

    /// <summary>Field number for the "DefanceStyle" field.</summary>
    public const int DefanceStyleFieldNumber = 45;
    private string defanceStyle_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DefanceStyle {
      get { return defanceStyle_; }
      set {
        defanceStyle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "OffPlayRecoverTime" field.</summary>
    public const int OffPlayRecoverTimeFieldNumber = 46;
    private uint offPlayRecoverTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OffPlayRecoverTime {
      get { return offPlayRecoverTime_; }
      set {
        offPlayRecoverTime_ = value;
      }
    }

    /// <summary>Field number for the "BirthStunTime" field.</summary>
    public const int BirthStunTimeFieldNumber = 47;
    private uint birthStunTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BirthStunTime {
      get { return birthStunTime_; }
      set {
        birthStunTime_ = value;
      }
    }

    /// <summary>Field number for the "ResetBreakArmor" field.</summary>
    public const int ResetBreakArmorFieldNumber = 48;
    private string resetBreakArmor_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResetBreakArmor {
      get { return resetBreakArmor_; }
      set {
        resetBreakArmor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Weight" field.</summary>
    public const int WeightFieldNumber = 49;
    private uint weight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Weight {
      get { return weight_; }
      set {
        weight_ = value;
      }
    }

    /// <summary>Field number for the "MonsterTypeEx" field.</summary>
    public const int MonsterTypeExFieldNumber = 50;
    private uint monsterTypeEx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MonsterTypeEx {
      get { return monsterTypeEx_; }
      set {
        monsterTypeEx_ = value;
      }
    }

    /// <summary>Field number for the "MoveBlock" field.</summary>
    public const int MoveBlockFieldNumber = 51;
    private uint moveBlock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MoveBlock {
      get { return moveBlock_; }
      set {
        moveBlock_ = value;
      }
    }

    /// <summary>Field number for the "TurnTime" field.</summary>
    public const int TurnTimeFieldNumber = 52;
    private string turnTime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TurnTime {
      get { return turnTime_; }
      set {
        turnTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AttackRange" field.</summary>
    public const int AttackRangeFieldNumber = 53;
    private uint attackRange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AttackRange {
      get { return attackRange_; }
      set {
        attackRange_ = value;
      }
    }

    /// <summary>Field number for the "SeedRange" field.</summary>
    public const int SeedRangeFieldNumber = 54;
    private uint seedRange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SeedRange {
      get { return seedRange_; }
      set {
        seedRange_ = value;
      }
    }

    /// <summary>Field number for the "TraceRange" field.</summary>
    public const int TraceRangeFieldNumber = 55;
    private uint traceRange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TraceRange {
      get { return traceRange_; }
      set {
        traceRange_ = value;
      }
    }

    /// <summary>Field number for the "MonsterSpeed" field.</summary>
    public const int MonsterSpeedFieldNumber = 56;
    private float monsterSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MonsterSpeed {
      get { return monsterSpeed_; }
      set {
        monsterSpeed_ = value;
      }
    }

    /// <summary>Field number for the "AttackSpeed" field.</summary>
    public const int AttackSpeedFieldNumber = 57;
    private float attackSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AttackSpeed {
      get { return attackSpeed_; }
      set {
        attackSpeed_ = value;
      }
    }

    /// <summary>Field number for the "Collide" field.</summary>
    public const int CollideFieldNumber = 58;
    private string collide_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Collide {
      get { return collide_; }
      set {
        collide_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PathId" field.</summary>
    public const int PathIdFieldNumber = 59;
    private string pathId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PathId {
      get { return pathId_; }
      set {
        pathId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BattleMoveMinSpace" field.</summary>
    public const int BattleMoveMinSpaceFieldNumber = 60;
    private uint battleMoveMinSpace_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BattleMoveMinSpace {
      get { return battleMoveMinSpace_; }
      set {
        battleMoveMinSpace_ = value;
      }
    }

    /// <summary>Field number for the "BattleMoveMaxSpace" field.</summary>
    public const int BattleMoveMaxSpaceFieldNumber = 61;
    private uint battleMoveMaxSpace_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BattleMoveMaxSpace {
      get { return battleMoveMaxSpace_; }
      set {
        battleMoveMaxSpace_ = value;
      }
    }

    /// <summary>Field number for the "BattleMoveAngle" field.</summary>
    public const int BattleMoveAngleFieldNumber = 62;
    private uint battleMoveAngle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BattleMoveAngle {
      get { return battleMoveAngle_; }
      set {
        battleMoveAngle_ = value;
      }
    }

    /// <summary>Field number for the "Radius" field.</summary>
    public const int RadiusFieldNumber = 63;
    private uint radius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Radius {
      get { return radius_; }
      set {
        radius_ = value;
      }
    }

    /// <summary>Field number for the "EffectRadius" field.</summary>
    public const int EffectRadiusFieldNumber = 64;
    private uint effectRadius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EffectRadius {
      get { return effectRadius_; }
      set {
        effectRadius_ = value;
      }
    }

    /// <summary>Field number for the "BattleMoveOdds" field.</summary>
    public const int BattleMoveOddsFieldNumber = 65;
    private uint battleMoveOdds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BattleMoveOdds {
      get { return battleMoveOdds_; }
      set {
        battleMoveOdds_ = value;
      }
    }

    /// <summary>Field number for the "BattleFaintOdds" field.</summary>
    public const int BattleFaintOddsFieldNumber = 66;
    private uint battleFaintOdds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BattleFaintOdds {
      get { return battleFaintOdds_; }
      set {
        battleFaintOdds_ = value;
      }
    }

    /// <summary>Field number for the "GazeMoveOdds" field.</summary>
    public const int GazeMoveOddsFieldNumber = 67;
    private uint gazeMoveOdds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GazeMoveOdds {
      get { return gazeMoveOdds_; }
      set {
        gazeMoveOdds_ = value;
      }
    }

    /// <summary>Field number for the "AttackOdds" field.</summary>
    public const int AttackOddsFieldNumber = 68;
    private uint attackOdds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AttackOdds {
      get { return attackOdds_; }
      set {
        attackOdds_ = value;
      }
    }

    /// <summary>Field number for the "MonsterNotice" field.</summary>
    public const int MonsterNoticeFieldNumber = 69;
    private string monsterNotice_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MonsterNotice {
      get { return monsterNotice_; }
      set {
        monsterNotice_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AttackType" field.</summary>
    public const int AttackTypeFieldNumber = 70;
    private uint attackType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AttackType {
      get { return attackType_; }
      set {
        attackType_ = value;
      }
    }

    /// <summary>Field number for the "AttackStyle" field.</summary>
    public const int AttackStyleFieldNumber = 71;
    private uint attackStyle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AttackStyle {
      get { return attackStyle_; }
      set {
        attackStyle_ = value;
      }
    }

    /// <summary>Field number for the "MonsterTypeSort" field.</summary>
    public const int MonsterTypeSortFieldNumber = 72;
    private uint monsterTypeSort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MonsterTypeSort {
      get { return monsterTypeSort_; }
      set {
        monsterTypeSort_ = value;
      }
    }

    /// <summary>Field number for the "MovePace" field.</summary>
    public const int MovePaceFieldNumber = 73;
    private uint movePace_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MovePace {
      get { return movePace_; }
      set {
        movePace_ = value;
      }
    }

    /// <summary>Field number for the "MoveWaitTime" field.</summary>
    public const int MoveWaitTimeFieldNumber = 74;
    private uint moveWaitTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MoveWaitTime {
      get { return moveWaitTime_; }
      set {
        moveWaitTime_ = value;
      }
    }

    /// <summary>Field number for the "TuoZhan" field.</summary>
    public const int TuoZhanFieldNumber = 75;
    private uint tuoZhan_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TuoZhan {
      get { return tuoZhan_; }
      set {
        tuoZhan_ = value;
      }
    }

    /// <summary>Field number for the "Camp" field.</summary>
    public const int CampFieldNumber = 76;
    private uint camp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Camp {
      get { return camp_; }
      set {
        camp_ = value;
      }
    }

    /// <summary>Field number for the "SeekStyle" field.</summary>
    public const int SeekStyleFieldNumber = 77;
    private uint seekStyle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SeekStyle {
      get { return seekStyle_; }
      set {
        seekStyle_ = value;
      }
    }

    /// <summary>Field number for the "UIAppendLife" field.</summary>
    public const int UIAppendLifeFieldNumber = 78;
    private uint uIAppendLife_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UIAppendLife {
      get { return uIAppendLife_; }
      set {
        uIAppendLife_ = value;
      }
    }

    /// <summary>Field number for the "MaxSuperArmor" field.</summary>
    public const int MaxSuperArmorFieldNumber = 79;
    private uint maxSuperArmor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxSuperArmor {
      get { return maxSuperArmor_; }
      set {
        maxSuperArmor_ = value;
      }
    }

    /// <summary>Field number for the "MaxMagic" field.</summary>
    public const int MaxMagicFieldNumber = 80;
    private uint maxMagic_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxMagic {
      get { return maxMagic_; }
      set {
        maxMagic_ = value;
      }
    }

    /// <summary>Field number for the "MinAttackPercent" field.</summary>
    public const int MinAttackPercentFieldNumber = 81;
    private uint minAttackPercent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MinAttackPercent {
      get { return minAttackPercent_; }
      set {
        minAttackPercent_ = value;
      }
    }

    /// <summary>Field number for the "MaxAttackPercent" field.</summary>
    public const int MaxAttackPercentFieldNumber = 82;
    private uint maxAttackPercent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxAttackPercent {
      get { return maxAttackPercent_; }
      set {
        maxAttackPercent_ = value;
      }
    }

    /// <summary>Field number for the "DefensePercent" field.</summary>
    public const int DefensePercentFieldNumber = 83;
    private uint defensePercent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DefensePercent {
      get { return defensePercent_; }
      set {
        defensePercent_ = value;
      }
    }

    /// <summary>Field number for the "MDefensePercent" field.</summary>
    public const int MDefensePercentFieldNumber = 84;
    private uint mDefensePercent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MDefensePercent {
      get { return mDefensePercent_; }
      set {
        mDefensePercent_ = value;
      }
    }

    /// <summary>Field number for the "Dodge" field.</summary>
    public const int DodgeFieldNumber = 85;
    private uint dodge_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Dodge {
      get { return dodge_; }
      set {
        dodge_ = value;
      }
    }

    /// <summary>Field number for the "HitV" field.</summary>
    public const int HitVFieldNumber = 86;
    private uint hitV_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HitV {
      get { return hitV_; }
      set {
        hitV_ = value;
      }
    }

    /// <summary>Field number for the "MaxLife" field.</summary>
    public const int MaxLifeFieldNumber = 87;
    private uint maxLife_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxLife {
      get { return maxLife_; }
      set {
        maxLife_ = value;
      }
    }

    /// <summary>Field number for the "RecoverLifeV" field.</summary>
    public const int RecoverLifeVFieldNumber = 88;
    private uint recoverLifeV_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RecoverLifeV {
      get { return recoverLifeV_; }
      set {
        recoverLifeV_ = value;
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 89;
    private uint level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "Grade" field.</summary>
    public const int GradeFieldNumber = 90;
    private uint grade_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Grade {
      get { return grade_; }
      set {
        grade_ = value;
      }
    }

    /// <summary>Field number for the "Combat" field.</summary>
    public const int CombatFieldNumber = 91;
    private uint combat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Combat {
      get { return combat_; }
      set {
        combat_ = value;
      }
    }

    /// <summary>Field number for the "CountDownInOneViolentTime" field.</summary>
    public const int CountDownInOneViolentTimeFieldNumber = 92;
    private uint countDownInOneViolentTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CountDownInOneViolentTime {
      get { return countDownInOneViolentTime_; }
      set {
        countDownInOneViolentTime_ = value;
      }
    }

    /// <summary>Field number for the "CountDownInTwoViolentTime" field.</summary>
    public const int CountDownInTwoViolentTimeFieldNumber = 93;
    private uint countDownInTwoViolentTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CountDownInTwoViolentTime {
      get { return countDownInTwoViolentTime_; }
      set {
        countDownInTwoViolentTime_ = value;
      }
    }

    /// <summary>Field number for the "ViolentAIID" field.</summary>
    public const int ViolentAIIDFieldNumber = 94;
    private uint violentAIID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ViolentAIID {
      get { return violentAIID_; }
      set {
        violentAIID_ = value;
      }
    }

    /// <summary>Field number for the "Experience" field.</summary>
    public const int ExperienceFieldNumber = 95;
    private uint experience_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Experience {
      get { return experience_; }
      set {
        experience_ = value;
      }
    }

    /// <summary>Field number for the "ConditionFallID" field.</summary>
    public const int ConditionFallIDFieldNumber = 96;
    private uint conditionFallID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ConditionFallID {
      get { return conditionFallID_; }
      set {
        conditionFallID_ = value;
      }
    }

    /// <summary>Field number for the "FallID" field.</summary>
    public const int FallIDFieldNumber = 97;
    private uint fallID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FallID {
      get { return fallID_; }
      set {
        fallID_ = value;
      }
    }

    /// <summary>Field number for the "FallLevel" field.</summary>
    public const int FallLevelFieldNumber = 98;
    private uint fallLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FallLevel {
      get { return fallLevel_; }
      set {
        fallLevel_ = value;
      }
    }

    /// <summary>Field number for the "FallLevel2" field.</summary>
    public const int FallLevel2FieldNumber = 99;
    private uint fallLevel2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FallLevel2 {
      get { return fallLevel2_; }
      set {
        fallLevel2_ = value;
      }
    }

    /// <summary>Field number for the "AddSP" field.</summary>
    public const int AddSPFieldNumber = 100;
    private uint addSP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AddSP {
      get { return addSP_; }
      set {
        addSP_ = value;
      }
    }

    /// <summary>Field number for the "DefaultAction" field.</summary>
    public const int DefaultActionFieldNumber = 101;
    private string defaultAction_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DefaultAction {
      get { return defaultAction_; }
      set {
        defaultAction_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DoubleAttack" field.</summary>
    public const int DoubleAttackFieldNumber = 102;
    private uint doubleAttack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DoubleAttack {
      get { return doubleAttack_; }
      set {
        doubleAttack_ = value;
      }
    }

    /// <summary>Field number for the "FatalAttack" field.</summary>
    public const int FatalAttackFieldNumber = 103;
    private uint fatalAttack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FatalAttack {
      get { return fatalAttack_; }
      set {
        fatalAttack_ = value;
      }
    }

    /// <summary>Field number for the "RecoverMagicV" field.</summary>
    public const int RecoverMagicVFieldNumber = 104;
    private uint recoverMagicV_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RecoverMagicV {
      get { return recoverMagicV_; }
      set {
        recoverMagicV_ = value;
      }
    }

    /// <summary>Field number for the "DamageThornPercent" field.</summary>
    public const int DamageThornPercentFieldNumber = 105;
    private uint damageThornPercent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DamageThornPercent {
      get { return damageThornPercent_; }
      set {
        damageThornPercent_ = value;
      }
    }

    /// <summary>Field number for the "DamageThorn" field.</summary>
    public const int DamageThornFieldNumber = 106;
    private uint damageThorn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DamageThorn {
      get { return damageThorn_; }
      set {
        damageThorn_ = value;
      }
    }

    /// <summary>Field number for the "SubAttackInjurePercent" field.</summary>
    public const int SubAttackInjurePercentFieldNumber = 107;
    private uint subAttackInjurePercent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SubAttackInjurePercent {
      get { return subAttackInjurePercent_; }
      set {
        subAttackInjurePercent_ = value;
      }
    }

    /// <summary>Field number for the "SubAttackInjure" field.</summary>
    public const int SubAttackInjureFieldNumber = 108;
    private uint subAttackInjure_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SubAttackInjure {
      get { return subAttackInjure_; }
      set {
        subAttackInjure_ = value;
      }
    }

    /// <summary>Field number for the "IgnoreDefensePercent" field.</summary>
    public const int IgnoreDefensePercentFieldNumber = 109;
    private uint ignoreDefensePercent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IgnoreDefensePercent {
      get { return ignoreDefensePercent_; }
      set {
        ignoreDefensePercent_ = value;
      }
    }

    /// <summary>Field number for the "IgnoreDefenseRate" field.</summary>
    public const int IgnoreDefenseRateFieldNumber = 110;
    private uint ignoreDefenseRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IgnoreDefenseRate {
      get { return ignoreDefenseRate_; }
      set {
        ignoreDefenseRate_ = value;
      }
    }

    /// <summary>Field number for the "Lucky" field.</summary>
    public const int LuckyFieldNumber = 111;
    private uint lucky_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Lucky {
      get { return lucky_; }
      set {
        lucky_ = value;
      }
    }

    /// <summary>Field number for the "LuckyTBox" field.</summary>
    public const int LuckyTBoxFieldNumber = 112;
    private uint luckyTBox_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LuckyTBox {
      get { return luckyTBox_; }
      set {
        luckyTBox_ = value;
      }
    }

    /// <summary>Field number for the "BirthStatue" field.</summary>
    public const int BirthStatueFieldNumber = 113;
    private uint birthStatue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BirthStatue {
      get { return birthStatue_; }
      set {
        birthStatue_ = value;
      }
    }

    /// <summary>Field number for the "Belong" field.</summary>
    public const int BelongFieldNumber = 114;
    private uint belong_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Belong {
      get { return belong_; }
      set {
        belong_ = value;
      }
    }

    /// <summary>Field number for the "PersonalJiFen" field.</summary>
    public const int PersonalJiFenFieldNumber = 115;
    private uint personalJiFen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PersonalJiFen {
      get { return personalJiFen_; }
      set {
        personalJiFen_ = value;
      }
    }

    /// <summary>Field number for the "CampJiFen" field.</summary>
    public const int CampJiFenFieldNumber = 116;
    private uint campJiFen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CampJiFen {
      get { return campJiFen_; }
      set {
        campJiFen_ = value;
      }
    }

    /// <summary>Field number for the "EMoJiFen" field.</summary>
    public const int EMoJiFenFieldNumber = 117;
    private uint eMoJiFen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EMoJiFen {
      get { return eMoJiFen_; }
      set {
        eMoJiFen_ = value;
      }
    }

    /// <summary>Field number for the "XueSeJiFen" field.</summary>
    public const int XueSeJiFenFieldNumber = 118;
    private uint xueSeJiFen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint XueSeJiFen {
      get { return xueSeJiFen_; }
      set {
        xueSeJiFen_ = value;
      }
    }

    /// <summary>Field number for the "JinBiJiFen" field.</summary>
    public const int JinBiJiFenFieldNumber = 119;
    private uint jinBiJiFen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint JinBiJiFen {
      get { return jinBiJiFen_; }
      set {
        jinBiJiFen_ = value;
      }
    }

    /// <summary>Field number for the "LangHunJiFen" field.</summary>
    public const int LangHunJiFenFieldNumber = 120;
    private uint langHunJiFen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LangHunJiFen {
      get { return langHunJiFen_; }
      set {
        langHunJiFen_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Monsters);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Monsters other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (SName != other.SName) return false;
      if (GameNote1 != other.GameNote1) return false;
      if (GameNote != other.GameNote) return false;
      if (GameNote2 != other.GameNote2) return false;
      if (Code != other.Code) return false;
      if (PicCode != other.PicCode) return false;
      if (RadarMonster != other.RadarMonster) return false;
      if (Display != other.Display) return false;
      if (ResName != other.ResName) return false;
      if (ResIDName != other.ResIDName) return false;
      if (Scale != other.Scale) return false;
      if (Function != other.Function) return false;
      if (MapCode != other.MapCode) return false;
      if (ShaderID != other.ShaderID) return false;
      if (GhostShaderID != other.GhostShaderID) return false;
      if (GuaJieDian != other.GuaJieDian) return false;
      if (GuaJieTeXiao != other.GuaJieTeXiao) return false;
      if (BornAction != other.BornAction) return false;
      if (ComeAnimation != other.ComeAnimation) return false;
      if (DieAnimation != other.DieAnimation) return false;
      if (DieEffect != other.DieEffect) return false;
      if (DeadDissolve != other.DeadDissolve) return false;
      if (CameraParam != other.CameraParam) return false;
      if (MainBone != other.MainBone) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LifeBarPosY, other.LifeBarPosY)) return false;
      if (RemoveDecWhenDead != other.RemoveDecWhenDead) return false;
      if (Talk != other.Talk) return false;
      if (Talk2 != other.Talk2) return false;
      if (NameColor != other.NameColor) return false;
      if (ZhuanSheng != other.ZhuanSheng) return false;
      if (Sex != other.Sex) return false;
      if (CamParam != other.CamParam) return false;
      if (PlaySound != other.PlaySound) return false;
      if (AttackSound != other.AttackSound) return false;
      if (HitSound != other.HitSound) return false;
      if (DieSound != other.DieSound) return false;
      if (YouShou != other.YouShou) return false;
      if (ZuoShou != other.ZuoShou) return false;
      if (MonsterType != other.MonsterType) return false;
      if (XueTiaoType != other.XueTiaoType) return false;
      if (SkillIDs != other.SkillIDs) return false;
      if (RandomSkillIDs != other.RandomSkillIDs) return false;
      if (AIID != other.AIID) return false;
      if (DefanceStyle != other.DefanceStyle) return false;
      if (OffPlayRecoverTime != other.OffPlayRecoverTime) return false;
      if (BirthStunTime != other.BirthStunTime) return false;
      if (ResetBreakArmor != other.ResetBreakArmor) return false;
      if (Weight != other.Weight) return false;
      if (MonsterTypeEx != other.MonsterTypeEx) return false;
      if (MoveBlock != other.MoveBlock) return false;
      if (TurnTime != other.TurnTime) return false;
      if (AttackRange != other.AttackRange) return false;
      if (SeedRange != other.SeedRange) return false;
      if (TraceRange != other.TraceRange) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MonsterSpeed, other.MonsterSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AttackSpeed, other.AttackSpeed)) return false;
      if (Collide != other.Collide) return false;
      if (PathId != other.PathId) return false;
      if (BattleMoveMinSpace != other.BattleMoveMinSpace) return false;
      if (BattleMoveMaxSpace != other.BattleMoveMaxSpace) return false;
      if (BattleMoveAngle != other.BattleMoveAngle) return false;
      if (Radius != other.Radius) return false;
      if (EffectRadius != other.EffectRadius) return false;
      if (BattleMoveOdds != other.BattleMoveOdds) return false;
      if (BattleFaintOdds != other.BattleFaintOdds) return false;
      if (GazeMoveOdds != other.GazeMoveOdds) return false;
      if (AttackOdds != other.AttackOdds) return false;
      if (MonsterNotice != other.MonsterNotice) return false;
      if (AttackType != other.AttackType) return false;
      if (AttackStyle != other.AttackStyle) return false;
      if (MonsterTypeSort != other.MonsterTypeSort) return false;
      if (MovePace != other.MovePace) return false;
      if (MoveWaitTime != other.MoveWaitTime) return false;
      if (TuoZhan != other.TuoZhan) return false;
      if (Camp != other.Camp) return false;
      if (SeekStyle != other.SeekStyle) return false;
      if (UIAppendLife != other.UIAppendLife) return false;
      if (MaxSuperArmor != other.MaxSuperArmor) return false;
      if (MaxMagic != other.MaxMagic) return false;
      if (MinAttackPercent != other.MinAttackPercent) return false;
      if (MaxAttackPercent != other.MaxAttackPercent) return false;
      if (DefensePercent != other.DefensePercent) return false;
      if (MDefensePercent != other.MDefensePercent) return false;
      if (Dodge != other.Dodge) return false;
      if (HitV != other.HitV) return false;
      if (MaxLife != other.MaxLife) return false;
      if (RecoverLifeV != other.RecoverLifeV) return false;
      if (Level != other.Level) return false;
      if (Grade != other.Grade) return false;
      if (Combat != other.Combat) return false;
      if (CountDownInOneViolentTime != other.CountDownInOneViolentTime) return false;
      if (CountDownInTwoViolentTime != other.CountDownInTwoViolentTime) return false;
      if (ViolentAIID != other.ViolentAIID) return false;
      if (Experience != other.Experience) return false;
      if (ConditionFallID != other.ConditionFallID) return false;
      if (FallID != other.FallID) return false;
      if (FallLevel != other.FallLevel) return false;
      if (FallLevel2 != other.FallLevel2) return false;
      if (AddSP != other.AddSP) return false;
      if (DefaultAction != other.DefaultAction) return false;
      if (DoubleAttack != other.DoubleAttack) return false;
      if (FatalAttack != other.FatalAttack) return false;
      if (RecoverMagicV != other.RecoverMagicV) return false;
      if (DamageThornPercent != other.DamageThornPercent) return false;
      if (DamageThorn != other.DamageThorn) return false;
      if (SubAttackInjurePercent != other.SubAttackInjurePercent) return false;
      if (SubAttackInjure != other.SubAttackInjure) return false;
      if (IgnoreDefensePercent != other.IgnoreDefensePercent) return false;
      if (IgnoreDefenseRate != other.IgnoreDefenseRate) return false;
      if (Lucky != other.Lucky) return false;
      if (LuckyTBox != other.LuckyTBox) return false;
      if (BirthStatue != other.BirthStatue) return false;
      if (Belong != other.Belong) return false;
      if (PersonalJiFen != other.PersonalJiFen) return false;
      if (CampJiFen != other.CampJiFen) return false;
      if (EMoJiFen != other.EMoJiFen) return false;
      if (XueSeJiFen != other.XueSeJiFen) return false;
      if (JinBiJiFen != other.JinBiJiFen) return false;
      if (LangHunJiFen != other.LangHunJiFen) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (SName.Length != 0) hash ^= SName.GetHashCode();
      if (GameNote1.Length != 0) hash ^= GameNote1.GetHashCode();
      if (GameNote.Length != 0) hash ^= GameNote.GetHashCode();
      if (GameNote2.Length != 0) hash ^= GameNote2.GetHashCode();
      if (Code != 0) hash ^= Code.GetHashCode();
      if (PicCode.Length != 0) hash ^= PicCode.GetHashCode();
      if (RadarMonster.Length != 0) hash ^= RadarMonster.GetHashCode();
      if (Display != 0) hash ^= Display.GetHashCode();
      if (ResName.Length != 0) hash ^= ResName.GetHashCode();
      if (ResIDName != 0) hash ^= ResIDName.GetHashCode();
      if (Scale != 0) hash ^= Scale.GetHashCode();
      if (Function.Length != 0) hash ^= Function.GetHashCode();
      if (MapCode != 0) hash ^= MapCode.GetHashCode();
      if (ShaderID != 0) hash ^= ShaderID.GetHashCode();
      if (GhostShaderID != 0) hash ^= GhostShaderID.GetHashCode();
      if (GuaJieDian.Length != 0) hash ^= GuaJieDian.GetHashCode();
      if (GuaJieTeXiao != 0) hash ^= GuaJieTeXiao.GetHashCode();
      if (BornAction != 0) hash ^= BornAction.GetHashCode();
      if (ComeAnimation != 0) hash ^= ComeAnimation.GetHashCode();
      if (DieAnimation != 0) hash ^= DieAnimation.GetHashCode();
      if (DieEffect != 0) hash ^= DieEffect.GetHashCode();
      if (DeadDissolve.Length != 0) hash ^= DeadDissolve.GetHashCode();
      if (CameraParam.Length != 0) hash ^= CameraParam.GetHashCode();
      if (MainBone.Length != 0) hash ^= MainBone.GetHashCode();
      if (LifeBarPosY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LifeBarPosY);
      if (RemoveDecWhenDead != 0) hash ^= RemoveDecWhenDead.GetHashCode();
      if (Talk.Length != 0) hash ^= Talk.GetHashCode();
      if (Talk2.Length != 0) hash ^= Talk2.GetHashCode();
      if (NameColor != 0) hash ^= NameColor.GetHashCode();
      if (ZhuanSheng != 0) hash ^= ZhuanSheng.GetHashCode();
      if (Sex != 0) hash ^= Sex.GetHashCode();
      if (CamParam != 0) hash ^= CamParam.GetHashCode();
      if (PlaySound.Length != 0) hash ^= PlaySound.GetHashCode();
      if (AttackSound.Length != 0) hash ^= AttackSound.GetHashCode();
      if (HitSound.Length != 0) hash ^= HitSound.GetHashCode();
      if (DieSound.Length != 0) hash ^= DieSound.GetHashCode();
      if (YouShou != 0) hash ^= YouShou.GetHashCode();
      if (ZuoShou.Length != 0) hash ^= ZuoShou.GetHashCode();
      if (MonsterType != 0) hash ^= MonsterType.GetHashCode();
      if (XueTiaoType.Length != 0) hash ^= XueTiaoType.GetHashCode();
      if (SkillIDs.Length != 0) hash ^= SkillIDs.GetHashCode();
      if (RandomSkillIDs.Length != 0) hash ^= RandomSkillIDs.GetHashCode();
      if (AIID != 0) hash ^= AIID.GetHashCode();
      if (DefanceStyle.Length != 0) hash ^= DefanceStyle.GetHashCode();
      if (OffPlayRecoverTime != 0) hash ^= OffPlayRecoverTime.GetHashCode();
      if (BirthStunTime != 0) hash ^= BirthStunTime.GetHashCode();
      if (ResetBreakArmor.Length != 0) hash ^= ResetBreakArmor.GetHashCode();
      if (Weight != 0) hash ^= Weight.GetHashCode();
      if (MonsterTypeEx != 0) hash ^= MonsterTypeEx.GetHashCode();
      if (MoveBlock != 0) hash ^= MoveBlock.GetHashCode();
      if (TurnTime.Length != 0) hash ^= TurnTime.GetHashCode();
      if (AttackRange != 0) hash ^= AttackRange.GetHashCode();
      if (SeedRange != 0) hash ^= SeedRange.GetHashCode();
      if (TraceRange != 0) hash ^= TraceRange.GetHashCode();
      if (MonsterSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MonsterSpeed);
      if (AttackSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AttackSpeed);
      if (Collide.Length != 0) hash ^= Collide.GetHashCode();
      if (PathId.Length != 0) hash ^= PathId.GetHashCode();
      if (BattleMoveMinSpace != 0) hash ^= BattleMoveMinSpace.GetHashCode();
      if (BattleMoveMaxSpace != 0) hash ^= BattleMoveMaxSpace.GetHashCode();
      if (BattleMoveAngle != 0) hash ^= BattleMoveAngle.GetHashCode();
      if (Radius != 0) hash ^= Radius.GetHashCode();
      if (EffectRadius != 0) hash ^= EffectRadius.GetHashCode();
      if (BattleMoveOdds != 0) hash ^= BattleMoveOdds.GetHashCode();
      if (BattleFaintOdds != 0) hash ^= BattleFaintOdds.GetHashCode();
      if (GazeMoveOdds != 0) hash ^= GazeMoveOdds.GetHashCode();
      if (AttackOdds != 0) hash ^= AttackOdds.GetHashCode();
      if (MonsterNotice.Length != 0) hash ^= MonsterNotice.GetHashCode();
      if (AttackType != 0) hash ^= AttackType.GetHashCode();
      if (AttackStyle != 0) hash ^= AttackStyle.GetHashCode();
      if (MonsterTypeSort != 0) hash ^= MonsterTypeSort.GetHashCode();
      if (MovePace != 0) hash ^= MovePace.GetHashCode();
      if (MoveWaitTime != 0) hash ^= MoveWaitTime.GetHashCode();
      if (TuoZhan != 0) hash ^= TuoZhan.GetHashCode();
      if (Camp != 0) hash ^= Camp.GetHashCode();
      if (SeekStyle != 0) hash ^= SeekStyle.GetHashCode();
      if (UIAppendLife != 0) hash ^= UIAppendLife.GetHashCode();
      if (MaxSuperArmor != 0) hash ^= MaxSuperArmor.GetHashCode();
      if (MaxMagic != 0) hash ^= MaxMagic.GetHashCode();
      if (MinAttackPercent != 0) hash ^= MinAttackPercent.GetHashCode();
      if (MaxAttackPercent != 0) hash ^= MaxAttackPercent.GetHashCode();
      if (DefensePercent != 0) hash ^= DefensePercent.GetHashCode();
      if (MDefensePercent != 0) hash ^= MDefensePercent.GetHashCode();
      if (Dodge != 0) hash ^= Dodge.GetHashCode();
      if (HitV != 0) hash ^= HitV.GetHashCode();
      if (MaxLife != 0) hash ^= MaxLife.GetHashCode();
      if (RecoverLifeV != 0) hash ^= RecoverLifeV.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Grade != 0) hash ^= Grade.GetHashCode();
      if (Combat != 0) hash ^= Combat.GetHashCode();
      if (CountDownInOneViolentTime != 0) hash ^= CountDownInOneViolentTime.GetHashCode();
      if (CountDownInTwoViolentTime != 0) hash ^= CountDownInTwoViolentTime.GetHashCode();
      if (ViolentAIID != 0) hash ^= ViolentAIID.GetHashCode();
      if (Experience != 0) hash ^= Experience.GetHashCode();
      if (ConditionFallID != 0) hash ^= ConditionFallID.GetHashCode();
      if (FallID != 0) hash ^= FallID.GetHashCode();
      if (FallLevel != 0) hash ^= FallLevel.GetHashCode();
      if (FallLevel2 != 0) hash ^= FallLevel2.GetHashCode();
      if (AddSP != 0) hash ^= AddSP.GetHashCode();
      if (DefaultAction.Length != 0) hash ^= DefaultAction.GetHashCode();
      if (DoubleAttack != 0) hash ^= DoubleAttack.GetHashCode();
      if (FatalAttack != 0) hash ^= FatalAttack.GetHashCode();
      if (RecoverMagicV != 0) hash ^= RecoverMagicV.GetHashCode();
      if (DamageThornPercent != 0) hash ^= DamageThornPercent.GetHashCode();
      if (DamageThorn != 0) hash ^= DamageThorn.GetHashCode();
      if (SubAttackInjurePercent != 0) hash ^= SubAttackInjurePercent.GetHashCode();
      if (SubAttackInjure != 0) hash ^= SubAttackInjure.GetHashCode();
      if (IgnoreDefensePercent != 0) hash ^= IgnoreDefensePercent.GetHashCode();
      if (IgnoreDefenseRate != 0) hash ^= IgnoreDefenseRate.GetHashCode();
      if (Lucky != 0) hash ^= Lucky.GetHashCode();
      if (LuckyTBox != 0) hash ^= LuckyTBox.GetHashCode();
      if (BirthStatue != 0) hash ^= BirthStatue.GetHashCode();
      if (Belong != 0) hash ^= Belong.GetHashCode();
      if (PersonalJiFen != 0) hash ^= PersonalJiFen.GetHashCode();
      if (CampJiFen != 0) hash ^= CampJiFen.GetHashCode();
      if (EMoJiFen != 0) hash ^= EMoJiFen.GetHashCode();
      if (XueSeJiFen != 0) hash ^= XueSeJiFen.GetHashCode();
      if (JinBiJiFen != 0) hash ^= JinBiJiFen.GetHashCode();
      if (LangHunJiFen != 0) hash ^= LangHunJiFen.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ID);
      }
      if (SName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SName);
      }
      if (GameNote1.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(GameNote1);
      }
      if (GameNote.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(GameNote);
      }
      if (GameNote2.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(GameNote2);
      }
      if (Code != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Code);
      }
      if (PicCode.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(PicCode);
      }
      if (RadarMonster.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(RadarMonster);
      }
      if (Display != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Display);
      }
      if (ResName.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(ResName);
      }
      if (ResIDName != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(ResIDName);
      }
      if (Scale != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(Scale);
      }
      if (Function.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Function);
      }
      if (MapCode != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(MapCode);
      }
      if (ShaderID != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(ShaderID);
      }
      if (GhostShaderID != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(GhostShaderID);
      }
      if (GuaJieDian.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(GuaJieDian);
      }
      if (GuaJieTeXiao != 0) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(GuaJieTeXiao);
      }
      if (BornAction != 0) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(BornAction);
      }
      if (ComeAnimation != 0) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(ComeAnimation);
      }
      if (DieAnimation != 0) {
        output.WriteRawTag(168, 1);
        output.WriteUInt32(DieAnimation);
      }
      if (DieEffect != 0) {
        output.WriteRawTag(176, 1);
        output.WriteUInt32(DieEffect);
      }
      if (DeadDissolve.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(DeadDissolve);
      }
      if (CameraParam.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(CameraParam);
      }
      if (MainBone.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(MainBone);
      }
      if (LifeBarPosY != 0F) {
        output.WriteRawTag(213, 1);
        output.WriteFloat(LifeBarPosY);
      }
      if (RemoveDecWhenDead != 0) {
        output.WriteRawTag(216, 1);
        output.WriteUInt32(RemoveDecWhenDead);
      }
      if (Talk.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteString(Talk);
      }
      if (Talk2.Length != 0) {
        output.WriteRawTag(234, 1);
        output.WriteString(Talk2);
      }
      if (NameColor != 0) {
        output.WriteRawTag(240, 1);
        output.WriteUInt32(NameColor);
      }
      if (ZhuanSheng != 0) {
        output.WriteRawTag(248, 1);
        output.WriteUInt32(ZhuanSheng);
      }
      if (Sex != 0) {
        output.WriteRawTag(128, 2);
        output.WriteUInt32(Sex);
      }
      if (CamParam != 0) {
        output.WriteRawTag(136, 2);
        output.WriteUInt32(CamParam);
      }
      if (PlaySound.Length != 0) {
        output.WriteRawTag(146, 2);
        output.WriteString(PlaySound);
      }
      if (AttackSound.Length != 0) {
        output.WriteRawTag(154, 2);
        output.WriteString(AttackSound);
      }
      if (HitSound.Length != 0) {
        output.WriteRawTag(162, 2);
        output.WriteString(HitSound);
      }
      if (DieSound.Length != 0) {
        output.WriteRawTag(170, 2);
        output.WriteString(DieSound);
      }
      if (YouShou != 0) {
        output.WriteRawTag(176, 2);
        output.WriteUInt32(YouShou);
      }
      if (ZuoShou.Length != 0) {
        output.WriteRawTag(186, 2);
        output.WriteString(ZuoShou);
      }
      if (MonsterType != 0) {
        output.WriteRawTag(192, 2);
        output.WriteUInt32(MonsterType);
      }
      if (XueTiaoType.Length != 0) {
        output.WriteRawTag(202, 2);
        output.WriteString(XueTiaoType);
      }
      if (SkillIDs.Length != 0) {
        output.WriteRawTag(210, 2);
        output.WriteString(SkillIDs);
      }
      if (RandomSkillIDs.Length != 0) {
        output.WriteRawTag(218, 2);
        output.WriteString(RandomSkillIDs);
      }
      if (AIID != 0) {
        output.WriteRawTag(224, 2);
        output.WriteUInt32(AIID);
      }
      if (DefanceStyle.Length != 0) {
        output.WriteRawTag(234, 2);
        output.WriteString(DefanceStyle);
      }
      if (OffPlayRecoverTime != 0) {
        output.WriteRawTag(240, 2);
        output.WriteUInt32(OffPlayRecoverTime);
      }
      if (BirthStunTime != 0) {
        output.WriteRawTag(248, 2);
        output.WriteUInt32(BirthStunTime);
      }
      if (ResetBreakArmor.Length != 0) {
        output.WriteRawTag(130, 3);
        output.WriteString(ResetBreakArmor);
      }
      if (Weight != 0) {
        output.WriteRawTag(136, 3);
        output.WriteUInt32(Weight);
      }
      if (MonsterTypeEx != 0) {
        output.WriteRawTag(144, 3);
        output.WriteUInt32(MonsterTypeEx);
      }
      if (MoveBlock != 0) {
        output.WriteRawTag(152, 3);
        output.WriteUInt32(MoveBlock);
      }
      if (TurnTime.Length != 0) {
        output.WriteRawTag(162, 3);
        output.WriteString(TurnTime);
      }
      if (AttackRange != 0) {
        output.WriteRawTag(168, 3);
        output.WriteUInt32(AttackRange);
      }
      if (SeedRange != 0) {
        output.WriteRawTag(176, 3);
        output.WriteUInt32(SeedRange);
      }
      if (TraceRange != 0) {
        output.WriteRawTag(184, 3);
        output.WriteUInt32(TraceRange);
      }
      if (MonsterSpeed != 0F) {
        output.WriteRawTag(197, 3);
        output.WriteFloat(MonsterSpeed);
      }
      if (AttackSpeed != 0F) {
        output.WriteRawTag(205, 3);
        output.WriteFloat(AttackSpeed);
      }
      if (Collide.Length != 0) {
        output.WriteRawTag(210, 3);
        output.WriteString(Collide);
      }
      if (PathId.Length != 0) {
        output.WriteRawTag(218, 3);
        output.WriteString(PathId);
      }
      if (BattleMoveMinSpace != 0) {
        output.WriteRawTag(224, 3);
        output.WriteUInt32(BattleMoveMinSpace);
      }
      if (BattleMoveMaxSpace != 0) {
        output.WriteRawTag(232, 3);
        output.WriteUInt32(BattleMoveMaxSpace);
      }
      if (BattleMoveAngle != 0) {
        output.WriteRawTag(240, 3);
        output.WriteUInt32(BattleMoveAngle);
      }
      if (Radius != 0) {
        output.WriteRawTag(248, 3);
        output.WriteUInt32(Radius);
      }
      if (EffectRadius != 0) {
        output.WriteRawTag(128, 4);
        output.WriteUInt32(EffectRadius);
      }
      if (BattleMoveOdds != 0) {
        output.WriteRawTag(136, 4);
        output.WriteUInt32(BattleMoveOdds);
      }
      if (BattleFaintOdds != 0) {
        output.WriteRawTag(144, 4);
        output.WriteUInt32(BattleFaintOdds);
      }
      if (GazeMoveOdds != 0) {
        output.WriteRawTag(152, 4);
        output.WriteUInt32(GazeMoveOdds);
      }
      if (AttackOdds != 0) {
        output.WriteRawTag(160, 4);
        output.WriteUInt32(AttackOdds);
      }
      if (MonsterNotice.Length != 0) {
        output.WriteRawTag(170, 4);
        output.WriteString(MonsterNotice);
      }
      if (AttackType != 0) {
        output.WriteRawTag(176, 4);
        output.WriteUInt32(AttackType);
      }
      if (AttackStyle != 0) {
        output.WriteRawTag(184, 4);
        output.WriteUInt32(AttackStyle);
      }
      if (MonsterTypeSort != 0) {
        output.WriteRawTag(192, 4);
        output.WriteUInt32(MonsterTypeSort);
      }
      if (MovePace != 0) {
        output.WriteRawTag(200, 4);
        output.WriteUInt32(MovePace);
      }
      if (MoveWaitTime != 0) {
        output.WriteRawTag(208, 4);
        output.WriteUInt32(MoveWaitTime);
      }
      if (TuoZhan != 0) {
        output.WriteRawTag(216, 4);
        output.WriteUInt32(TuoZhan);
      }
      if (Camp != 0) {
        output.WriteRawTag(224, 4);
        output.WriteUInt32(Camp);
      }
      if (SeekStyle != 0) {
        output.WriteRawTag(232, 4);
        output.WriteUInt32(SeekStyle);
      }
      if (UIAppendLife != 0) {
        output.WriteRawTag(240, 4);
        output.WriteUInt32(UIAppendLife);
      }
      if (MaxSuperArmor != 0) {
        output.WriteRawTag(248, 4);
        output.WriteUInt32(MaxSuperArmor);
      }
      if (MaxMagic != 0) {
        output.WriteRawTag(128, 5);
        output.WriteUInt32(MaxMagic);
      }
      if (MinAttackPercent != 0) {
        output.WriteRawTag(136, 5);
        output.WriteUInt32(MinAttackPercent);
      }
      if (MaxAttackPercent != 0) {
        output.WriteRawTag(144, 5);
        output.WriteUInt32(MaxAttackPercent);
      }
      if (DefensePercent != 0) {
        output.WriteRawTag(152, 5);
        output.WriteUInt32(DefensePercent);
      }
      if (MDefensePercent != 0) {
        output.WriteRawTag(160, 5);
        output.WriteUInt32(MDefensePercent);
      }
      if (Dodge != 0) {
        output.WriteRawTag(168, 5);
        output.WriteUInt32(Dodge);
      }
      if (HitV != 0) {
        output.WriteRawTag(176, 5);
        output.WriteUInt32(HitV);
      }
      if (MaxLife != 0) {
        output.WriteRawTag(184, 5);
        output.WriteUInt32(MaxLife);
      }
      if (RecoverLifeV != 0) {
        output.WriteRawTag(192, 5);
        output.WriteUInt32(RecoverLifeV);
      }
      if (Level != 0) {
        output.WriteRawTag(200, 5);
        output.WriteUInt32(Level);
      }
      if (Grade != 0) {
        output.WriteRawTag(208, 5);
        output.WriteUInt32(Grade);
      }
      if (Combat != 0) {
        output.WriteRawTag(216, 5);
        output.WriteUInt32(Combat);
      }
      if (CountDownInOneViolentTime != 0) {
        output.WriteRawTag(224, 5);
        output.WriteUInt32(CountDownInOneViolentTime);
      }
      if (CountDownInTwoViolentTime != 0) {
        output.WriteRawTag(232, 5);
        output.WriteUInt32(CountDownInTwoViolentTime);
      }
      if (ViolentAIID != 0) {
        output.WriteRawTag(240, 5);
        output.WriteUInt32(ViolentAIID);
      }
      if (Experience != 0) {
        output.WriteRawTag(248, 5);
        output.WriteUInt32(Experience);
      }
      if (ConditionFallID != 0) {
        output.WriteRawTag(128, 6);
        output.WriteUInt32(ConditionFallID);
      }
      if (FallID != 0) {
        output.WriteRawTag(136, 6);
        output.WriteUInt32(FallID);
      }
      if (FallLevel != 0) {
        output.WriteRawTag(144, 6);
        output.WriteUInt32(FallLevel);
      }
      if (FallLevel2 != 0) {
        output.WriteRawTag(152, 6);
        output.WriteUInt32(FallLevel2);
      }
      if (AddSP != 0) {
        output.WriteRawTag(160, 6);
        output.WriteUInt32(AddSP);
      }
      if (DefaultAction.Length != 0) {
        output.WriteRawTag(170, 6);
        output.WriteString(DefaultAction);
      }
      if (DoubleAttack != 0) {
        output.WriteRawTag(176, 6);
        output.WriteUInt32(DoubleAttack);
      }
      if (FatalAttack != 0) {
        output.WriteRawTag(184, 6);
        output.WriteUInt32(FatalAttack);
      }
      if (RecoverMagicV != 0) {
        output.WriteRawTag(192, 6);
        output.WriteUInt32(RecoverMagicV);
      }
      if (DamageThornPercent != 0) {
        output.WriteRawTag(200, 6);
        output.WriteUInt32(DamageThornPercent);
      }
      if (DamageThorn != 0) {
        output.WriteRawTag(208, 6);
        output.WriteUInt32(DamageThorn);
      }
      if (SubAttackInjurePercent != 0) {
        output.WriteRawTag(216, 6);
        output.WriteUInt32(SubAttackInjurePercent);
      }
      if (SubAttackInjure != 0) {
        output.WriteRawTag(224, 6);
        output.WriteUInt32(SubAttackInjure);
      }
      if (IgnoreDefensePercent != 0) {
        output.WriteRawTag(232, 6);
        output.WriteUInt32(IgnoreDefensePercent);
      }
      if (IgnoreDefenseRate != 0) {
        output.WriteRawTag(240, 6);
        output.WriteUInt32(IgnoreDefenseRate);
      }
      if (Lucky != 0) {
        output.WriteRawTag(248, 6);
        output.WriteUInt32(Lucky);
      }
      if (LuckyTBox != 0) {
        output.WriteRawTag(128, 7);
        output.WriteUInt32(LuckyTBox);
      }
      if (BirthStatue != 0) {
        output.WriteRawTag(136, 7);
        output.WriteUInt32(BirthStatue);
      }
      if (Belong != 0) {
        output.WriteRawTag(144, 7);
        output.WriteUInt32(Belong);
      }
      if (PersonalJiFen != 0) {
        output.WriteRawTag(152, 7);
        output.WriteUInt32(PersonalJiFen);
      }
      if (CampJiFen != 0) {
        output.WriteRawTag(160, 7);
        output.WriteUInt32(CampJiFen);
      }
      if (EMoJiFen != 0) {
        output.WriteRawTag(168, 7);
        output.WriteUInt32(EMoJiFen);
      }
      if (XueSeJiFen != 0) {
        output.WriteRawTag(176, 7);
        output.WriteUInt32(XueSeJiFen);
      }
      if (JinBiJiFen != 0) {
        output.WriteRawTag(184, 7);
        output.WriteUInt32(JinBiJiFen);
      }
      if (LangHunJiFen != 0) {
        output.WriteRawTag(192, 7);
        output.WriteUInt32(LangHunJiFen);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ID);
      }
      if (SName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SName);
      }
      if (GameNote1.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(GameNote1);
      }
      if (GameNote.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(GameNote);
      }
      if (GameNote2.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(GameNote2);
      }
      if (Code != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Code);
      }
      if (PicCode.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(PicCode);
      }
      if (RadarMonster.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(RadarMonster);
      }
      if (Display != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Display);
      }
      if (ResName.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(ResName);
      }
      if (ResIDName != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(ResIDName);
      }
      if (Scale != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(Scale);
      }
      if (Function.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Function);
      }
      if (MapCode != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(MapCode);
      }
      if (ShaderID != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(ShaderID);
      }
      if (GhostShaderID != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(GhostShaderID);
      }
      if (GuaJieDian.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(GuaJieDian);
      }
      if (GuaJieTeXiao != 0) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(GuaJieTeXiao);
      }
      if (BornAction != 0) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(BornAction);
      }
      if (ComeAnimation != 0) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(ComeAnimation);
      }
      if (DieAnimation != 0) {
        output.WriteRawTag(168, 1);
        output.WriteUInt32(DieAnimation);
      }
      if (DieEffect != 0) {
        output.WriteRawTag(176, 1);
        output.WriteUInt32(DieEffect);
      }
      if (DeadDissolve.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(DeadDissolve);
      }
      if (CameraParam.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(CameraParam);
      }
      if (MainBone.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(MainBone);
      }
      if (LifeBarPosY != 0F) {
        output.WriteRawTag(213, 1);
        output.WriteFloat(LifeBarPosY);
      }
      if (RemoveDecWhenDead != 0) {
        output.WriteRawTag(216, 1);
        output.WriteUInt32(RemoveDecWhenDead);
      }
      if (Talk.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteString(Talk);
      }
      if (Talk2.Length != 0) {
        output.WriteRawTag(234, 1);
        output.WriteString(Talk2);
      }
      if (NameColor != 0) {
        output.WriteRawTag(240, 1);
        output.WriteUInt32(NameColor);
      }
      if (ZhuanSheng != 0) {
        output.WriteRawTag(248, 1);
        output.WriteUInt32(ZhuanSheng);
      }
      if (Sex != 0) {
        output.WriteRawTag(128, 2);
        output.WriteUInt32(Sex);
      }
      if (CamParam != 0) {
        output.WriteRawTag(136, 2);
        output.WriteUInt32(CamParam);
      }
      if (PlaySound.Length != 0) {
        output.WriteRawTag(146, 2);
        output.WriteString(PlaySound);
      }
      if (AttackSound.Length != 0) {
        output.WriteRawTag(154, 2);
        output.WriteString(AttackSound);
      }
      if (HitSound.Length != 0) {
        output.WriteRawTag(162, 2);
        output.WriteString(HitSound);
      }
      if (DieSound.Length != 0) {
        output.WriteRawTag(170, 2);
        output.WriteString(DieSound);
      }
      if (YouShou != 0) {
        output.WriteRawTag(176, 2);
        output.WriteUInt32(YouShou);
      }
      if (ZuoShou.Length != 0) {
        output.WriteRawTag(186, 2);
        output.WriteString(ZuoShou);
      }
      if (MonsterType != 0) {
        output.WriteRawTag(192, 2);
        output.WriteUInt32(MonsterType);
      }
      if (XueTiaoType.Length != 0) {
        output.WriteRawTag(202, 2);
        output.WriteString(XueTiaoType);
      }
      if (SkillIDs.Length != 0) {
        output.WriteRawTag(210, 2);
        output.WriteString(SkillIDs);
      }
      if (RandomSkillIDs.Length != 0) {
        output.WriteRawTag(218, 2);
        output.WriteString(RandomSkillIDs);
      }
      if (AIID != 0) {
        output.WriteRawTag(224, 2);
        output.WriteUInt32(AIID);
      }
      if (DefanceStyle.Length != 0) {
        output.WriteRawTag(234, 2);
        output.WriteString(DefanceStyle);
      }
      if (OffPlayRecoverTime != 0) {
        output.WriteRawTag(240, 2);
        output.WriteUInt32(OffPlayRecoverTime);
      }
      if (BirthStunTime != 0) {
        output.WriteRawTag(248, 2);
        output.WriteUInt32(BirthStunTime);
      }
      if (ResetBreakArmor.Length != 0) {
        output.WriteRawTag(130, 3);
        output.WriteString(ResetBreakArmor);
      }
      if (Weight != 0) {
        output.WriteRawTag(136, 3);
        output.WriteUInt32(Weight);
      }
      if (MonsterTypeEx != 0) {
        output.WriteRawTag(144, 3);
        output.WriteUInt32(MonsterTypeEx);
      }
      if (MoveBlock != 0) {
        output.WriteRawTag(152, 3);
        output.WriteUInt32(MoveBlock);
      }
      if (TurnTime.Length != 0) {
        output.WriteRawTag(162, 3);
        output.WriteString(TurnTime);
      }
      if (AttackRange != 0) {
        output.WriteRawTag(168, 3);
        output.WriteUInt32(AttackRange);
      }
      if (SeedRange != 0) {
        output.WriteRawTag(176, 3);
        output.WriteUInt32(SeedRange);
      }
      if (TraceRange != 0) {
        output.WriteRawTag(184, 3);
        output.WriteUInt32(TraceRange);
      }
      if (MonsterSpeed != 0F) {
        output.WriteRawTag(197, 3);
        output.WriteFloat(MonsterSpeed);
      }
      if (AttackSpeed != 0F) {
        output.WriteRawTag(205, 3);
        output.WriteFloat(AttackSpeed);
      }
      if (Collide.Length != 0) {
        output.WriteRawTag(210, 3);
        output.WriteString(Collide);
      }
      if (PathId.Length != 0) {
        output.WriteRawTag(218, 3);
        output.WriteString(PathId);
      }
      if (BattleMoveMinSpace != 0) {
        output.WriteRawTag(224, 3);
        output.WriteUInt32(BattleMoveMinSpace);
      }
      if (BattleMoveMaxSpace != 0) {
        output.WriteRawTag(232, 3);
        output.WriteUInt32(BattleMoveMaxSpace);
      }
      if (BattleMoveAngle != 0) {
        output.WriteRawTag(240, 3);
        output.WriteUInt32(BattleMoveAngle);
      }
      if (Radius != 0) {
        output.WriteRawTag(248, 3);
        output.WriteUInt32(Radius);
      }
      if (EffectRadius != 0) {
        output.WriteRawTag(128, 4);
        output.WriteUInt32(EffectRadius);
      }
      if (BattleMoveOdds != 0) {
        output.WriteRawTag(136, 4);
        output.WriteUInt32(BattleMoveOdds);
      }
      if (BattleFaintOdds != 0) {
        output.WriteRawTag(144, 4);
        output.WriteUInt32(BattleFaintOdds);
      }
      if (GazeMoveOdds != 0) {
        output.WriteRawTag(152, 4);
        output.WriteUInt32(GazeMoveOdds);
      }
      if (AttackOdds != 0) {
        output.WriteRawTag(160, 4);
        output.WriteUInt32(AttackOdds);
      }
      if (MonsterNotice.Length != 0) {
        output.WriteRawTag(170, 4);
        output.WriteString(MonsterNotice);
      }
      if (AttackType != 0) {
        output.WriteRawTag(176, 4);
        output.WriteUInt32(AttackType);
      }
      if (AttackStyle != 0) {
        output.WriteRawTag(184, 4);
        output.WriteUInt32(AttackStyle);
      }
      if (MonsterTypeSort != 0) {
        output.WriteRawTag(192, 4);
        output.WriteUInt32(MonsterTypeSort);
      }
      if (MovePace != 0) {
        output.WriteRawTag(200, 4);
        output.WriteUInt32(MovePace);
      }
      if (MoveWaitTime != 0) {
        output.WriteRawTag(208, 4);
        output.WriteUInt32(MoveWaitTime);
      }
      if (TuoZhan != 0) {
        output.WriteRawTag(216, 4);
        output.WriteUInt32(TuoZhan);
      }
      if (Camp != 0) {
        output.WriteRawTag(224, 4);
        output.WriteUInt32(Camp);
      }
      if (SeekStyle != 0) {
        output.WriteRawTag(232, 4);
        output.WriteUInt32(SeekStyle);
      }
      if (UIAppendLife != 0) {
        output.WriteRawTag(240, 4);
        output.WriteUInt32(UIAppendLife);
      }
      if (MaxSuperArmor != 0) {
        output.WriteRawTag(248, 4);
        output.WriteUInt32(MaxSuperArmor);
      }
      if (MaxMagic != 0) {
        output.WriteRawTag(128, 5);
        output.WriteUInt32(MaxMagic);
      }
      if (MinAttackPercent != 0) {
        output.WriteRawTag(136, 5);
        output.WriteUInt32(MinAttackPercent);
      }
      if (MaxAttackPercent != 0) {
        output.WriteRawTag(144, 5);
        output.WriteUInt32(MaxAttackPercent);
      }
      if (DefensePercent != 0) {
        output.WriteRawTag(152, 5);
        output.WriteUInt32(DefensePercent);
      }
      if (MDefensePercent != 0) {
        output.WriteRawTag(160, 5);
        output.WriteUInt32(MDefensePercent);
      }
      if (Dodge != 0) {
        output.WriteRawTag(168, 5);
        output.WriteUInt32(Dodge);
      }
      if (HitV != 0) {
        output.WriteRawTag(176, 5);
        output.WriteUInt32(HitV);
      }
      if (MaxLife != 0) {
        output.WriteRawTag(184, 5);
        output.WriteUInt32(MaxLife);
      }
      if (RecoverLifeV != 0) {
        output.WriteRawTag(192, 5);
        output.WriteUInt32(RecoverLifeV);
      }
      if (Level != 0) {
        output.WriteRawTag(200, 5);
        output.WriteUInt32(Level);
      }
      if (Grade != 0) {
        output.WriteRawTag(208, 5);
        output.WriteUInt32(Grade);
      }
      if (Combat != 0) {
        output.WriteRawTag(216, 5);
        output.WriteUInt32(Combat);
      }
      if (CountDownInOneViolentTime != 0) {
        output.WriteRawTag(224, 5);
        output.WriteUInt32(CountDownInOneViolentTime);
      }
      if (CountDownInTwoViolentTime != 0) {
        output.WriteRawTag(232, 5);
        output.WriteUInt32(CountDownInTwoViolentTime);
      }
      if (ViolentAIID != 0) {
        output.WriteRawTag(240, 5);
        output.WriteUInt32(ViolentAIID);
      }
      if (Experience != 0) {
        output.WriteRawTag(248, 5);
        output.WriteUInt32(Experience);
      }
      if (ConditionFallID != 0) {
        output.WriteRawTag(128, 6);
        output.WriteUInt32(ConditionFallID);
      }
      if (FallID != 0) {
        output.WriteRawTag(136, 6);
        output.WriteUInt32(FallID);
      }
      if (FallLevel != 0) {
        output.WriteRawTag(144, 6);
        output.WriteUInt32(FallLevel);
      }
      if (FallLevel2 != 0) {
        output.WriteRawTag(152, 6);
        output.WriteUInt32(FallLevel2);
      }
      if (AddSP != 0) {
        output.WriteRawTag(160, 6);
        output.WriteUInt32(AddSP);
      }
      if (DefaultAction.Length != 0) {
        output.WriteRawTag(170, 6);
        output.WriteString(DefaultAction);
      }
      if (DoubleAttack != 0) {
        output.WriteRawTag(176, 6);
        output.WriteUInt32(DoubleAttack);
      }
      if (FatalAttack != 0) {
        output.WriteRawTag(184, 6);
        output.WriteUInt32(FatalAttack);
      }
      if (RecoverMagicV != 0) {
        output.WriteRawTag(192, 6);
        output.WriteUInt32(RecoverMagicV);
      }
      if (DamageThornPercent != 0) {
        output.WriteRawTag(200, 6);
        output.WriteUInt32(DamageThornPercent);
      }
      if (DamageThorn != 0) {
        output.WriteRawTag(208, 6);
        output.WriteUInt32(DamageThorn);
      }
      if (SubAttackInjurePercent != 0) {
        output.WriteRawTag(216, 6);
        output.WriteUInt32(SubAttackInjurePercent);
      }
      if (SubAttackInjure != 0) {
        output.WriteRawTag(224, 6);
        output.WriteUInt32(SubAttackInjure);
      }
      if (IgnoreDefensePercent != 0) {
        output.WriteRawTag(232, 6);
        output.WriteUInt32(IgnoreDefensePercent);
      }
      if (IgnoreDefenseRate != 0) {
        output.WriteRawTag(240, 6);
        output.WriteUInt32(IgnoreDefenseRate);
      }
      if (Lucky != 0) {
        output.WriteRawTag(248, 6);
        output.WriteUInt32(Lucky);
      }
      if (LuckyTBox != 0) {
        output.WriteRawTag(128, 7);
        output.WriteUInt32(LuckyTBox);
      }
      if (BirthStatue != 0) {
        output.WriteRawTag(136, 7);
        output.WriteUInt32(BirthStatue);
      }
      if (Belong != 0) {
        output.WriteRawTag(144, 7);
        output.WriteUInt32(Belong);
      }
      if (PersonalJiFen != 0) {
        output.WriteRawTag(152, 7);
        output.WriteUInt32(PersonalJiFen);
      }
      if (CampJiFen != 0) {
        output.WriteRawTag(160, 7);
        output.WriteUInt32(CampJiFen);
      }
      if (EMoJiFen != 0) {
        output.WriteRawTag(168, 7);
        output.WriteUInt32(EMoJiFen);
      }
      if (XueSeJiFen != 0) {
        output.WriteRawTag(176, 7);
        output.WriteUInt32(XueSeJiFen);
      }
      if (JinBiJiFen != 0) {
        output.WriteRawTag(184, 7);
        output.WriteUInt32(JinBiJiFen);
      }
      if (LangHunJiFen != 0) {
        output.WriteRawTag(192, 7);
        output.WriteUInt32(LangHunJiFen);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ID);
      }
      if (SName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SName);
      }
      if (GameNote1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameNote1);
      }
      if (GameNote.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameNote);
      }
      if (GameNote2.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameNote2);
      }
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (PicCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PicCode);
      }
      if (RadarMonster.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RadarMonster);
      }
      if (Display != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Display);
      }
      if (ResName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResName);
      }
      if (ResIDName != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ResIDName);
      }
      if (Scale != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Scale);
      }
      if (Function.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Function);
      }
      if (MapCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MapCode);
      }
      if (ShaderID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ShaderID);
      }
      if (GhostShaderID != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(GhostShaderID);
      }
      if (GuaJieDian.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(GuaJieDian);
      }
      if (GuaJieTeXiao != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(GuaJieTeXiao);
      }
      if (BornAction != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BornAction);
      }
      if (ComeAnimation != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ComeAnimation);
      }
      if (DieAnimation != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DieAnimation);
      }
      if (DieEffect != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DieEffect);
      }
      if (DeadDissolve.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DeadDissolve);
      }
      if (CameraParam.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CameraParam);
      }
      if (MainBone.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MainBone);
      }
      if (LifeBarPosY != 0F) {
        size += 2 + 4;
      }
      if (RemoveDecWhenDead != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RemoveDecWhenDead);
      }
      if (Talk.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Talk);
      }
      if (Talk2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Talk2);
      }
      if (NameColor != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(NameColor);
      }
      if (ZhuanSheng != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ZhuanSheng);
      }
      if (Sex != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Sex);
      }
      if (CamParam != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(CamParam);
      }
      if (PlaySound.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PlaySound);
      }
      if (AttackSound.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AttackSound);
      }
      if (HitSound.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HitSound);
      }
      if (DieSound.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DieSound);
      }
      if (YouShou != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(YouShou);
      }
      if (ZuoShou.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ZuoShou);
      }
      if (MonsterType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MonsterType);
      }
      if (XueTiaoType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(XueTiaoType);
      }
      if (SkillIDs.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SkillIDs);
      }
      if (RandomSkillIDs.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RandomSkillIDs);
      }
      if (AIID != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AIID);
      }
      if (DefanceStyle.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DefanceStyle);
      }
      if (OffPlayRecoverTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(OffPlayRecoverTime);
      }
      if (BirthStunTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BirthStunTime);
      }
      if (ResetBreakArmor.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ResetBreakArmor);
      }
      if (Weight != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Weight);
      }
      if (MonsterTypeEx != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MonsterTypeEx);
      }
      if (MoveBlock != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MoveBlock);
      }
      if (TurnTime.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TurnTime);
      }
      if (AttackRange != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AttackRange);
      }
      if (SeedRange != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SeedRange);
      }
      if (TraceRange != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TraceRange);
      }
      if (MonsterSpeed != 0F) {
        size += 2 + 4;
      }
      if (AttackSpeed != 0F) {
        size += 2 + 4;
      }
      if (Collide.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Collide);
      }
      if (PathId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PathId);
      }
      if (BattleMoveMinSpace != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BattleMoveMinSpace);
      }
      if (BattleMoveMaxSpace != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BattleMoveMaxSpace);
      }
      if (BattleMoveAngle != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BattleMoveAngle);
      }
      if (Radius != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Radius);
      }
      if (EffectRadius != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(EffectRadius);
      }
      if (BattleMoveOdds != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BattleMoveOdds);
      }
      if (BattleFaintOdds != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BattleFaintOdds);
      }
      if (GazeMoveOdds != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(GazeMoveOdds);
      }
      if (AttackOdds != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AttackOdds);
      }
      if (MonsterNotice.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MonsterNotice);
      }
      if (AttackType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AttackType);
      }
      if (AttackStyle != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AttackStyle);
      }
      if (MonsterTypeSort != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MonsterTypeSort);
      }
      if (MovePace != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MovePace);
      }
      if (MoveWaitTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MoveWaitTime);
      }
      if (TuoZhan != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TuoZhan);
      }
      if (Camp != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Camp);
      }
      if (SeekStyle != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SeekStyle);
      }
      if (UIAppendLife != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(UIAppendLife);
      }
      if (MaxSuperArmor != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MaxSuperArmor);
      }
      if (MaxMagic != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MaxMagic);
      }
      if (MinAttackPercent != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MinAttackPercent);
      }
      if (MaxAttackPercent != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MaxAttackPercent);
      }
      if (DefensePercent != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DefensePercent);
      }
      if (MDefensePercent != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MDefensePercent);
      }
      if (Dodge != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Dodge);
      }
      if (HitV != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(HitV);
      }
      if (MaxLife != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MaxLife);
      }
      if (RecoverLifeV != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RecoverLifeV);
      }
      if (Level != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (Grade != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Grade);
      }
      if (Combat != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Combat);
      }
      if (CountDownInOneViolentTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(CountDownInOneViolentTime);
      }
      if (CountDownInTwoViolentTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(CountDownInTwoViolentTime);
      }
      if (ViolentAIID != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ViolentAIID);
      }
      if (Experience != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Experience);
      }
      if (ConditionFallID != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ConditionFallID);
      }
      if (FallID != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(FallID);
      }
      if (FallLevel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(FallLevel);
      }
      if (FallLevel2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(FallLevel2);
      }
      if (AddSP != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AddSP);
      }
      if (DefaultAction.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DefaultAction);
      }
      if (DoubleAttack != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DoubleAttack);
      }
      if (FatalAttack != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(FatalAttack);
      }
      if (RecoverMagicV != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RecoverMagicV);
      }
      if (DamageThornPercent != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DamageThornPercent);
      }
      if (DamageThorn != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DamageThorn);
      }
      if (SubAttackInjurePercent != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SubAttackInjurePercent);
      }
      if (SubAttackInjure != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SubAttackInjure);
      }
      if (IgnoreDefensePercent != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IgnoreDefensePercent);
      }
      if (IgnoreDefenseRate != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IgnoreDefenseRate);
      }
      if (Lucky != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Lucky);
      }
      if (LuckyTBox != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LuckyTBox);
      }
      if (BirthStatue != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BirthStatue);
      }
      if (Belong != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Belong);
      }
      if (PersonalJiFen != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PersonalJiFen);
      }
      if (CampJiFen != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(CampJiFen);
      }
      if (EMoJiFen != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(EMoJiFen);
      }
      if (XueSeJiFen != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(XueSeJiFen);
      }
      if (JinBiJiFen != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(JinBiJiFen);
      }
      if (LangHunJiFen != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LangHunJiFen);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Monsters other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.SName.Length != 0) {
        SName = other.SName;
      }
      if (other.GameNote1.Length != 0) {
        GameNote1 = other.GameNote1;
      }
      if (other.GameNote.Length != 0) {
        GameNote = other.GameNote;
      }
      if (other.GameNote2.Length != 0) {
        GameNote2 = other.GameNote2;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.PicCode.Length != 0) {
        PicCode = other.PicCode;
      }
      if (other.RadarMonster.Length != 0) {
        RadarMonster = other.RadarMonster;
      }
      if (other.Display != 0) {
        Display = other.Display;
      }
      if (other.ResName.Length != 0) {
        ResName = other.ResName;
      }
      if (other.ResIDName != 0) {
        ResIDName = other.ResIDName;
      }
      if (other.Scale != 0) {
        Scale = other.Scale;
      }
      if (other.Function.Length != 0) {
        Function = other.Function;
      }
      if (other.MapCode != 0) {
        MapCode = other.MapCode;
      }
      if (other.ShaderID != 0) {
        ShaderID = other.ShaderID;
      }
      if (other.GhostShaderID != 0) {
        GhostShaderID = other.GhostShaderID;
      }
      if (other.GuaJieDian.Length != 0) {
        GuaJieDian = other.GuaJieDian;
      }
      if (other.GuaJieTeXiao != 0) {
        GuaJieTeXiao = other.GuaJieTeXiao;
      }
      if (other.BornAction != 0) {
        BornAction = other.BornAction;
      }
      if (other.ComeAnimation != 0) {
        ComeAnimation = other.ComeAnimation;
      }
      if (other.DieAnimation != 0) {
        DieAnimation = other.DieAnimation;
      }
      if (other.DieEffect != 0) {
        DieEffect = other.DieEffect;
      }
      if (other.DeadDissolve.Length != 0) {
        DeadDissolve = other.DeadDissolve;
      }
      if (other.CameraParam.Length != 0) {
        CameraParam = other.CameraParam;
      }
      if (other.MainBone.Length != 0) {
        MainBone = other.MainBone;
      }
      if (other.LifeBarPosY != 0F) {
        LifeBarPosY = other.LifeBarPosY;
      }
      if (other.RemoveDecWhenDead != 0) {
        RemoveDecWhenDead = other.RemoveDecWhenDead;
      }
      if (other.Talk.Length != 0) {
        Talk = other.Talk;
      }
      if (other.Talk2.Length != 0) {
        Talk2 = other.Talk2;
      }
      if (other.NameColor != 0) {
        NameColor = other.NameColor;
      }
      if (other.ZhuanSheng != 0) {
        ZhuanSheng = other.ZhuanSheng;
      }
      if (other.Sex != 0) {
        Sex = other.Sex;
      }
      if (other.CamParam != 0) {
        CamParam = other.CamParam;
      }
      if (other.PlaySound.Length != 0) {
        PlaySound = other.PlaySound;
      }
      if (other.AttackSound.Length != 0) {
        AttackSound = other.AttackSound;
      }
      if (other.HitSound.Length != 0) {
        HitSound = other.HitSound;
      }
      if (other.DieSound.Length != 0) {
        DieSound = other.DieSound;
      }
      if (other.YouShou != 0) {
        YouShou = other.YouShou;
      }
      if (other.ZuoShou.Length != 0) {
        ZuoShou = other.ZuoShou;
      }
      if (other.MonsterType != 0) {
        MonsterType = other.MonsterType;
      }
      if (other.XueTiaoType.Length != 0) {
        XueTiaoType = other.XueTiaoType;
      }
      if (other.SkillIDs.Length != 0) {
        SkillIDs = other.SkillIDs;
      }
      if (other.RandomSkillIDs.Length != 0) {
        RandomSkillIDs = other.RandomSkillIDs;
      }
      if (other.AIID != 0) {
        AIID = other.AIID;
      }
      if (other.DefanceStyle.Length != 0) {
        DefanceStyle = other.DefanceStyle;
      }
      if (other.OffPlayRecoverTime != 0) {
        OffPlayRecoverTime = other.OffPlayRecoverTime;
      }
      if (other.BirthStunTime != 0) {
        BirthStunTime = other.BirthStunTime;
      }
      if (other.ResetBreakArmor.Length != 0) {
        ResetBreakArmor = other.ResetBreakArmor;
      }
      if (other.Weight != 0) {
        Weight = other.Weight;
      }
      if (other.MonsterTypeEx != 0) {
        MonsterTypeEx = other.MonsterTypeEx;
      }
      if (other.MoveBlock != 0) {
        MoveBlock = other.MoveBlock;
      }
      if (other.TurnTime.Length != 0) {
        TurnTime = other.TurnTime;
      }
      if (other.AttackRange != 0) {
        AttackRange = other.AttackRange;
      }
      if (other.SeedRange != 0) {
        SeedRange = other.SeedRange;
      }
      if (other.TraceRange != 0) {
        TraceRange = other.TraceRange;
      }
      if (other.MonsterSpeed != 0F) {
        MonsterSpeed = other.MonsterSpeed;
      }
      if (other.AttackSpeed != 0F) {
        AttackSpeed = other.AttackSpeed;
      }
      if (other.Collide.Length != 0) {
        Collide = other.Collide;
      }
      if (other.PathId.Length != 0) {
        PathId = other.PathId;
      }
      if (other.BattleMoveMinSpace != 0) {
        BattleMoveMinSpace = other.BattleMoveMinSpace;
      }
      if (other.BattleMoveMaxSpace != 0) {
        BattleMoveMaxSpace = other.BattleMoveMaxSpace;
      }
      if (other.BattleMoveAngle != 0) {
        BattleMoveAngle = other.BattleMoveAngle;
      }
      if (other.Radius != 0) {
        Radius = other.Radius;
      }
      if (other.EffectRadius != 0) {
        EffectRadius = other.EffectRadius;
      }
      if (other.BattleMoveOdds != 0) {
        BattleMoveOdds = other.BattleMoveOdds;
      }
      if (other.BattleFaintOdds != 0) {
        BattleFaintOdds = other.BattleFaintOdds;
      }
      if (other.GazeMoveOdds != 0) {
        GazeMoveOdds = other.GazeMoveOdds;
      }
      if (other.AttackOdds != 0) {
        AttackOdds = other.AttackOdds;
      }
      if (other.MonsterNotice.Length != 0) {
        MonsterNotice = other.MonsterNotice;
      }
      if (other.AttackType != 0) {
        AttackType = other.AttackType;
      }
      if (other.AttackStyle != 0) {
        AttackStyle = other.AttackStyle;
      }
      if (other.MonsterTypeSort != 0) {
        MonsterTypeSort = other.MonsterTypeSort;
      }
      if (other.MovePace != 0) {
        MovePace = other.MovePace;
      }
      if (other.MoveWaitTime != 0) {
        MoveWaitTime = other.MoveWaitTime;
      }
      if (other.TuoZhan != 0) {
        TuoZhan = other.TuoZhan;
      }
      if (other.Camp != 0) {
        Camp = other.Camp;
      }
      if (other.SeekStyle != 0) {
        SeekStyle = other.SeekStyle;
      }
      if (other.UIAppendLife != 0) {
        UIAppendLife = other.UIAppendLife;
      }
      if (other.MaxSuperArmor != 0) {
        MaxSuperArmor = other.MaxSuperArmor;
      }
      if (other.MaxMagic != 0) {
        MaxMagic = other.MaxMagic;
      }
      if (other.MinAttackPercent != 0) {
        MinAttackPercent = other.MinAttackPercent;
      }
      if (other.MaxAttackPercent != 0) {
        MaxAttackPercent = other.MaxAttackPercent;
      }
      if (other.DefensePercent != 0) {
        DefensePercent = other.DefensePercent;
      }
      if (other.MDefensePercent != 0) {
        MDefensePercent = other.MDefensePercent;
      }
      if (other.Dodge != 0) {
        Dodge = other.Dodge;
      }
      if (other.HitV != 0) {
        HitV = other.HitV;
      }
      if (other.MaxLife != 0) {
        MaxLife = other.MaxLife;
      }
      if (other.RecoverLifeV != 0) {
        RecoverLifeV = other.RecoverLifeV;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Grade != 0) {
        Grade = other.Grade;
      }
      if (other.Combat != 0) {
        Combat = other.Combat;
      }
      if (other.CountDownInOneViolentTime != 0) {
        CountDownInOneViolentTime = other.CountDownInOneViolentTime;
      }
      if (other.CountDownInTwoViolentTime != 0) {
        CountDownInTwoViolentTime = other.CountDownInTwoViolentTime;
      }
      if (other.ViolentAIID != 0) {
        ViolentAIID = other.ViolentAIID;
      }
      if (other.Experience != 0) {
        Experience = other.Experience;
      }
      if (other.ConditionFallID != 0) {
        ConditionFallID = other.ConditionFallID;
      }
      if (other.FallID != 0) {
        FallID = other.FallID;
      }
      if (other.FallLevel != 0) {
        FallLevel = other.FallLevel;
      }
      if (other.FallLevel2 != 0) {
        FallLevel2 = other.FallLevel2;
      }
      if (other.AddSP != 0) {
        AddSP = other.AddSP;
      }
      if (other.DefaultAction.Length != 0) {
        DefaultAction = other.DefaultAction;
      }
      if (other.DoubleAttack != 0) {
        DoubleAttack = other.DoubleAttack;
      }
      if (other.FatalAttack != 0) {
        FatalAttack = other.FatalAttack;
      }
      if (other.RecoverMagicV != 0) {
        RecoverMagicV = other.RecoverMagicV;
      }
      if (other.DamageThornPercent != 0) {
        DamageThornPercent = other.DamageThornPercent;
      }
      if (other.DamageThorn != 0) {
        DamageThorn = other.DamageThorn;
      }
      if (other.SubAttackInjurePercent != 0) {
        SubAttackInjurePercent = other.SubAttackInjurePercent;
      }
      if (other.SubAttackInjure != 0) {
        SubAttackInjure = other.SubAttackInjure;
      }
      if (other.IgnoreDefensePercent != 0) {
        IgnoreDefensePercent = other.IgnoreDefensePercent;
      }
      if (other.IgnoreDefenseRate != 0) {
        IgnoreDefenseRate = other.IgnoreDefenseRate;
      }
      if (other.Lucky != 0) {
        Lucky = other.Lucky;
      }
      if (other.LuckyTBox != 0) {
        LuckyTBox = other.LuckyTBox;
      }
      if (other.BirthStatue != 0) {
        BirthStatue = other.BirthStatue;
      }
      if (other.Belong != 0) {
        Belong = other.Belong;
      }
      if (other.PersonalJiFen != 0) {
        PersonalJiFen = other.PersonalJiFen;
      }
      if (other.CampJiFen != 0) {
        CampJiFen = other.CampJiFen;
      }
      if (other.EMoJiFen != 0) {
        EMoJiFen = other.EMoJiFen;
      }
      if (other.XueSeJiFen != 0) {
        XueSeJiFen = other.XueSeJiFen;
      }
      if (other.JinBiJiFen != 0) {
        JinBiJiFen = other.JinBiJiFen;
      }
      if (other.LangHunJiFen != 0) {
        LangHunJiFen = other.LangHunJiFen;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ID = input.ReadUInt32();
            break;
          }
          case 18: {
            SName = input.ReadString();
            break;
          }
          case 26: {
            GameNote1 = input.ReadString();
            break;
          }
          case 34: {
            GameNote = input.ReadString();
            break;
          }
          case 42: {
            GameNote2 = input.ReadString();
            break;
          }
          case 48: {
            Code = input.ReadInt32();
            break;
          }
          case 58: {
            PicCode = input.ReadString();
            break;
          }
          case 66: {
            RadarMonster = input.ReadString();
            break;
          }
          case 72: {
            Display = input.ReadInt32();
            break;
          }
          case 82: {
            ResName = input.ReadString();
            break;
          }
          case 88: {
            ResIDName = input.ReadInt32();
            break;
          }
          case 96: {
            Scale = input.ReadUInt32();
            break;
          }
          case 106: {
            Function = input.ReadString();
            break;
          }
          case 112: {
            MapCode = input.ReadUInt32();
            break;
          }
          case 120: {
            ShaderID = input.ReadUInt32();
            break;
          }
          case 128: {
            GhostShaderID = input.ReadUInt32();
            break;
          }
          case 138: {
            GuaJieDian = input.ReadString();
            break;
          }
          case 144: {
            GuaJieTeXiao = input.ReadUInt32();
            break;
          }
          case 152: {
            BornAction = input.ReadUInt32();
            break;
          }
          case 160: {
            ComeAnimation = input.ReadUInt32();
            break;
          }
          case 168: {
            DieAnimation = input.ReadUInt32();
            break;
          }
          case 176: {
            DieEffect = input.ReadUInt32();
            break;
          }
          case 186: {
            DeadDissolve = input.ReadString();
            break;
          }
          case 194: {
            CameraParam = input.ReadString();
            break;
          }
          case 202: {
            MainBone = input.ReadString();
            break;
          }
          case 213: {
            LifeBarPosY = input.ReadFloat();
            break;
          }
          case 216: {
            RemoveDecWhenDead = input.ReadUInt32();
            break;
          }
          case 226: {
            Talk = input.ReadString();
            break;
          }
          case 234: {
            Talk2 = input.ReadString();
            break;
          }
          case 240: {
            NameColor = input.ReadUInt32();
            break;
          }
          case 248: {
            ZhuanSheng = input.ReadUInt32();
            break;
          }
          case 256: {
            Sex = input.ReadUInt32();
            break;
          }
          case 264: {
            CamParam = input.ReadUInt32();
            break;
          }
          case 274: {
            PlaySound = input.ReadString();
            break;
          }
          case 282: {
            AttackSound = input.ReadString();
            break;
          }
          case 290: {
            HitSound = input.ReadString();
            break;
          }
          case 298: {
            DieSound = input.ReadString();
            break;
          }
          case 304: {
            YouShou = input.ReadUInt32();
            break;
          }
          case 314: {
            ZuoShou = input.ReadString();
            break;
          }
          case 320: {
            MonsterType = input.ReadUInt32();
            break;
          }
          case 330: {
            XueTiaoType = input.ReadString();
            break;
          }
          case 338: {
            SkillIDs = input.ReadString();
            break;
          }
          case 346: {
            RandomSkillIDs = input.ReadString();
            break;
          }
          case 352: {
            AIID = input.ReadUInt32();
            break;
          }
          case 362: {
            DefanceStyle = input.ReadString();
            break;
          }
          case 368: {
            OffPlayRecoverTime = input.ReadUInt32();
            break;
          }
          case 376: {
            BirthStunTime = input.ReadUInt32();
            break;
          }
          case 386: {
            ResetBreakArmor = input.ReadString();
            break;
          }
          case 392: {
            Weight = input.ReadUInt32();
            break;
          }
          case 400: {
            MonsterTypeEx = input.ReadUInt32();
            break;
          }
          case 408: {
            MoveBlock = input.ReadUInt32();
            break;
          }
          case 418: {
            TurnTime = input.ReadString();
            break;
          }
          case 424: {
            AttackRange = input.ReadUInt32();
            break;
          }
          case 432: {
            SeedRange = input.ReadUInt32();
            break;
          }
          case 440: {
            TraceRange = input.ReadUInt32();
            break;
          }
          case 453: {
            MonsterSpeed = input.ReadFloat();
            break;
          }
          case 461: {
            AttackSpeed = input.ReadFloat();
            break;
          }
          case 466: {
            Collide = input.ReadString();
            break;
          }
          case 474: {
            PathId = input.ReadString();
            break;
          }
          case 480: {
            BattleMoveMinSpace = input.ReadUInt32();
            break;
          }
          case 488: {
            BattleMoveMaxSpace = input.ReadUInt32();
            break;
          }
          case 496: {
            BattleMoveAngle = input.ReadUInt32();
            break;
          }
          case 504: {
            Radius = input.ReadUInt32();
            break;
          }
          case 512: {
            EffectRadius = input.ReadUInt32();
            break;
          }
          case 520: {
            BattleMoveOdds = input.ReadUInt32();
            break;
          }
          case 528: {
            BattleFaintOdds = input.ReadUInt32();
            break;
          }
          case 536: {
            GazeMoveOdds = input.ReadUInt32();
            break;
          }
          case 544: {
            AttackOdds = input.ReadUInt32();
            break;
          }
          case 554: {
            MonsterNotice = input.ReadString();
            break;
          }
          case 560: {
            AttackType = input.ReadUInt32();
            break;
          }
          case 568: {
            AttackStyle = input.ReadUInt32();
            break;
          }
          case 576: {
            MonsterTypeSort = input.ReadUInt32();
            break;
          }
          case 584: {
            MovePace = input.ReadUInt32();
            break;
          }
          case 592: {
            MoveWaitTime = input.ReadUInt32();
            break;
          }
          case 600: {
            TuoZhan = input.ReadUInt32();
            break;
          }
          case 608: {
            Camp = input.ReadUInt32();
            break;
          }
          case 616: {
            SeekStyle = input.ReadUInt32();
            break;
          }
          case 624: {
            UIAppendLife = input.ReadUInt32();
            break;
          }
          case 632: {
            MaxSuperArmor = input.ReadUInt32();
            break;
          }
          case 640: {
            MaxMagic = input.ReadUInt32();
            break;
          }
          case 648: {
            MinAttackPercent = input.ReadUInt32();
            break;
          }
          case 656: {
            MaxAttackPercent = input.ReadUInt32();
            break;
          }
          case 664: {
            DefensePercent = input.ReadUInt32();
            break;
          }
          case 672: {
            MDefensePercent = input.ReadUInt32();
            break;
          }
          case 680: {
            Dodge = input.ReadUInt32();
            break;
          }
          case 688: {
            HitV = input.ReadUInt32();
            break;
          }
          case 696: {
            MaxLife = input.ReadUInt32();
            break;
          }
          case 704: {
            RecoverLifeV = input.ReadUInt32();
            break;
          }
          case 712: {
            Level = input.ReadUInt32();
            break;
          }
          case 720: {
            Grade = input.ReadUInt32();
            break;
          }
          case 728: {
            Combat = input.ReadUInt32();
            break;
          }
          case 736: {
            CountDownInOneViolentTime = input.ReadUInt32();
            break;
          }
          case 744: {
            CountDownInTwoViolentTime = input.ReadUInt32();
            break;
          }
          case 752: {
            ViolentAIID = input.ReadUInt32();
            break;
          }
          case 760: {
            Experience = input.ReadUInt32();
            break;
          }
          case 768: {
            ConditionFallID = input.ReadUInt32();
            break;
          }
          case 776: {
            FallID = input.ReadUInt32();
            break;
          }
          case 784: {
            FallLevel = input.ReadUInt32();
            break;
          }
          case 792: {
            FallLevel2 = input.ReadUInt32();
            break;
          }
          case 800: {
            AddSP = input.ReadUInt32();
            break;
          }
          case 810: {
            DefaultAction = input.ReadString();
            break;
          }
          case 816: {
            DoubleAttack = input.ReadUInt32();
            break;
          }
          case 824: {
            FatalAttack = input.ReadUInt32();
            break;
          }
          case 832: {
            RecoverMagicV = input.ReadUInt32();
            break;
          }
          case 840: {
            DamageThornPercent = input.ReadUInt32();
            break;
          }
          case 848: {
            DamageThorn = input.ReadUInt32();
            break;
          }
          case 856: {
            SubAttackInjurePercent = input.ReadUInt32();
            break;
          }
          case 864: {
            SubAttackInjure = input.ReadUInt32();
            break;
          }
          case 872: {
            IgnoreDefensePercent = input.ReadUInt32();
            break;
          }
          case 880: {
            IgnoreDefenseRate = input.ReadUInt32();
            break;
          }
          case 888: {
            Lucky = input.ReadUInt32();
            break;
          }
          case 896: {
            LuckyTBox = input.ReadUInt32();
            break;
          }
          case 904: {
            BirthStatue = input.ReadUInt32();
            break;
          }
          case 912: {
            Belong = input.ReadUInt32();
            break;
          }
          case 920: {
            PersonalJiFen = input.ReadUInt32();
            break;
          }
          case 928: {
            CampJiFen = input.ReadUInt32();
            break;
          }
          case 936: {
            EMoJiFen = input.ReadUInt32();
            break;
          }
          case 944: {
            XueSeJiFen = input.ReadUInt32();
            break;
          }
          case 952: {
            JinBiJiFen = input.ReadUInt32();
            break;
          }
          case 960: {
            LangHunJiFen = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ID = input.ReadUInt32();
            break;
          }
          case 18: {
            SName = input.ReadString();
            break;
          }
          case 26: {
            GameNote1 = input.ReadString();
            break;
          }
          case 34: {
            GameNote = input.ReadString();
            break;
          }
          case 42: {
            GameNote2 = input.ReadString();
            break;
          }
          case 48: {
            Code = input.ReadInt32();
            break;
          }
          case 58: {
            PicCode = input.ReadString();
            break;
          }
          case 66: {
            RadarMonster = input.ReadString();
            break;
          }
          case 72: {
            Display = input.ReadInt32();
            break;
          }
          case 82: {
            ResName = input.ReadString();
            break;
          }
          case 88: {
            ResIDName = input.ReadInt32();
            break;
          }
          case 96: {
            Scale = input.ReadUInt32();
            break;
          }
          case 106: {
            Function = input.ReadString();
            break;
          }
          case 112: {
            MapCode = input.ReadUInt32();
            break;
          }
          case 120: {
            ShaderID = input.ReadUInt32();
            break;
          }
          case 128: {
            GhostShaderID = input.ReadUInt32();
            break;
          }
          case 138: {
            GuaJieDian = input.ReadString();
            break;
          }
          case 144: {
            GuaJieTeXiao = input.ReadUInt32();
            break;
          }
          case 152: {
            BornAction = input.ReadUInt32();
            break;
          }
          case 160: {
            ComeAnimation = input.ReadUInt32();
            break;
          }
          case 168: {
            DieAnimation = input.ReadUInt32();
            break;
          }
          case 176: {
            DieEffect = input.ReadUInt32();
            break;
          }
          case 186: {
            DeadDissolve = input.ReadString();
            break;
          }
          case 194: {
            CameraParam = input.ReadString();
            break;
          }
          case 202: {
            MainBone = input.ReadString();
            break;
          }
          case 213: {
            LifeBarPosY = input.ReadFloat();
            break;
          }
          case 216: {
            RemoveDecWhenDead = input.ReadUInt32();
            break;
          }
          case 226: {
            Talk = input.ReadString();
            break;
          }
          case 234: {
            Talk2 = input.ReadString();
            break;
          }
          case 240: {
            NameColor = input.ReadUInt32();
            break;
          }
          case 248: {
            ZhuanSheng = input.ReadUInt32();
            break;
          }
          case 256: {
            Sex = input.ReadUInt32();
            break;
          }
          case 264: {
            CamParam = input.ReadUInt32();
            break;
          }
          case 274: {
            PlaySound = input.ReadString();
            break;
          }
          case 282: {
            AttackSound = input.ReadString();
            break;
          }
          case 290: {
            HitSound = input.ReadString();
            break;
          }
          case 298: {
            DieSound = input.ReadString();
            break;
          }
          case 304: {
            YouShou = input.ReadUInt32();
            break;
          }
          case 314: {
            ZuoShou = input.ReadString();
            break;
          }
          case 320: {
            MonsterType = input.ReadUInt32();
            break;
          }
          case 330: {
            XueTiaoType = input.ReadString();
            break;
          }
          case 338: {
            SkillIDs = input.ReadString();
            break;
          }
          case 346: {
            RandomSkillIDs = input.ReadString();
            break;
          }
          case 352: {
            AIID = input.ReadUInt32();
            break;
          }
          case 362: {
            DefanceStyle = input.ReadString();
            break;
          }
          case 368: {
            OffPlayRecoverTime = input.ReadUInt32();
            break;
          }
          case 376: {
            BirthStunTime = input.ReadUInt32();
            break;
          }
          case 386: {
            ResetBreakArmor = input.ReadString();
            break;
          }
          case 392: {
            Weight = input.ReadUInt32();
            break;
          }
          case 400: {
            MonsterTypeEx = input.ReadUInt32();
            break;
          }
          case 408: {
            MoveBlock = input.ReadUInt32();
            break;
          }
          case 418: {
            TurnTime = input.ReadString();
            break;
          }
          case 424: {
            AttackRange = input.ReadUInt32();
            break;
          }
          case 432: {
            SeedRange = input.ReadUInt32();
            break;
          }
          case 440: {
            TraceRange = input.ReadUInt32();
            break;
          }
          case 453: {
            MonsterSpeed = input.ReadFloat();
            break;
          }
          case 461: {
            AttackSpeed = input.ReadFloat();
            break;
          }
          case 466: {
            Collide = input.ReadString();
            break;
          }
          case 474: {
            PathId = input.ReadString();
            break;
          }
          case 480: {
            BattleMoveMinSpace = input.ReadUInt32();
            break;
          }
          case 488: {
            BattleMoveMaxSpace = input.ReadUInt32();
            break;
          }
          case 496: {
            BattleMoveAngle = input.ReadUInt32();
            break;
          }
          case 504: {
            Radius = input.ReadUInt32();
            break;
          }
          case 512: {
            EffectRadius = input.ReadUInt32();
            break;
          }
          case 520: {
            BattleMoveOdds = input.ReadUInt32();
            break;
          }
          case 528: {
            BattleFaintOdds = input.ReadUInt32();
            break;
          }
          case 536: {
            GazeMoveOdds = input.ReadUInt32();
            break;
          }
          case 544: {
            AttackOdds = input.ReadUInt32();
            break;
          }
          case 554: {
            MonsterNotice = input.ReadString();
            break;
          }
          case 560: {
            AttackType = input.ReadUInt32();
            break;
          }
          case 568: {
            AttackStyle = input.ReadUInt32();
            break;
          }
          case 576: {
            MonsterTypeSort = input.ReadUInt32();
            break;
          }
          case 584: {
            MovePace = input.ReadUInt32();
            break;
          }
          case 592: {
            MoveWaitTime = input.ReadUInt32();
            break;
          }
          case 600: {
            TuoZhan = input.ReadUInt32();
            break;
          }
          case 608: {
            Camp = input.ReadUInt32();
            break;
          }
          case 616: {
            SeekStyle = input.ReadUInt32();
            break;
          }
          case 624: {
            UIAppendLife = input.ReadUInt32();
            break;
          }
          case 632: {
            MaxSuperArmor = input.ReadUInt32();
            break;
          }
          case 640: {
            MaxMagic = input.ReadUInt32();
            break;
          }
          case 648: {
            MinAttackPercent = input.ReadUInt32();
            break;
          }
          case 656: {
            MaxAttackPercent = input.ReadUInt32();
            break;
          }
          case 664: {
            DefensePercent = input.ReadUInt32();
            break;
          }
          case 672: {
            MDefensePercent = input.ReadUInt32();
            break;
          }
          case 680: {
            Dodge = input.ReadUInt32();
            break;
          }
          case 688: {
            HitV = input.ReadUInt32();
            break;
          }
          case 696: {
            MaxLife = input.ReadUInt32();
            break;
          }
          case 704: {
            RecoverLifeV = input.ReadUInt32();
            break;
          }
          case 712: {
            Level = input.ReadUInt32();
            break;
          }
          case 720: {
            Grade = input.ReadUInt32();
            break;
          }
          case 728: {
            Combat = input.ReadUInt32();
            break;
          }
          case 736: {
            CountDownInOneViolentTime = input.ReadUInt32();
            break;
          }
          case 744: {
            CountDownInTwoViolentTime = input.ReadUInt32();
            break;
          }
          case 752: {
            ViolentAIID = input.ReadUInt32();
            break;
          }
          case 760: {
            Experience = input.ReadUInt32();
            break;
          }
          case 768: {
            ConditionFallID = input.ReadUInt32();
            break;
          }
          case 776: {
            FallID = input.ReadUInt32();
            break;
          }
          case 784: {
            FallLevel = input.ReadUInt32();
            break;
          }
          case 792: {
            FallLevel2 = input.ReadUInt32();
            break;
          }
          case 800: {
            AddSP = input.ReadUInt32();
            break;
          }
          case 810: {
            DefaultAction = input.ReadString();
            break;
          }
          case 816: {
            DoubleAttack = input.ReadUInt32();
            break;
          }
          case 824: {
            FatalAttack = input.ReadUInt32();
            break;
          }
          case 832: {
            RecoverMagicV = input.ReadUInt32();
            break;
          }
          case 840: {
            DamageThornPercent = input.ReadUInt32();
            break;
          }
          case 848: {
            DamageThorn = input.ReadUInt32();
            break;
          }
          case 856: {
            SubAttackInjurePercent = input.ReadUInt32();
            break;
          }
          case 864: {
            SubAttackInjure = input.ReadUInt32();
            break;
          }
          case 872: {
            IgnoreDefensePercent = input.ReadUInt32();
            break;
          }
          case 880: {
            IgnoreDefenseRate = input.ReadUInt32();
            break;
          }
          case 888: {
            Lucky = input.ReadUInt32();
            break;
          }
          case 896: {
            LuckyTBox = input.ReadUInt32();
            break;
          }
          case 904: {
            BirthStatue = input.ReadUInt32();
            break;
          }
          case 912: {
            Belong = input.ReadUInt32();
            break;
          }
          case 920: {
            PersonalJiFen = input.ReadUInt32();
            break;
          }
          case 928: {
            CampJiFen = input.ReadUInt32();
            break;
          }
          case 936: {
            EMoJiFen = input.ReadUInt32();
            break;
          }
          case 944: {
            XueSeJiFen = input.ReadUInt32();
            break;
          }
          case 952: {
            JinBiJiFen = input.ReadUInt32();
            break;
          }
          case 960: {
            LangHunJiFen = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
