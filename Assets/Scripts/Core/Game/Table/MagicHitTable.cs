// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: MagicHitTable.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Core.Game.Table {

  /// <summary>Holder for reflection information generated from MagicHitTable.proto</summary>
  public static partial class MagicHitTableReflection {

    #region Descriptor
    /// <summary>File descriptor for MagicHitTable.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MagicHitTableReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNNYWdpY0hpdFRhYmxlLnByb3RvEg9Db3JlLkdhbWUuVGFibGUiOAoNTWFn",
            "aWNIaXRUYWJsZRInCgRyb3dzGAEgAygLMhkuQ29yZS5HYW1lLlRhYmxlLk1h",
            "Z2ljSGl0IsMBCghNYWdpY0hpdBINCgVIaXRJRBgBIAEoBRIPCgdIaXRUeXBl",
            "GAIgASgFEg8KB0hpdFRpbWUYAyABKAUSEwoLSGl0RGlzdGFuY2UYBCADKAUS",
            "EQoJSGl0SGVpZ2h0GAUgASgFEhQKDENvbWJvSGl0VGltZRgGIAEoBRIWCg5D",
            "b21ib0hpdEhlaWdodBgHIAEoBRIXCg9CcmVha0FybW9yVmFsdWUYCCABKAUS",
            "FwoPQnJlYWtBcm1vckxldmVsGAkgASgFYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.Game.Table.MagicHitTable), global::Core.Game.Table.MagicHitTable.Parser, new[]{ "Rows" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.Game.Table.MagicHit), global::Core.Game.Table.MagicHit.Parser, new[]{ "HitID", "HitType", "HitTime", "HitDistance", "HitHeight", "ComboHitTime", "ComboHitHeight", "BreakArmorValue", "BreakArmorLevel" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class MagicHitTable : pb::IMessage<MagicHitTable>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MagicHitTable> _parser = new pb::MessageParser<MagicHitTable>(() => new MagicHitTable());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MagicHitTable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.Game.Table.MagicHitTableReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MagicHitTable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MagicHitTable(MagicHitTable other) : this() {
      rows_ = other.rows_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MagicHitTable Clone() {
      return new MagicHitTable(this);
    }

    /// <summary>Field number for the "rows" field.</summary>
    public const int RowsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Core.Game.Table.MagicHit> _repeated_rows_codec
        = pb::FieldCodec.ForMessage(10, global::Core.Game.Table.MagicHit.Parser);
    private readonly pbc::RepeatedField<global::Core.Game.Table.MagicHit> rows_ = new pbc::RepeatedField<global::Core.Game.Table.MagicHit>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.Game.Table.MagicHit> Rows {
      get { return rows_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MagicHitTable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MagicHitTable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!rows_.Equals(other.rows_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= rows_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      rows_.WriteTo(output, _repeated_rows_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      rows_.WriteTo(ref output, _repeated_rows_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += rows_.CalculateSize(_repeated_rows_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MagicHitTable other) {
      if (other == null) {
        return;
      }
      rows_.Add(other.rows_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            rows_.AddEntriesFrom(input, _repeated_rows_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            rows_.AddEntriesFrom(ref input, _repeated_rows_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class MagicHit : pb::IMessage<MagicHit>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MagicHit> _parser = new pb::MessageParser<MagicHit>(() => new MagicHit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MagicHit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.Game.Table.MagicHitTableReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MagicHit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MagicHit(MagicHit other) : this() {
      hitID_ = other.hitID_;
      hitType_ = other.hitType_;
      hitTime_ = other.hitTime_;
      hitDistance_ = other.hitDistance_.Clone();
      hitHeight_ = other.hitHeight_;
      comboHitTime_ = other.comboHitTime_;
      comboHitHeight_ = other.comboHitHeight_;
      breakArmorValue_ = other.breakArmorValue_;
      breakArmorLevel_ = other.breakArmorLevel_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MagicHit Clone() {
      return new MagicHit(this);
    }

    /// <summary>Field number for the "HitID" field.</summary>
    public const int HitIDFieldNumber = 1;
    private int hitID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HitID {
      get { return hitID_; }
      set {
        hitID_ = value;
      }
    }

    /// <summary>Field number for the "HitType" field.</summary>
    public const int HitTypeFieldNumber = 2;
    private int hitType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HitType {
      get { return hitType_; }
      set {
        hitType_ = value;
      }
    }

    /// <summary>Field number for the "HitTime" field.</summary>
    public const int HitTimeFieldNumber = 3;
    private int hitTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HitTime {
      get { return hitTime_; }
      set {
        hitTime_ = value;
      }
    }

    /// <summary>Field number for the "HitDistance" field.</summary>
    public const int HitDistanceFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_hitDistance_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> hitDistance_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> HitDistance {
      get { return hitDistance_; }
    }

    /// <summary>Field number for the "HitHeight" field.</summary>
    public const int HitHeightFieldNumber = 5;
    private int hitHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HitHeight {
      get { return hitHeight_; }
      set {
        hitHeight_ = value;
      }
    }

    /// <summary>Field number for the "ComboHitTime" field.</summary>
    public const int ComboHitTimeFieldNumber = 6;
    private int comboHitTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ComboHitTime {
      get { return comboHitTime_; }
      set {
        comboHitTime_ = value;
      }
    }

    /// <summary>Field number for the "ComboHitHeight" field.</summary>
    public const int ComboHitHeightFieldNumber = 7;
    private int comboHitHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ComboHitHeight {
      get { return comboHitHeight_; }
      set {
        comboHitHeight_ = value;
      }
    }

    /// <summary>Field number for the "BreakArmorValue" field.</summary>
    public const int BreakArmorValueFieldNumber = 8;
    private int breakArmorValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BreakArmorValue {
      get { return breakArmorValue_; }
      set {
        breakArmorValue_ = value;
      }
    }

    /// <summary>Field number for the "BreakArmorLevel" field.</summary>
    public const int BreakArmorLevelFieldNumber = 9;
    private int breakArmorLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BreakArmorLevel {
      get { return breakArmorLevel_; }
      set {
        breakArmorLevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MagicHit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MagicHit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HitID != other.HitID) return false;
      if (HitType != other.HitType) return false;
      if (HitTime != other.HitTime) return false;
      if(!hitDistance_.Equals(other.hitDistance_)) return false;
      if (HitHeight != other.HitHeight) return false;
      if (ComboHitTime != other.ComboHitTime) return false;
      if (ComboHitHeight != other.ComboHitHeight) return false;
      if (BreakArmorValue != other.BreakArmorValue) return false;
      if (BreakArmorLevel != other.BreakArmorLevel) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HitID != 0) hash ^= HitID.GetHashCode();
      if (HitType != 0) hash ^= HitType.GetHashCode();
      if (HitTime != 0) hash ^= HitTime.GetHashCode();
      hash ^= hitDistance_.GetHashCode();
      if (HitHeight != 0) hash ^= HitHeight.GetHashCode();
      if (ComboHitTime != 0) hash ^= ComboHitTime.GetHashCode();
      if (ComboHitHeight != 0) hash ^= ComboHitHeight.GetHashCode();
      if (BreakArmorValue != 0) hash ^= BreakArmorValue.GetHashCode();
      if (BreakArmorLevel != 0) hash ^= BreakArmorLevel.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HitID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(HitID);
      }
      if (HitType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(HitType);
      }
      if (HitTime != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(HitTime);
      }
      hitDistance_.WriteTo(output, _repeated_hitDistance_codec);
      if (HitHeight != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(HitHeight);
      }
      if (ComboHitTime != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ComboHitTime);
      }
      if (ComboHitHeight != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ComboHitHeight);
      }
      if (BreakArmorValue != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(BreakArmorValue);
      }
      if (BreakArmorLevel != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(BreakArmorLevel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HitID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(HitID);
      }
      if (HitType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(HitType);
      }
      if (HitTime != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(HitTime);
      }
      hitDistance_.WriteTo(ref output, _repeated_hitDistance_codec);
      if (HitHeight != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(HitHeight);
      }
      if (ComboHitTime != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ComboHitTime);
      }
      if (ComboHitHeight != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ComboHitHeight);
      }
      if (BreakArmorValue != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(BreakArmorValue);
      }
      if (BreakArmorLevel != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(BreakArmorLevel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HitID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HitID);
      }
      if (HitType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HitType);
      }
      if (HitTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HitTime);
      }
      size += hitDistance_.CalculateSize(_repeated_hitDistance_codec);
      if (HitHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HitHeight);
      }
      if (ComboHitTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ComboHitTime);
      }
      if (ComboHitHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ComboHitHeight);
      }
      if (BreakArmorValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BreakArmorValue);
      }
      if (BreakArmorLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BreakArmorLevel);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MagicHit other) {
      if (other == null) {
        return;
      }
      if (other.HitID != 0) {
        HitID = other.HitID;
      }
      if (other.HitType != 0) {
        HitType = other.HitType;
      }
      if (other.HitTime != 0) {
        HitTime = other.HitTime;
      }
      hitDistance_.Add(other.hitDistance_);
      if (other.HitHeight != 0) {
        HitHeight = other.HitHeight;
      }
      if (other.ComboHitTime != 0) {
        ComboHitTime = other.ComboHitTime;
      }
      if (other.ComboHitHeight != 0) {
        ComboHitHeight = other.ComboHitHeight;
      }
      if (other.BreakArmorValue != 0) {
        BreakArmorValue = other.BreakArmorValue;
      }
      if (other.BreakArmorLevel != 0) {
        BreakArmorLevel = other.BreakArmorLevel;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            HitID = input.ReadInt32();
            break;
          }
          case 16: {
            HitType = input.ReadInt32();
            break;
          }
          case 24: {
            HitTime = input.ReadInt32();
            break;
          }
          case 34:
          case 32: {
            hitDistance_.AddEntriesFrom(input, _repeated_hitDistance_codec);
            break;
          }
          case 40: {
            HitHeight = input.ReadInt32();
            break;
          }
          case 48: {
            ComboHitTime = input.ReadInt32();
            break;
          }
          case 56: {
            ComboHitHeight = input.ReadInt32();
            break;
          }
          case 64: {
            BreakArmorValue = input.ReadInt32();
            break;
          }
          case 72: {
            BreakArmorLevel = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            HitID = input.ReadInt32();
            break;
          }
          case 16: {
            HitType = input.ReadInt32();
            break;
          }
          case 24: {
            HitTime = input.ReadInt32();
            break;
          }
          case 34:
          case 32: {
            hitDistance_.AddEntriesFrom(ref input, _repeated_hitDistance_codec);
            break;
          }
          case 40: {
            HitHeight = input.ReadInt32();
            break;
          }
          case 48: {
            ComboHitTime = input.ReadInt32();
            break;
          }
          case 56: {
            ComboHitHeight = input.ReadInt32();
            break;
          }
          case 64: {
            BreakArmorValue = input.ReadInt32();
            break;
          }
          case 72: {
            BreakArmorLevel = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
