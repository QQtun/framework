// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: MagicsTable.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Core.Game.Table {

  /// <summary>Holder for reflection information generated from MagicsTable.proto</summary>
  public static partial class MagicsTableReflection {

    #region Descriptor
    /// <summary>File descriptor for MagicsTable.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MagicsTableReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFNYWdpY3NUYWJsZS5wcm90bxIPQ29yZS5HYW1lLlRhYmxlIjQKC01hZ2lj",
            "c1RhYmxlEiUKBHJvd3MYASADKAsyFy5Db3JlLkdhbWUuVGFibGUuTWFnaWNz",
            "IugTCgZNYWdpY3MSCgoCSUQYASABKA0SEwoLTWFnaWNOYW1lSUQYAiABKAkS",
            "EwoLTmV4dE1hZ2ljSUQYAyABKAUSFQoNUGFyZW50TWFnaWNJRBgEIAEoBRIT",
            "CgtNYWluTWFnaWNJRBgFIAEoBRIRCglTa2lsbFR5cGUYBiABKAUSEwoLT3Bl",
            "cmF0ZVR5cGUYByABKAkSFAoMRGVmYW5jZVN0eWxlGAggASgJEg0KBUhpdElk",
            "GAkgASgFEhEKCVJlcGVsVGltZRgKIAEoCRIVCg1SZXBlbFN0dW5UaW1lGAsg",
            "ASgJEhIKClJlcGVsU3BlZWQYDCABKAkSDwoHRXhwQ29zdBgNIAEoCRIQCghG",
            "ZWF0dXJlcxgOIAEoCRINCgVRdWV1ZRgPIAEoCRISCgpJbmp1cmVUeXBlGBAg",
            "ASgJEhYKDkRlbGF5RGVjb1RvTWFwGBEgASgJEhYKDlByZVNraWxsQWN0aW9u",
            "GBIgASgJEhMKC1NraWxsQWN0aW9uGBMgASgJEhYKDkVuZFNraWxsQWN0aW9u",
            "GBQgASgJEhYKDlNraWxsRGlyZWN0aW9uGBUgASgFEhQKDFRvT2N1dXBhdGlv",
            "bhgWIAEoCRIQCghUYWxrTmFtZRgXIAEoCRIWCg5MZWFybkNvbmRpdGlvbhgY",
            "IAEoCRIRCglBdXRvU3RhcnQYGSABKAgSEQoJTGVhcm5UYXNrGBogASgNEhIK",
            "CkxlYXJuUG9pbnQYGyABKAkSEgoKUHJlTWFnaWNJZBgcIAEoCRIUCgxIYXNE",
            "aXJlY3Rpb24YHSABKAkSEgoKRGFtYWdlVHlwZRgeIAEoCRIPCgdVc2VUeXBl",
            "GB8gASgJEhkKEUZhbldlaURlc2NyaXB0aW9uGCAgASgJEhMKC0Rlc2NyaXB0",
            "aW9uGCEgASgJEhQKDERlc2NyaXB0aW9uMhgiIAEoCRIWCg5EZXNjcmlwdGlv",
            "bk51bRgjIAEoCRIOCgZDRFRpbWUYJCABKAMSEgoKSW5pdENEVGltZRglIAEo",
            "CRIRCglCYXNlTWFnaWMYJiABKAkSEwoLUmVzZXRUYXJnZXQYJyABKAkSEgoK",
            "QnJlYWtNYWdpYxgoIAEoCRIYChBJZ25vcmVIaXRGbHlUeXBlGCkgASgJEhQK",
            "DE1hZ2ljVHlwZURlcxgqIAEoCRIRCglNYWdpY1R5cGUYKyABKAkSEQoJVGFy",
            "Z2V0UG9zGCwgASgJEhIKClRhcmdldFR5cGUYLSADKAUSFgoOQXR0YWNrRGlz",
            "dGFuY2UYLiABKAkSEAoIU2NhblR5cGUYLyABKAkSFAoMTWFnaWNTY3JpcHRz",
            "GDAgASgJEhUKDU1hbnlUaW1lRG1hZ2UYMSABKAkSEgoKSW50b25lVGltZRgy",
            "IAEoCRIRCglNb3ZlRGVsYXkYMyADKAUSEAoIU3RlcE1vdmUYNCABKAkSFgoO",
            "V2l0Y2hUaW1lQnJlYWsYNSABKAkSGAoQV2FyaW5nRWZmZWN0Q29uZhg2IAEo",
            "CRIUCgxEeW5hbWljU2hpZnQYNyABKAkSEQoJUHViQ0RUaW1lGDggASgJEhYK",
            "DkF0dGFja0ludGVydmFsGDkgASgJEhkKEU1pbkF0dGFja0Rpc3RhbmNlGDog",
            "ASgJEhIKCk1hZ2ljUmFuZ2UYOyABKAkSGwoTQ2xpZW50TWFueVRpbWVEbWFn",
            "ZRg8IAEoCRIOCgZNYXhOdW0YPSABKAkSEQoJTWFnaWNUaW1lGD4gASgJEhEK",
            "CU1vdmVTcGVlZBg/IAEoBRIUCgxNb3ZlRGlzdGFuY2UYQCABKAkSDgoGVXNl",
            "TnVtGEEgASgJEhEKCVJlc2V0VGltZRhCIAEoCRIgChhDbGllbnRNYW55VGlt",
            "ZURtYWdlRGVsYXkYQyABKAkSFQoNRGlzdGFuY2VEZWNheRhEIAEoCRIaChJD",
            "bGllbnRNb3ZlRGlzdGFuY2UYRSABKAUSEQoJTW92ZVN0eWxlGEYgASgJEhUK",
            "DU1vdmVDb25kaXRpb24YRyABKAkSGAoQQXV0b0ZpbmREaXN0YW5jZRhIIAEo",
            "CRIQCghIaW50VGltZRhJIAEoCRIRCglUcmlnZ2VyQ0QYSiABKAkSEwoLVHJp",
            "Z2dlclR5cGUYSyABKAkSEwoLVHJpZ2dlck9kZHMYTCABKAkSGAoQVHJpZ2dl",
            "clB1YkNEVGltZRhNIAEoCRIRCglNYWdpY0ljb24YTiABKAkSEgoKTWFnaWND",
            "b2xvchhPIAEoCRISCgpBY3Rpb25UeXBlGFAgASgJEhAKCElucHV0RGlyGFEg",
            "ASgJEhEKCU1hZ2ljQ29kZRhSIAEoCRIeChZUYXJnZXRHcm91bmREZWNvcmF0",
            "aW9uGFMgASgJEhUKDUZseURlY29yYXRpb24YVCABKAkSGAoQVGFyZ2V0RGVj",
            "b3JhdGlvbhhVIAEoCRISCgpMaW5lUmVuZGVyGFYgASgJEhEKCU5lZWRFbmVt",
            "eRhXIAEoCRIXCg9EZWxheURlY29yYXRpb24YWCABKAkSFwoPU3RhdGVEZWNv",
            "cmF0aW9uGFkgASgJEhgKEFNjcmVlbkRlY29yYXRpb24YWiABKAkSEwoLU2Nl",
            "bmVFZmZlY3QYWyABKAkSGAoQTW92ZVRhcmdldEVmZmVjdBhcIAEoCRIZChFU",
            "YXJnZXRQbGF5aW5nVHlwZRhdIAEoCRITCgtNdXNpY1dlYXBvbhheIAEoCRIU",
            "CgxNdXNpY0luanVyZWQYXyABKAkSEwoLQWN0aW9uSW5kZXgYYCABKAkSEAoI",
            "TW92ZVR5cGUYYSABKAkSEAoIU3BFZmZlY3QYYiABKAkSEwoLSGl0U3BFZmZl",
            "Y3QYYyABKAkSEQoJRnJlZUFuZ2xlGGQgASgJEhQKDFNob3dKb3lTdGljaxhl",
            "IAEoCRIQCghBZGRNYWdpYxhmIAEoCRIOCgZDYW1lcmEYZyABKAkSEgoKU2xv",
            "d0NhbWVyYRhoIAEoCRIUCgxCYXNlUGh5c2ljYWwYaSABKAkSEwoLQmFzZVNW",
            "UG9pbnQYaiABKAkSEgoKQWRkU1ZQb2ludBhrIAEoCRINCgVNb3ZpZRhsIAEo",
            "CRIQCghDb2xvckNoZxhtIAEoCRIQCghCYW5nZGluZxhuIAEoCRISCgpNYWdp",
            "Y3NCb29rGG8gASgJEhEKCVNlZWtTdHlsZRhwIAEoCRIOCgZDb21iYXQYcSAB",
            "KAkSEwoLQ2FtZXJhVHJhY2UYciABKAgSDQoFRnJhbWUYcyABKAkSEwoLTWFp",
            "blNraWxsSUQYdCABKAkSEQoJTmVlZE1vbmV5GHUgASgJEhEKCU5lZWRHb29k",
            "cxh2IAEoCRIZChFTaG93TmV4dERlbGF5VGltZRh3IAEoCRIcChRTaG93TmV3",
            "SGl0RGVjb3JhdGlvbhh4IAEoCWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.Game.Table.MagicsTable), global::Core.Game.Table.MagicsTable.Parser, new[]{ "Rows" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.Game.Table.Magics), global::Core.Game.Table.Magics.Parser, new[]{ "ID", "MagicNameID", "NextMagicID", "ParentMagicID", "MainMagicID", "SkillType", "OperateType", "DefanceStyle", "HitId", "RepelTime", "RepelStunTime", "RepelSpeed", "ExpCost", "Features", "Queue", "InjureType", "DelayDecoToMap", "PreSkillAction", "SkillAction", "EndSkillAction", "SkillDirection", "ToOcuupation", "TalkName", "LearnCondition", "AutoStart", "LearnTask", "LearnPoint", "PreMagicId", "HasDirection", "DamageType", "UseType", "FanWeiDescription", "Description", "Description2", "DescriptionNum", "CDTime", "InitCDTime", "BaseMagic", "ResetTarget", "BreakMagic", "IgnoreHitFlyType", "MagicTypeDes", "MagicType", "TargetPos", "TargetType", "AttackDistance", "ScanType", "MagicScripts", "ManyTimeDmage", "IntoneTime", "MoveDelay", "StepMove", "WitchTimeBreak", "WaringEffectConf", "DynamicShift", "PubCDTime", "AttackInterval", "MinAttackDistance", "MagicRange", "ClientManyTimeDmage", "MaxNum", "MagicTime", "MoveSpeed", "MoveDistance", "UseNum", "ResetTime", "ClientManyTimeDmageDelay", "DistanceDecay", "ClientMoveDistance", "MoveStyle", "MoveCondition", "AutoFindDistance", "HintTime", "TriggerCD", "TriggerType", "TriggerOdds", "TriggerPubCDTime", "MagicIcon", "MagicColor", "ActionType", "InputDir", "MagicCode", "TargetGroundDecoration", "FlyDecoration", "TargetDecoration", "LineRender", "NeedEnemy", "DelayDecoration", "StateDecoration", "ScreenDecoration", "SceneEffect", "MoveTargetEffect", "TargetPlayingType", "MusicWeapon", "MusicInjured", "ActionIndex", "MoveType", "SpEffect", "HitSpEffect", "FreeAngle", "ShowJoyStick", "AddMagic", "Camera", "SlowCamera", "BasePhysical", "BaseSVPoint", "AddSVPoint", "Movie", "ColorChg", "Bangding", "MagicsBook", "SeekStyle", "Combat", "CameraTrace", "Frame", "MainSkillID", "NeedMoney", "NeedGoods", "ShowNextDelayTime", "ShowNewHitDecoration" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class MagicsTable : pb::IMessage<MagicsTable>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MagicsTable> _parser = new pb::MessageParser<MagicsTable>(() => new MagicsTable());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MagicsTable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.Game.Table.MagicsTableReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MagicsTable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MagicsTable(MagicsTable other) : this() {
      rows_ = other.rows_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MagicsTable Clone() {
      return new MagicsTable(this);
    }

    /// <summary>Field number for the "rows" field.</summary>
    public const int RowsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Core.Game.Table.Magics> _repeated_rows_codec
        = pb::FieldCodec.ForMessage(10, global::Core.Game.Table.Magics.Parser);
    private readonly pbc::RepeatedField<global::Core.Game.Table.Magics> rows_ = new pbc::RepeatedField<global::Core.Game.Table.Magics>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.Game.Table.Magics> Rows {
      get { return rows_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MagicsTable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MagicsTable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!rows_.Equals(other.rows_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= rows_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      rows_.WriteTo(output, _repeated_rows_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      rows_.WriteTo(ref output, _repeated_rows_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += rows_.CalculateSize(_repeated_rows_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MagicsTable other) {
      if (other == null) {
        return;
      }
      rows_.Add(other.rows_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            rows_.AddEntriesFrom(input, _repeated_rows_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            rows_.AddEntriesFrom(ref input, _repeated_rows_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Magics : pb::IMessage<Magics>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Magics> _parser = new pb::MessageParser<Magics>(() => new Magics());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Magics> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.Game.Table.MagicsTableReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Magics() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Magics(Magics other) : this() {
      iD_ = other.iD_;
      magicNameID_ = other.magicNameID_;
      nextMagicID_ = other.nextMagicID_;
      parentMagicID_ = other.parentMagicID_;
      mainMagicID_ = other.mainMagicID_;
      skillType_ = other.skillType_;
      operateType_ = other.operateType_;
      defanceStyle_ = other.defanceStyle_;
      hitId_ = other.hitId_;
      repelTime_ = other.repelTime_;
      repelStunTime_ = other.repelStunTime_;
      repelSpeed_ = other.repelSpeed_;
      expCost_ = other.expCost_;
      features_ = other.features_;
      queue_ = other.queue_;
      injureType_ = other.injureType_;
      delayDecoToMap_ = other.delayDecoToMap_;
      preSkillAction_ = other.preSkillAction_;
      skillAction_ = other.skillAction_;
      endSkillAction_ = other.endSkillAction_;
      skillDirection_ = other.skillDirection_;
      toOcuupation_ = other.toOcuupation_;
      talkName_ = other.talkName_;
      learnCondition_ = other.learnCondition_;
      autoStart_ = other.autoStart_;
      learnTask_ = other.learnTask_;
      learnPoint_ = other.learnPoint_;
      preMagicId_ = other.preMagicId_;
      hasDirection_ = other.hasDirection_;
      damageType_ = other.damageType_;
      useType_ = other.useType_;
      fanWeiDescription_ = other.fanWeiDescription_;
      description_ = other.description_;
      description2_ = other.description2_;
      descriptionNum_ = other.descriptionNum_;
      cDTime_ = other.cDTime_;
      initCDTime_ = other.initCDTime_;
      baseMagic_ = other.baseMagic_;
      resetTarget_ = other.resetTarget_;
      breakMagic_ = other.breakMagic_;
      ignoreHitFlyType_ = other.ignoreHitFlyType_;
      magicTypeDes_ = other.magicTypeDes_;
      magicType_ = other.magicType_;
      targetPos_ = other.targetPos_;
      targetType_ = other.targetType_.Clone();
      attackDistance_ = other.attackDistance_;
      scanType_ = other.scanType_;
      magicScripts_ = other.magicScripts_;
      manyTimeDmage_ = other.manyTimeDmage_;
      intoneTime_ = other.intoneTime_;
      moveDelay_ = other.moveDelay_.Clone();
      stepMove_ = other.stepMove_;
      witchTimeBreak_ = other.witchTimeBreak_;
      waringEffectConf_ = other.waringEffectConf_;
      dynamicShift_ = other.dynamicShift_;
      pubCDTime_ = other.pubCDTime_;
      attackInterval_ = other.attackInterval_;
      minAttackDistance_ = other.minAttackDistance_;
      magicRange_ = other.magicRange_;
      clientManyTimeDmage_ = other.clientManyTimeDmage_;
      maxNum_ = other.maxNum_;
      magicTime_ = other.magicTime_;
      moveSpeed_ = other.moveSpeed_;
      moveDistance_ = other.moveDistance_;
      useNum_ = other.useNum_;
      resetTime_ = other.resetTime_;
      clientManyTimeDmageDelay_ = other.clientManyTimeDmageDelay_;
      distanceDecay_ = other.distanceDecay_;
      clientMoveDistance_ = other.clientMoveDistance_;
      moveStyle_ = other.moveStyle_;
      moveCondition_ = other.moveCondition_;
      autoFindDistance_ = other.autoFindDistance_;
      hintTime_ = other.hintTime_;
      triggerCD_ = other.triggerCD_;
      triggerType_ = other.triggerType_;
      triggerOdds_ = other.triggerOdds_;
      triggerPubCDTime_ = other.triggerPubCDTime_;
      magicIcon_ = other.magicIcon_;
      magicColor_ = other.magicColor_;
      actionType_ = other.actionType_;
      inputDir_ = other.inputDir_;
      magicCode_ = other.magicCode_;
      targetGroundDecoration_ = other.targetGroundDecoration_;
      flyDecoration_ = other.flyDecoration_;
      targetDecoration_ = other.targetDecoration_;
      lineRender_ = other.lineRender_;
      needEnemy_ = other.needEnemy_;
      delayDecoration_ = other.delayDecoration_;
      stateDecoration_ = other.stateDecoration_;
      screenDecoration_ = other.screenDecoration_;
      sceneEffect_ = other.sceneEffect_;
      moveTargetEffect_ = other.moveTargetEffect_;
      targetPlayingType_ = other.targetPlayingType_;
      musicWeapon_ = other.musicWeapon_;
      musicInjured_ = other.musicInjured_;
      actionIndex_ = other.actionIndex_;
      moveType_ = other.moveType_;
      spEffect_ = other.spEffect_;
      hitSpEffect_ = other.hitSpEffect_;
      freeAngle_ = other.freeAngle_;
      showJoyStick_ = other.showJoyStick_;
      addMagic_ = other.addMagic_;
      camera_ = other.camera_;
      slowCamera_ = other.slowCamera_;
      basePhysical_ = other.basePhysical_;
      baseSVPoint_ = other.baseSVPoint_;
      addSVPoint_ = other.addSVPoint_;
      movie_ = other.movie_;
      colorChg_ = other.colorChg_;
      bangding_ = other.bangding_;
      magicsBook_ = other.magicsBook_;
      seekStyle_ = other.seekStyle_;
      combat_ = other.combat_;
      cameraTrace_ = other.cameraTrace_;
      frame_ = other.frame_;
      mainSkillID_ = other.mainSkillID_;
      needMoney_ = other.needMoney_;
      needGoods_ = other.needGoods_;
      showNextDelayTime_ = other.showNextDelayTime_;
      showNewHitDecoration_ = other.showNewHitDecoration_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Magics Clone() {
      return new Magics(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private uint iD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "MagicNameID" field.</summary>
    public const int MagicNameIDFieldNumber = 2;
    private string magicNameID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MagicNameID {
      get { return magicNameID_; }
      set {
        magicNameID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "NextMagicID" field.</summary>
    public const int NextMagicIDFieldNumber = 3;
    private int nextMagicID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NextMagicID {
      get { return nextMagicID_; }
      set {
        nextMagicID_ = value;
      }
    }

    /// <summary>Field number for the "ParentMagicID" field.</summary>
    public const int ParentMagicIDFieldNumber = 4;
    private int parentMagicID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ParentMagicID {
      get { return parentMagicID_; }
      set {
        parentMagicID_ = value;
      }
    }

    /// <summary>Field number for the "MainMagicID" field.</summary>
    public const int MainMagicIDFieldNumber = 5;
    private int mainMagicID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MainMagicID {
      get { return mainMagicID_; }
      set {
        mainMagicID_ = value;
      }
    }

    /// <summary>Field number for the "SkillType" field.</summary>
    public const int SkillTypeFieldNumber = 6;
    private int skillType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillType {
      get { return skillType_; }
      set {
        skillType_ = value;
      }
    }

    /// <summary>Field number for the "OperateType" field.</summary>
    public const int OperateTypeFieldNumber = 7;
    private string operateType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OperateType {
      get { return operateType_; }
      set {
        operateType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DefanceStyle" field.</summary>
    public const int DefanceStyleFieldNumber = 8;
    private string defanceStyle_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DefanceStyle {
      get { return defanceStyle_; }
      set {
        defanceStyle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HitId" field.</summary>
    public const int HitIdFieldNumber = 9;
    private int hitId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HitId {
      get { return hitId_; }
      set {
        hitId_ = value;
      }
    }

    /// <summary>Field number for the "RepelTime" field.</summary>
    public const int RepelTimeFieldNumber = 10;
    private string repelTime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RepelTime {
      get { return repelTime_; }
      set {
        repelTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RepelStunTime" field.</summary>
    public const int RepelStunTimeFieldNumber = 11;
    private string repelStunTime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RepelStunTime {
      get { return repelStunTime_; }
      set {
        repelStunTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RepelSpeed" field.</summary>
    public const int RepelSpeedFieldNumber = 12;
    private string repelSpeed_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RepelSpeed {
      get { return repelSpeed_; }
      set {
        repelSpeed_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ExpCost" field.</summary>
    public const int ExpCostFieldNumber = 13;
    private string expCost_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExpCost {
      get { return expCost_; }
      set {
        expCost_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Features" field.</summary>
    public const int FeaturesFieldNumber = 14;
    private string features_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Features {
      get { return features_; }
      set {
        features_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Queue" field.</summary>
    public const int QueueFieldNumber = 15;
    private string queue_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Queue {
      get { return queue_; }
      set {
        queue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "InjureType" field.</summary>
    public const int InjureTypeFieldNumber = 16;
    private string injureType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InjureType {
      get { return injureType_; }
      set {
        injureType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DelayDecoToMap" field.</summary>
    public const int DelayDecoToMapFieldNumber = 17;
    private string delayDecoToMap_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DelayDecoToMap {
      get { return delayDecoToMap_; }
      set {
        delayDecoToMap_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PreSkillAction" field.</summary>
    public const int PreSkillActionFieldNumber = 18;
    private string preSkillAction_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PreSkillAction {
      get { return preSkillAction_; }
      set {
        preSkillAction_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SkillAction" field.</summary>
    public const int SkillActionFieldNumber = 19;
    private string skillAction_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillAction {
      get { return skillAction_; }
      set {
        skillAction_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EndSkillAction" field.</summary>
    public const int EndSkillActionFieldNumber = 20;
    private string endSkillAction_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EndSkillAction {
      get { return endSkillAction_; }
      set {
        endSkillAction_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SkillDirection" field.</summary>
    public const int SkillDirectionFieldNumber = 21;
    private int skillDirection_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillDirection {
      get { return skillDirection_; }
      set {
        skillDirection_ = value;
      }
    }

    /// <summary>Field number for the "ToOcuupation" field.</summary>
    public const int ToOcuupationFieldNumber = 22;
    private string toOcuupation_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ToOcuupation {
      get { return toOcuupation_; }
      set {
        toOcuupation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TalkName" field.</summary>
    public const int TalkNameFieldNumber = 23;
    private string talkName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TalkName {
      get { return talkName_; }
      set {
        talkName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LearnCondition" field.</summary>
    public const int LearnConditionFieldNumber = 24;
    private string learnCondition_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LearnCondition {
      get { return learnCondition_; }
      set {
        learnCondition_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AutoStart" field.</summary>
    public const int AutoStartFieldNumber = 25;
    private bool autoStart_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AutoStart {
      get { return autoStart_; }
      set {
        autoStart_ = value;
      }
    }

    /// <summary>Field number for the "LearnTask" field.</summary>
    public const int LearnTaskFieldNumber = 26;
    private uint learnTask_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LearnTask {
      get { return learnTask_; }
      set {
        learnTask_ = value;
      }
    }

    /// <summary>Field number for the "LearnPoint" field.</summary>
    public const int LearnPointFieldNumber = 27;
    private string learnPoint_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LearnPoint {
      get { return learnPoint_; }
      set {
        learnPoint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PreMagicId" field.</summary>
    public const int PreMagicIdFieldNumber = 28;
    private string preMagicId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PreMagicId {
      get { return preMagicId_; }
      set {
        preMagicId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HasDirection" field.</summary>
    public const int HasDirectionFieldNumber = 29;
    private string hasDirection_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HasDirection {
      get { return hasDirection_; }
      set {
        hasDirection_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DamageType" field.</summary>
    public const int DamageTypeFieldNumber = 30;
    private string damageType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DamageType {
      get { return damageType_; }
      set {
        damageType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UseType" field.</summary>
    public const int UseTypeFieldNumber = 31;
    private string useType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UseType {
      get { return useType_; }
      set {
        useType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FanWeiDescription" field.</summary>
    public const int FanWeiDescriptionFieldNumber = 32;
    private string fanWeiDescription_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FanWeiDescription {
      get { return fanWeiDescription_; }
      set {
        fanWeiDescription_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Description" field.</summary>
    public const int DescriptionFieldNumber = 33;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Description2" field.</summary>
    public const int Description2FieldNumber = 34;
    private string description2_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description2 {
      get { return description2_; }
      set {
        description2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DescriptionNum" field.</summary>
    public const int DescriptionNumFieldNumber = 35;
    private string descriptionNum_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DescriptionNum {
      get { return descriptionNum_; }
      set {
        descriptionNum_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CDTime" field.</summary>
    public const int CDTimeFieldNumber = 36;
    private long cDTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CDTime {
      get { return cDTime_; }
      set {
        cDTime_ = value;
      }
    }

    /// <summary>Field number for the "InitCDTime" field.</summary>
    public const int InitCDTimeFieldNumber = 37;
    private string initCDTime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InitCDTime {
      get { return initCDTime_; }
      set {
        initCDTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BaseMagic" field.</summary>
    public const int BaseMagicFieldNumber = 38;
    private string baseMagic_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BaseMagic {
      get { return baseMagic_; }
      set {
        baseMagic_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ResetTarget" field.</summary>
    public const int ResetTargetFieldNumber = 39;
    private string resetTarget_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResetTarget {
      get { return resetTarget_; }
      set {
        resetTarget_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BreakMagic" field.</summary>
    public const int BreakMagicFieldNumber = 40;
    private string breakMagic_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BreakMagic {
      get { return breakMagic_; }
      set {
        breakMagic_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IgnoreHitFlyType" field.</summary>
    public const int IgnoreHitFlyTypeFieldNumber = 41;
    private string ignoreHitFlyType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IgnoreHitFlyType {
      get { return ignoreHitFlyType_; }
      set {
        ignoreHitFlyType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MagicTypeDes" field.</summary>
    public const int MagicTypeDesFieldNumber = 42;
    private string magicTypeDes_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MagicTypeDes {
      get { return magicTypeDes_; }
      set {
        magicTypeDes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MagicType" field.</summary>
    public const int MagicTypeFieldNumber = 43;
    private string magicType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MagicType {
      get { return magicType_; }
      set {
        magicType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TargetPos" field.</summary>
    public const int TargetPosFieldNumber = 44;
    private string targetPos_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TargetPos {
      get { return targetPos_; }
      set {
        targetPos_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TargetType" field.</summary>
    public const int TargetTypeFieldNumber = 45;
    private static readonly pb::FieldCodec<int> _repeated_targetType_codec
        = pb::FieldCodec.ForInt32(362);
    private readonly pbc::RepeatedField<int> targetType_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> TargetType {
      get { return targetType_; }
    }

    /// <summary>Field number for the "AttackDistance" field.</summary>
    public const int AttackDistanceFieldNumber = 46;
    private string attackDistance_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AttackDistance {
      get { return attackDistance_; }
      set {
        attackDistance_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ScanType" field.</summary>
    public const int ScanTypeFieldNumber = 47;
    private string scanType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ScanType {
      get { return scanType_; }
      set {
        scanType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MagicScripts" field.</summary>
    public const int MagicScriptsFieldNumber = 48;
    private string magicScripts_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MagicScripts {
      get { return magicScripts_; }
      set {
        magicScripts_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ManyTimeDmage" field.</summary>
    public const int ManyTimeDmageFieldNumber = 49;
    private string manyTimeDmage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ManyTimeDmage {
      get { return manyTimeDmage_; }
      set {
        manyTimeDmage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IntoneTime" field.</summary>
    public const int IntoneTimeFieldNumber = 50;
    private string intoneTime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IntoneTime {
      get { return intoneTime_; }
      set {
        intoneTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MoveDelay" field.</summary>
    public const int MoveDelayFieldNumber = 51;
    private static readonly pb::FieldCodec<int> _repeated_moveDelay_codec
        = pb::FieldCodec.ForInt32(410);
    private readonly pbc::RepeatedField<int> moveDelay_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> MoveDelay {
      get { return moveDelay_; }
    }

    /// <summary>Field number for the "StepMove" field.</summary>
    public const int StepMoveFieldNumber = 52;
    private string stepMove_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StepMove {
      get { return stepMove_; }
      set {
        stepMove_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WitchTimeBreak" field.</summary>
    public const int WitchTimeBreakFieldNumber = 53;
    private string witchTimeBreak_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WitchTimeBreak {
      get { return witchTimeBreak_; }
      set {
        witchTimeBreak_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WaringEffectConf" field.</summary>
    public const int WaringEffectConfFieldNumber = 54;
    private string waringEffectConf_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WaringEffectConf {
      get { return waringEffectConf_; }
      set {
        waringEffectConf_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DynamicShift" field.</summary>
    public const int DynamicShiftFieldNumber = 55;
    private string dynamicShift_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DynamicShift {
      get { return dynamicShift_; }
      set {
        dynamicShift_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PubCDTime" field.</summary>
    public const int PubCDTimeFieldNumber = 56;
    private string pubCDTime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PubCDTime {
      get { return pubCDTime_; }
      set {
        pubCDTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AttackInterval" field.</summary>
    public const int AttackIntervalFieldNumber = 57;
    private string attackInterval_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AttackInterval {
      get { return attackInterval_; }
      set {
        attackInterval_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MinAttackDistance" field.</summary>
    public const int MinAttackDistanceFieldNumber = 58;
    private string minAttackDistance_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MinAttackDistance {
      get { return minAttackDistance_; }
      set {
        minAttackDistance_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MagicRange" field.</summary>
    public const int MagicRangeFieldNumber = 59;
    private string magicRange_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MagicRange {
      get { return magicRange_; }
      set {
        magicRange_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ClientManyTimeDmage" field.</summary>
    public const int ClientManyTimeDmageFieldNumber = 60;
    private string clientManyTimeDmage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientManyTimeDmage {
      get { return clientManyTimeDmage_; }
      set {
        clientManyTimeDmage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MaxNum" field.</summary>
    public const int MaxNumFieldNumber = 61;
    private string maxNum_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MaxNum {
      get { return maxNum_; }
      set {
        maxNum_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MagicTime" field.</summary>
    public const int MagicTimeFieldNumber = 62;
    private string magicTime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MagicTime {
      get { return magicTime_; }
      set {
        magicTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MoveSpeed" field.</summary>
    public const int MoveSpeedFieldNumber = 63;
    private int moveSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MoveSpeed {
      get { return moveSpeed_; }
      set {
        moveSpeed_ = value;
      }
    }

    /// <summary>Field number for the "MoveDistance" field.</summary>
    public const int MoveDistanceFieldNumber = 64;
    private string moveDistance_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MoveDistance {
      get { return moveDistance_; }
      set {
        moveDistance_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UseNum" field.</summary>
    public const int UseNumFieldNumber = 65;
    private string useNum_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UseNum {
      get { return useNum_; }
      set {
        useNum_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ResetTime" field.</summary>
    public const int ResetTimeFieldNumber = 66;
    private string resetTime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResetTime {
      get { return resetTime_; }
      set {
        resetTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ClientManyTimeDmageDelay" field.</summary>
    public const int ClientManyTimeDmageDelayFieldNumber = 67;
    private string clientManyTimeDmageDelay_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientManyTimeDmageDelay {
      get { return clientManyTimeDmageDelay_; }
      set {
        clientManyTimeDmageDelay_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DistanceDecay" field.</summary>
    public const int DistanceDecayFieldNumber = 68;
    private string distanceDecay_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DistanceDecay {
      get { return distanceDecay_; }
      set {
        distanceDecay_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ClientMoveDistance" field.</summary>
    public const int ClientMoveDistanceFieldNumber = 69;
    private int clientMoveDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ClientMoveDistance {
      get { return clientMoveDistance_; }
      set {
        clientMoveDistance_ = value;
      }
    }

    /// <summary>Field number for the "MoveStyle" field.</summary>
    public const int MoveStyleFieldNumber = 70;
    private string moveStyle_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MoveStyle {
      get { return moveStyle_; }
      set {
        moveStyle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MoveCondition" field.</summary>
    public const int MoveConditionFieldNumber = 71;
    private string moveCondition_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MoveCondition {
      get { return moveCondition_; }
      set {
        moveCondition_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AutoFindDistance" field.</summary>
    public const int AutoFindDistanceFieldNumber = 72;
    private string autoFindDistance_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AutoFindDistance {
      get { return autoFindDistance_; }
      set {
        autoFindDistance_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HintTime" field.</summary>
    public const int HintTimeFieldNumber = 73;
    private string hintTime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HintTime {
      get { return hintTime_; }
      set {
        hintTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TriggerCD" field.</summary>
    public const int TriggerCDFieldNumber = 74;
    private string triggerCD_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TriggerCD {
      get { return triggerCD_; }
      set {
        triggerCD_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TriggerType" field.</summary>
    public const int TriggerTypeFieldNumber = 75;
    private string triggerType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TriggerType {
      get { return triggerType_; }
      set {
        triggerType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TriggerOdds" field.</summary>
    public const int TriggerOddsFieldNumber = 76;
    private string triggerOdds_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TriggerOdds {
      get { return triggerOdds_; }
      set {
        triggerOdds_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TriggerPubCDTime" field.</summary>
    public const int TriggerPubCDTimeFieldNumber = 77;
    private string triggerPubCDTime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TriggerPubCDTime {
      get { return triggerPubCDTime_; }
      set {
        triggerPubCDTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MagicIcon" field.</summary>
    public const int MagicIconFieldNumber = 78;
    private string magicIcon_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MagicIcon {
      get { return magicIcon_; }
      set {
        magicIcon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MagicColor" field.</summary>
    public const int MagicColorFieldNumber = 79;
    private string magicColor_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MagicColor {
      get { return magicColor_; }
      set {
        magicColor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ActionType" field.</summary>
    public const int ActionTypeFieldNumber = 80;
    private string actionType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ActionType {
      get { return actionType_; }
      set {
        actionType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "InputDir" field.</summary>
    public const int InputDirFieldNumber = 81;
    private string inputDir_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InputDir {
      get { return inputDir_; }
      set {
        inputDir_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MagicCode" field.</summary>
    public const int MagicCodeFieldNumber = 82;
    private string magicCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MagicCode {
      get { return magicCode_; }
      set {
        magicCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TargetGroundDecoration" field.</summary>
    public const int TargetGroundDecorationFieldNumber = 83;
    private string targetGroundDecoration_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TargetGroundDecoration {
      get { return targetGroundDecoration_; }
      set {
        targetGroundDecoration_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FlyDecoration" field.</summary>
    public const int FlyDecorationFieldNumber = 84;
    private string flyDecoration_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FlyDecoration {
      get { return flyDecoration_; }
      set {
        flyDecoration_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TargetDecoration" field.</summary>
    public const int TargetDecorationFieldNumber = 85;
    private string targetDecoration_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TargetDecoration {
      get { return targetDecoration_; }
      set {
        targetDecoration_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LineRender" field.</summary>
    public const int LineRenderFieldNumber = 86;
    private string lineRender_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LineRender {
      get { return lineRender_; }
      set {
        lineRender_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "NeedEnemy" field.</summary>
    public const int NeedEnemyFieldNumber = 87;
    private string needEnemy_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NeedEnemy {
      get { return needEnemy_; }
      set {
        needEnemy_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DelayDecoration" field.</summary>
    public const int DelayDecorationFieldNumber = 88;
    private string delayDecoration_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DelayDecoration {
      get { return delayDecoration_; }
      set {
        delayDecoration_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "StateDecoration" field.</summary>
    public const int StateDecorationFieldNumber = 89;
    private string stateDecoration_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StateDecoration {
      get { return stateDecoration_; }
      set {
        stateDecoration_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ScreenDecoration" field.</summary>
    public const int ScreenDecorationFieldNumber = 90;
    private string screenDecoration_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ScreenDecoration {
      get { return screenDecoration_; }
      set {
        screenDecoration_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SceneEffect" field.</summary>
    public const int SceneEffectFieldNumber = 91;
    private string sceneEffect_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SceneEffect {
      get { return sceneEffect_; }
      set {
        sceneEffect_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MoveTargetEffect" field.</summary>
    public const int MoveTargetEffectFieldNumber = 92;
    private string moveTargetEffect_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MoveTargetEffect {
      get { return moveTargetEffect_; }
      set {
        moveTargetEffect_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TargetPlayingType" field.</summary>
    public const int TargetPlayingTypeFieldNumber = 93;
    private string targetPlayingType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TargetPlayingType {
      get { return targetPlayingType_; }
      set {
        targetPlayingType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MusicWeapon" field.</summary>
    public const int MusicWeaponFieldNumber = 94;
    private string musicWeapon_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MusicWeapon {
      get { return musicWeapon_; }
      set {
        musicWeapon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MusicInjured" field.</summary>
    public const int MusicInjuredFieldNumber = 95;
    private string musicInjured_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MusicInjured {
      get { return musicInjured_; }
      set {
        musicInjured_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ActionIndex" field.</summary>
    public const int ActionIndexFieldNumber = 96;
    private string actionIndex_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ActionIndex {
      get { return actionIndex_; }
      set {
        actionIndex_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MoveType" field.</summary>
    public const int MoveTypeFieldNumber = 97;
    private string moveType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MoveType {
      get { return moveType_; }
      set {
        moveType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SpEffect" field.</summary>
    public const int SpEffectFieldNumber = 98;
    private string spEffect_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SpEffect {
      get { return spEffect_; }
      set {
        spEffect_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HitSpEffect" field.</summary>
    public const int HitSpEffectFieldNumber = 99;
    private string hitSpEffect_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HitSpEffect {
      get { return hitSpEffect_; }
      set {
        hitSpEffect_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FreeAngle" field.</summary>
    public const int FreeAngleFieldNumber = 100;
    private string freeAngle_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FreeAngle {
      get { return freeAngle_; }
      set {
        freeAngle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ShowJoyStick" field.</summary>
    public const int ShowJoyStickFieldNumber = 101;
    private string showJoyStick_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShowJoyStick {
      get { return showJoyStick_; }
      set {
        showJoyStick_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AddMagic" field.</summary>
    public const int AddMagicFieldNumber = 102;
    private string addMagic_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AddMagic {
      get { return addMagic_; }
      set {
        addMagic_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Camera" field.</summary>
    public const int CameraFieldNumber = 103;
    private string camera_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Camera {
      get { return camera_; }
      set {
        camera_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SlowCamera" field.</summary>
    public const int SlowCameraFieldNumber = 104;
    private string slowCamera_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SlowCamera {
      get { return slowCamera_; }
      set {
        slowCamera_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BasePhysical" field.</summary>
    public const int BasePhysicalFieldNumber = 105;
    private string basePhysical_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BasePhysical {
      get { return basePhysical_; }
      set {
        basePhysical_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BaseSVPoint" field.</summary>
    public const int BaseSVPointFieldNumber = 106;
    private string baseSVPoint_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BaseSVPoint {
      get { return baseSVPoint_; }
      set {
        baseSVPoint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AddSVPoint" field.</summary>
    public const int AddSVPointFieldNumber = 107;
    private string addSVPoint_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AddSVPoint {
      get { return addSVPoint_; }
      set {
        addSVPoint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Movie" field.</summary>
    public const int MovieFieldNumber = 108;
    private string movie_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Movie {
      get { return movie_; }
      set {
        movie_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ColorChg" field.</summary>
    public const int ColorChgFieldNumber = 109;
    private string colorChg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ColorChg {
      get { return colorChg_; }
      set {
        colorChg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Bangding" field.</summary>
    public const int BangdingFieldNumber = 110;
    private string bangding_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Bangding {
      get { return bangding_; }
      set {
        bangding_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MagicsBook" field.</summary>
    public const int MagicsBookFieldNumber = 111;
    private string magicsBook_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MagicsBook {
      get { return magicsBook_; }
      set {
        magicsBook_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SeekStyle" field.</summary>
    public const int SeekStyleFieldNumber = 112;
    private string seekStyle_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SeekStyle {
      get { return seekStyle_; }
      set {
        seekStyle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Combat" field.</summary>
    public const int CombatFieldNumber = 113;
    private string combat_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Combat {
      get { return combat_; }
      set {
        combat_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CameraTrace" field.</summary>
    public const int CameraTraceFieldNumber = 114;
    private bool cameraTrace_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CameraTrace {
      get { return cameraTrace_; }
      set {
        cameraTrace_ = value;
      }
    }

    /// <summary>Field number for the "Frame" field.</summary>
    public const int FrameFieldNumber = 115;
    private string frame_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Frame {
      get { return frame_; }
      set {
        frame_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MainSkillID" field.</summary>
    public const int MainSkillIDFieldNumber = 116;
    private string mainSkillID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MainSkillID {
      get { return mainSkillID_; }
      set {
        mainSkillID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "NeedMoney" field.</summary>
    public const int NeedMoneyFieldNumber = 117;
    private string needMoney_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NeedMoney {
      get { return needMoney_; }
      set {
        needMoney_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "NeedGoods" field.</summary>
    public const int NeedGoodsFieldNumber = 118;
    private string needGoods_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NeedGoods {
      get { return needGoods_; }
      set {
        needGoods_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ShowNextDelayTime" field.</summary>
    public const int ShowNextDelayTimeFieldNumber = 119;
    private string showNextDelayTime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShowNextDelayTime {
      get { return showNextDelayTime_; }
      set {
        showNextDelayTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ShowNewHitDecoration" field.</summary>
    public const int ShowNewHitDecorationFieldNumber = 120;
    private string showNewHitDecoration_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShowNewHitDecoration {
      get { return showNewHitDecoration_; }
      set {
        showNewHitDecoration_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Magics);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Magics other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (MagicNameID != other.MagicNameID) return false;
      if (NextMagicID != other.NextMagicID) return false;
      if (ParentMagicID != other.ParentMagicID) return false;
      if (MainMagicID != other.MainMagicID) return false;
      if (SkillType != other.SkillType) return false;
      if (OperateType != other.OperateType) return false;
      if (DefanceStyle != other.DefanceStyle) return false;
      if (HitId != other.HitId) return false;
      if (RepelTime != other.RepelTime) return false;
      if (RepelStunTime != other.RepelStunTime) return false;
      if (RepelSpeed != other.RepelSpeed) return false;
      if (ExpCost != other.ExpCost) return false;
      if (Features != other.Features) return false;
      if (Queue != other.Queue) return false;
      if (InjureType != other.InjureType) return false;
      if (DelayDecoToMap != other.DelayDecoToMap) return false;
      if (PreSkillAction != other.PreSkillAction) return false;
      if (SkillAction != other.SkillAction) return false;
      if (EndSkillAction != other.EndSkillAction) return false;
      if (SkillDirection != other.SkillDirection) return false;
      if (ToOcuupation != other.ToOcuupation) return false;
      if (TalkName != other.TalkName) return false;
      if (LearnCondition != other.LearnCondition) return false;
      if (AutoStart != other.AutoStart) return false;
      if (LearnTask != other.LearnTask) return false;
      if (LearnPoint != other.LearnPoint) return false;
      if (PreMagicId != other.PreMagicId) return false;
      if (HasDirection != other.HasDirection) return false;
      if (DamageType != other.DamageType) return false;
      if (UseType != other.UseType) return false;
      if (FanWeiDescription != other.FanWeiDescription) return false;
      if (Description != other.Description) return false;
      if (Description2 != other.Description2) return false;
      if (DescriptionNum != other.DescriptionNum) return false;
      if (CDTime != other.CDTime) return false;
      if (InitCDTime != other.InitCDTime) return false;
      if (BaseMagic != other.BaseMagic) return false;
      if (ResetTarget != other.ResetTarget) return false;
      if (BreakMagic != other.BreakMagic) return false;
      if (IgnoreHitFlyType != other.IgnoreHitFlyType) return false;
      if (MagicTypeDes != other.MagicTypeDes) return false;
      if (MagicType != other.MagicType) return false;
      if (TargetPos != other.TargetPos) return false;
      if(!targetType_.Equals(other.targetType_)) return false;
      if (AttackDistance != other.AttackDistance) return false;
      if (ScanType != other.ScanType) return false;
      if (MagicScripts != other.MagicScripts) return false;
      if (ManyTimeDmage != other.ManyTimeDmage) return false;
      if (IntoneTime != other.IntoneTime) return false;
      if(!moveDelay_.Equals(other.moveDelay_)) return false;
      if (StepMove != other.StepMove) return false;
      if (WitchTimeBreak != other.WitchTimeBreak) return false;
      if (WaringEffectConf != other.WaringEffectConf) return false;
      if (DynamicShift != other.DynamicShift) return false;
      if (PubCDTime != other.PubCDTime) return false;
      if (AttackInterval != other.AttackInterval) return false;
      if (MinAttackDistance != other.MinAttackDistance) return false;
      if (MagicRange != other.MagicRange) return false;
      if (ClientManyTimeDmage != other.ClientManyTimeDmage) return false;
      if (MaxNum != other.MaxNum) return false;
      if (MagicTime != other.MagicTime) return false;
      if (MoveSpeed != other.MoveSpeed) return false;
      if (MoveDistance != other.MoveDistance) return false;
      if (UseNum != other.UseNum) return false;
      if (ResetTime != other.ResetTime) return false;
      if (ClientManyTimeDmageDelay != other.ClientManyTimeDmageDelay) return false;
      if (DistanceDecay != other.DistanceDecay) return false;
      if (ClientMoveDistance != other.ClientMoveDistance) return false;
      if (MoveStyle != other.MoveStyle) return false;
      if (MoveCondition != other.MoveCondition) return false;
      if (AutoFindDistance != other.AutoFindDistance) return false;
      if (HintTime != other.HintTime) return false;
      if (TriggerCD != other.TriggerCD) return false;
      if (TriggerType != other.TriggerType) return false;
      if (TriggerOdds != other.TriggerOdds) return false;
      if (TriggerPubCDTime != other.TriggerPubCDTime) return false;
      if (MagicIcon != other.MagicIcon) return false;
      if (MagicColor != other.MagicColor) return false;
      if (ActionType != other.ActionType) return false;
      if (InputDir != other.InputDir) return false;
      if (MagicCode != other.MagicCode) return false;
      if (TargetGroundDecoration != other.TargetGroundDecoration) return false;
      if (FlyDecoration != other.FlyDecoration) return false;
      if (TargetDecoration != other.TargetDecoration) return false;
      if (LineRender != other.LineRender) return false;
      if (NeedEnemy != other.NeedEnemy) return false;
      if (DelayDecoration != other.DelayDecoration) return false;
      if (StateDecoration != other.StateDecoration) return false;
      if (ScreenDecoration != other.ScreenDecoration) return false;
      if (SceneEffect != other.SceneEffect) return false;
      if (MoveTargetEffect != other.MoveTargetEffect) return false;
      if (TargetPlayingType != other.TargetPlayingType) return false;
      if (MusicWeapon != other.MusicWeapon) return false;
      if (MusicInjured != other.MusicInjured) return false;
      if (ActionIndex != other.ActionIndex) return false;
      if (MoveType != other.MoveType) return false;
      if (SpEffect != other.SpEffect) return false;
      if (HitSpEffect != other.HitSpEffect) return false;
      if (FreeAngle != other.FreeAngle) return false;
      if (ShowJoyStick != other.ShowJoyStick) return false;
      if (AddMagic != other.AddMagic) return false;
      if (Camera != other.Camera) return false;
      if (SlowCamera != other.SlowCamera) return false;
      if (BasePhysical != other.BasePhysical) return false;
      if (BaseSVPoint != other.BaseSVPoint) return false;
      if (AddSVPoint != other.AddSVPoint) return false;
      if (Movie != other.Movie) return false;
      if (ColorChg != other.ColorChg) return false;
      if (Bangding != other.Bangding) return false;
      if (MagicsBook != other.MagicsBook) return false;
      if (SeekStyle != other.SeekStyle) return false;
      if (Combat != other.Combat) return false;
      if (CameraTrace != other.CameraTrace) return false;
      if (Frame != other.Frame) return false;
      if (MainSkillID != other.MainSkillID) return false;
      if (NeedMoney != other.NeedMoney) return false;
      if (NeedGoods != other.NeedGoods) return false;
      if (ShowNextDelayTime != other.ShowNextDelayTime) return false;
      if (ShowNewHitDecoration != other.ShowNewHitDecoration) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (MagicNameID.Length != 0) hash ^= MagicNameID.GetHashCode();
      if (NextMagicID != 0) hash ^= NextMagicID.GetHashCode();
      if (ParentMagicID != 0) hash ^= ParentMagicID.GetHashCode();
      if (MainMagicID != 0) hash ^= MainMagicID.GetHashCode();
      if (SkillType != 0) hash ^= SkillType.GetHashCode();
      if (OperateType.Length != 0) hash ^= OperateType.GetHashCode();
      if (DefanceStyle.Length != 0) hash ^= DefanceStyle.GetHashCode();
      if (HitId != 0) hash ^= HitId.GetHashCode();
      if (RepelTime.Length != 0) hash ^= RepelTime.GetHashCode();
      if (RepelStunTime.Length != 0) hash ^= RepelStunTime.GetHashCode();
      if (RepelSpeed.Length != 0) hash ^= RepelSpeed.GetHashCode();
      if (ExpCost.Length != 0) hash ^= ExpCost.GetHashCode();
      if (Features.Length != 0) hash ^= Features.GetHashCode();
      if (Queue.Length != 0) hash ^= Queue.GetHashCode();
      if (InjureType.Length != 0) hash ^= InjureType.GetHashCode();
      if (DelayDecoToMap.Length != 0) hash ^= DelayDecoToMap.GetHashCode();
      if (PreSkillAction.Length != 0) hash ^= PreSkillAction.GetHashCode();
      if (SkillAction.Length != 0) hash ^= SkillAction.GetHashCode();
      if (EndSkillAction.Length != 0) hash ^= EndSkillAction.GetHashCode();
      if (SkillDirection != 0) hash ^= SkillDirection.GetHashCode();
      if (ToOcuupation.Length != 0) hash ^= ToOcuupation.GetHashCode();
      if (TalkName.Length != 0) hash ^= TalkName.GetHashCode();
      if (LearnCondition.Length != 0) hash ^= LearnCondition.GetHashCode();
      if (AutoStart != false) hash ^= AutoStart.GetHashCode();
      if (LearnTask != 0) hash ^= LearnTask.GetHashCode();
      if (LearnPoint.Length != 0) hash ^= LearnPoint.GetHashCode();
      if (PreMagicId.Length != 0) hash ^= PreMagicId.GetHashCode();
      if (HasDirection.Length != 0) hash ^= HasDirection.GetHashCode();
      if (DamageType.Length != 0) hash ^= DamageType.GetHashCode();
      if (UseType.Length != 0) hash ^= UseType.GetHashCode();
      if (FanWeiDescription.Length != 0) hash ^= FanWeiDescription.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Description2.Length != 0) hash ^= Description2.GetHashCode();
      if (DescriptionNum.Length != 0) hash ^= DescriptionNum.GetHashCode();
      if (CDTime != 0L) hash ^= CDTime.GetHashCode();
      if (InitCDTime.Length != 0) hash ^= InitCDTime.GetHashCode();
      if (BaseMagic.Length != 0) hash ^= BaseMagic.GetHashCode();
      if (ResetTarget.Length != 0) hash ^= ResetTarget.GetHashCode();
      if (BreakMagic.Length != 0) hash ^= BreakMagic.GetHashCode();
      if (IgnoreHitFlyType.Length != 0) hash ^= IgnoreHitFlyType.GetHashCode();
      if (MagicTypeDes.Length != 0) hash ^= MagicTypeDes.GetHashCode();
      if (MagicType.Length != 0) hash ^= MagicType.GetHashCode();
      if (TargetPos.Length != 0) hash ^= TargetPos.GetHashCode();
      hash ^= targetType_.GetHashCode();
      if (AttackDistance.Length != 0) hash ^= AttackDistance.GetHashCode();
      if (ScanType.Length != 0) hash ^= ScanType.GetHashCode();
      if (MagicScripts.Length != 0) hash ^= MagicScripts.GetHashCode();
      if (ManyTimeDmage.Length != 0) hash ^= ManyTimeDmage.GetHashCode();
      if (IntoneTime.Length != 0) hash ^= IntoneTime.GetHashCode();
      hash ^= moveDelay_.GetHashCode();
      if (StepMove.Length != 0) hash ^= StepMove.GetHashCode();
      if (WitchTimeBreak.Length != 0) hash ^= WitchTimeBreak.GetHashCode();
      if (WaringEffectConf.Length != 0) hash ^= WaringEffectConf.GetHashCode();
      if (DynamicShift.Length != 0) hash ^= DynamicShift.GetHashCode();
      if (PubCDTime.Length != 0) hash ^= PubCDTime.GetHashCode();
      if (AttackInterval.Length != 0) hash ^= AttackInterval.GetHashCode();
      if (MinAttackDistance.Length != 0) hash ^= MinAttackDistance.GetHashCode();
      if (MagicRange.Length != 0) hash ^= MagicRange.GetHashCode();
      if (ClientManyTimeDmage.Length != 0) hash ^= ClientManyTimeDmage.GetHashCode();
      if (MaxNum.Length != 0) hash ^= MaxNum.GetHashCode();
      if (MagicTime.Length != 0) hash ^= MagicTime.GetHashCode();
      if (MoveSpeed != 0) hash ^= MoveSpeed.GetHashCode();
      if (MoveDistance.Length != 0) hash ^= MoveDistance.GetHashCode();
      if (UseNum.Length != 0) hash ^= UseNum.GetHashCode();
      if (ResetTime.Length != 0) hash ^= ResetTime.GetHashCode();
      if (ClientManyTimeDmageDelay.Length != 0) hash ^= ClientManyTimeDmageDelay.GetHashCode();
      if (DistanceDecay.Length != 0) hash ^= DistanceDecay.GetHashCode();
      if (ClientMoveDistance != 0) hash ^= ClientMoveDistance.GetHashCode();
      if (MoveStyle.Length != 0) hash ^= MoveStyle.GetHashCode();
      if (MoveCondition.Length != 0) hash ^= MoveCondition.GetHashCode();
      if (AutoFindDistance.Length != 0) hash ^= AutoFindDistance.GetHashCode();
      if (HintTime.Length != 0) hash ^= HintTime.GetHashCode();
      if (TriggerCD.Length != 0) hash ^= TriggerCD.GetHashCode();
      if (TriggerType.Length != 0) hash ^= TriggerType.GetHashCode();
      if (TriggerOdds.Length != 0) hash ^= TriggerOdds.GetHashCode();
      if (TriggerPubCDTime.Length != 0) hash ^= TriggerPubCDTime.GetHashCode();
      if (MagicIcon.Length != 0) hash ^= MagicIcon.GetHashCode();
      if (MagicColor.Length != 0) hash ^= MagicColor.GetHashCode();
      if (ActionType.Length != 0) hash ^= ActionType.GetHashCode();
      if (InputDir.Length != 0) hash ^= InputDir.GetHashCode();
      if (MagicCode.Length != 0) hash ^= MagicCode.GetHashCode();
      if (TargetGroundDecoration.Length != 0) hash ^= TargetGroundDecoration.GetHashCode();
      if (FlyDecoration.Length != 0) hash ^= FlyDecoration.GetHashCode();
      if (TargetDecoration.Length != 0) hash ^= TargetDecoration.GetHashCode();
      if (LineRender.Length != 0) hash ^= LineRender.GetHashCode();
      if (NeedEnemy.Length != 0) hash ^= NeedEnemy.GetHashCode();
      if (DelayDecoration.Length != 0) hash ^= DelayDecoration.GetHashCode();
      if (StateDecoration.Length != 0) hash ^= StateDecoration.GetHashCode();
      if (ScreenDecoration.Length != 0) hash ^= ScreenDecoration.GetHashCode();
      if (SceneEffect.Length != 0) hash ^= SceneEffect.GetHashCode();
      if (MoveTargetEffect.Length != 0) hash ^= MoveTargetEffect.GetHashCode();
      if (TargetPlayingType.Length != 0) hash ^= TargetPlayingType.GetHashCode();
      if (MusicWeapon.Length != 0) hash ^= MusicWeapon.GetHashCode();
      if (MusicInjured.Length != 0) hash ^= MusicInjured.GetHashCode();
      if (ActionIndex.Length != 0) hash ^= ActionIndex.GetHashCode();
      if (MoveType.Length != 0) hash ^= MoveType.GetHashCode();
      if (SpEffect.Length != 0) hash ^= SpEffect.GetHashCode();
      if (HitSpEffect.Length != 0) hash ^= HitSpEffect.GetHashCode();
      if (FreeAngle.Length != 0) hash ^= FreeAngle.GetHashCode();
      if (ShowJoyStick.Length != 0) hash ^= ShowJoyStick.GetHashCode();
      if (AddMagic.Length != 0) hash ^= AddMagic.GetHashCode();
      if (Camera.Length != 0) hash ^= Camera.GetHashCode();
      if (SlowCamera.Length != 0) hash ^= SlowCamera.GetHashCode();
      if (BasePhysical.Length != 0) hash ^= BasePhysical.GetHashCode();
      if (BaseSVPoint.Length != 0) hash ^= BaseSVPoint.GetHashCode();
      if (AddSVPoint.Length != 0) hash ^= AddSVPoint.GetHashCode();
      if (Movie.Length != 0) hash ^= Movie.GetHashCode();
      if (ColorChg.Length != 0) hash ^= ColorChg.GetHashCode();
      if (Bangding.Length != 0) hash ^= Bangding.GetHashCode();
      if (MagicsBook.Length != 0) hash ^= MagicsBook.GetHashCode();
      if (SeekStyle.Length != 0) hash ^= SeekStyle.GetHashCode();
      if (Combat.Length != 0) hash ^= Combat.GetHashCode();
      if (CameraTrace != false) hash ^= CameraTrace.GetHashCode();
      if (Frame.Length != 0) hash ^= Frame.GetHashCode();
      if (MainSkillID.Length != 0) hash ^= MainSkillID.GetHashCode();
      if (NeedMoney.Length != 0) hash ^= NeedMoney.GetHashCode();
      if (NeedGoods.Length != 0) hash ^= NeedGoods.GetHashCode();
      if (ShowNextDelayTime.Length != 0) hash ^= ShowNextDelayTime.GetHashCode();
      if (ShowNewHitDecoration.Length != 0) hash ^= ShowNewHitDecoration.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ID);
      }
      if (MagicNameID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MagicNameID);
      }
      if (NextMagicID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NextMagicID);
      }
      if (ParentMagicID != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ParentMagicID);
      }
      if (MainMagicID != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MainMagicID);
      }
      if (SkillType != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(SkillType);
      }
      if (OperateType.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(OperateType);
      }
      if (DefanceStyle.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(DefanceStyle);
      }
      if (HitId != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(HitId);
      }
      if (RepelTime.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(RepelTime);
      }
      if (RepelStunTime.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(RepelStunTime);
      }
      if (RepelSpeed.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(RepelSpeed);
      }
      if (ExpCost.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(ExpCost);
      }
      if (Features.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Features);
      }
      if (Queue.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Queue);
      }
      if (InjureType.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(InjureType);
      }
      if (DelayDecoToMap.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(DelayDecoToMap);
      }
      if (PreSkillAction.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(PreSkillAction);
      }
      if (SkillAction.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(SkillAction);
      }
      if (EndSkillAction.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(EndSkillAction);
      }
      if (SkillDirection != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(SkillDirection);
      }
      if (ToOcuupation.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(ToOcuupation);
      }
      if (TalkName.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(TalkName);
      }
      if (LearnCondition.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(LearnCondition);
      }
      if (AutoStart != false) {
        output.WriteRawTag(200, 1);
        output.WriteBool(AutoStart);
      }
      if (LearnTask != 0) {
        output.WriteRawTag(208, 1);
        output.WriteUInt32(LearnTask);
      }
      if (LearnPoint.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(LearnPoint);
      }
      if (PreMagicId.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteString(PreMagicId);
      }
      if (HasDirection.Length != 0) {
        output.WriteRawTag(234, 1);
        output.WriteString(HasDirection);
      }
      if (DamageType.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(DamageType);
      }
      if (UseType.Length != 0) {
        output.WriteRawTag(250, 1);
        output.WriteString(UseType);
      }
      if (FanWeiDescription.Length != 0) {
        output.WriteRawTag(130, 2);
        output.WriteString(FanWeiDescription);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(138, 2);
        output.WriteString(Description);
      }
      if (Description2.Length != 0) {
        output.WriteRawTag(146, 2);
        output.WriteString(Description2);
      }
      if (DescriptionNum.Length != 0) {
        output.WriteRawTag(154, 2);
        output.WriteString(DescriptionNum);
      }
      if (CDTime != 0L) {
        output.WriteRawTag(160, 2);
        output.WriteInt64(CDTime);
      }
      if (InitCDTime.Length != 0) {
        output.WriteRawTag(170, 2);
        output.WriteString(InitCDTime);
      }
      if (BaseMagic.Length != 0) {
        output.WriteRawTag(178, 2);
        output.WriteString(BaseMagic);
      }
      if (ResetTarget.Length != 0) {
        output.WriteRawTag(186, 2);
        output.WriteString(ResetTarget);
      }
      if (BreakMagic.Length != 0) {
        output.WriteRawTag(194, 2);
        output.WriteString(BreakMagic);
      }
      if (IgnoreHitFlyType.Length != 0) {
        output.WriteRawTag(202, 2);
        output.WriteString(IgnoreHitFlyType);
      }
      if (MagicTypeDes.Length != 0) {
        output.WriteRawTag(210, 2);
        output.WriteString(MagicTypeDes);
      }
      if (MagicType.Length != 0) {
        output.WriteRawTag(218, 2);
        output.WriteString(MagicType);
      }
      if (TargetPos.Length != 0) {
        output.WriteRawTag(226, 2);
        output.WriteString(TargetPos);
      }
      targetType_.WriteTo(output, _repeated_targetType_codec);
      if (AttackDistance.Length != 0) {
        output.WriteRawTag(242, 2);
        output.WriteString(AttackDistance);
      }
      if (ScanType.Length != 0) {
        output.WriteRawTag(250, 2);
        output.WriteString(ScanType);
      }
      if (MagicScripts.Length != 0) {
        output.WriteRawTag(130, 3);
        output.WriteString(MagicScripts);
      }
      if (ManyTimeDmage.Length != 0) {
        output.WriteRawTag(138, 3);
        output.WriteString(ManyTimeDmage);
      }
      if (IntoneTime.Length != 0) {
        output.WriteRawTag(146, 3);
        output.WriteString(IntoneTime);
      }
      moveDelay_.WriteTo(output, _repeated_moveDelay_codec);
      if (StepMove.Length != 0) {
        output.WriteRawTag(162, 3);
        output.WriteString(StepMove);
      }
      if (WitchTimeBreak.Length != 0) {
        output.WriteRawTag(170, 3);
        output.WriteString(WitchTimeBreak);
      }
      if (WaringEffectConf.Length != 0) {
        output.WriteRawTag(178, 3);
        output.WriteString(WaringEffectConf);
      }
      if (DynamicShift.Length != 0) {
        output.WriteRawTag(186, 3);
        output.WriteString(DynamicShift);
      }
      if (PubCDTime.Length != 0) {
        output.WriteRawTag(194, 3);
        output.WriteString(PubCDTime);
      }
      if (AttackInterval.Length != 0) {
        output.WriteRawTag(202, 3);
        output.WriteString(AttackInterval);
      }
      if (MinAttackDistance.Length != 0) {
        output.WriteRawTag(210, 3);
        output.WriteString(MinAttackDistance);
      }
      if (MagicRange.Length != 0) {
        output.WriteRawTag(218, 3);
        output.WriteString(MagicRange);
      }
      if (ClientManyTimeDmage.Length != 0) {
        output.WriteRawTag(226, 3);
        output.WriteString(ClientManyTimeDmage);
      }
      if (MaxNum.Length != 0) {
        output.WriteRawTag(234, 3);
        output.WriteString(MaxNum);
      }
      if (MagicTime.Length != 0) {
        output.WriteRawTag(242, 3);
        output.WriteString(MagicTime);
      }
      if (MoveSpeed != 0) {
        output.WriteRawTag(248, 3);
        output.WriteInt32(MoveSpeed);
      }
      if (MoveDistance.Length != 0) {
        output.WriteRawTag(130, 4);
        output.WriteString(MoveDistance);
      }
      if (UseNum.Length != 0) {
        output.WriteRawTag(138, 4);
        output.WriteString(UseNum);
      }
      if (ResetTime.Length != 0) {
        output.WriteRawTag(146, 4);
        output.WriteString(ResetTime);
      }
      if (ClientManyTimeDmageDelay.Length != 0) {
        output.WriteRawTag(154, 4);
        output.WriteString(ClientManyTimeDmageDelay);
      }
      if (DistanceDecay.Length != 0) {
        output.WriteRawTag(162, 4);
        output.WriteString(DistanceDecay);
      }
      if (ClientMoveDistance != 0) {
        output.WriteRawTag(168, 4);
        output.WriteInt32(ClientMoveDistance);
      }
      if (MoveStyle.Length != 0) {
        output.WriteRawTag(178, 4);
        output.WriteString(MoveStyle);
      }
      if (MoveCondition.Length != 0) {
        output.WriteRawTag(186, 4);
        output.WriteString(MoveCondition);
      }
      if (AutoFindDistance.Length != 0) {
        output.WriteRawTag(194, 4);
        output.WriteString(AutoFindDistance);
      }
      if (HintTime.Length != 0) {
        output.WriteRawTag(202, 4);
        output.WriteString(HintTime);
      }
      if (TriggerCD.Length != 0) {
        output.WriteRawTag(210, 4);
        output.WriteString(TriggerCD);
      }
      if (TriggerType.Length != 0) {
        output.WriteRawTag(218, 4);
        output.WriteString(TriggerType);
      }
      if (TriggerOdds.Length != 0) {
        output.WriteRawTag(226, 4);
        output.WriteString(TriggerOdds);
      }
      if (TriggerPubCDTime.Length != 0) {
        output.WriteRawTag(234, 4);
        output.WriteString(TriggerPubCDTime);
      }
      if (MagicIcon.Length != 0) {
        output.WriteRawTag(242, 4);
        output.WriteString(MagicIcon);
      }
      if (MagicColor.Length != 0) {
        output.WriteRawTag(250, 4);
        output.WriteString(MagicColor);
      }
      if (ActionType.Length != 0) {
        output.WriteRawTag(130, 5);
        output.WriteString(ActionType);
      }
      if (InputDir.Length != 0) {
        output.WriteRawTag(138, 5);
        output.WriteString(InputDir);
      }
      if (MagicCode.Length != 0) {
        output.WriteRawTag(146, 5);
        output.WriteString(MagicCode);
      }
      if (TargetGroundDecoration.Length != 0) {
        output.WriteRawTag(154, 5);
        output.WriteString(TargetGroundDecoration);
      }
      if (FlyDecoration.Length != 0) {
        output.WriteRawTag(162, 5);
        output.WriteString(FlyDecoration);
      }
      if (TargetDecoration.Length != 0) {
        output.WriteRawTag(170, 5);
        output.WriteString(TargetDecoration);
      }
      if (LineRender.Length != 0) {
        output.WriteRawTag(178, 5);
        output.WriteString(LineRender);
      }
      if (NeedEnemy.Length != 0) {
        output.WriteRawTag(186, 5);
        output.WriteString(NeedEnemy);
      }
      if (DelayDecoration.Length != 0) {
        output.WriteRawTag(194, 5);
        output.WriteString(DelayDecoration);
      }
      if (StateDecoration.Length != 0) {
        output.WriteRawTag(202, 5);
        output.WriteString(StateDecoration);
      }
      if (ScreenDecoration.Length != 0) {
        output.WriteRawTag(210, 5);
        output.WriteString(ScreenDecoration);
      }
      if (SceneEffect.Length != 0) {
        output.WriteRawTag(218, 5);
        output.WriteString(SceneEffect);
      }
      if (MoveTargetEffect.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(MoveTargetEffect);
      }
      if (TargetPlayingType.Length != 0) {
        output.WriteRawTag(234, 5);
        output.WriteString(TargetPlayingType);
      }
      if (MusicWeapon.Length != 0) {
        output.WriteRawTag(242, 5);
        output.WriteString(MusicWeapon);
      }
      if (MusicInjured.Length != 0) {
        output.WriteRawTag(250, 5);
        output.WriteString(MusicInjured);
      }
      if (ActionIndex.Length != 0) {
        output.WriteRawTag(130, 6);
        output.WriteString(ActionIndex);
      }
      if (MoveType.Length != 0) {
        output.WriteRawTag(138, 6);
        output.WriteString(MoveType);
      }
      if (SpEffect.Length != 0) {
        output.WriteRawTag(146, 6);
        output.WriteString(SpEffect);
      }
      if (HitSpEffect.Length != 0) {
        output.WriteRawTag(154, 6);
        output.WriteString(HitSpEffect);
      }
      if (FreeAngle.Length != 0) {
        output.WriteRawTag(162, 6);
        output.WriteString(FreeAngle);
      }
      if (ShowJoyStick.Length != 0) {
        output.WriteRawTag(170, 6);
        output.WriteString(ShowJoyStick);
      }
      if (AddMagic.Length != 0) {
        output.WriteRawTag(178, 6);
        output.WriteString(AddMagic);
      }
      if (Camera.Length != 0) {
        output.WriteRawTag(186, 6);
        output.WriteString(Camera);
      }
      if (SlowCamera.Length != 0) {
        output.WriteRawTag(194, 6);
        output.WriteString(SlowCamera);
      }
      if (BasePhysical.Length != 0) {
        output.WriteRawTag(202, 6);
        output.WriteString(BasePhysical);
      }
      if (BaseSVPoint.Length != 0) {
        output.WriteRawTag(210, 6);
        output.WriteString(BaseSVPoint);
      }
      if (AddSVPoint.Length != 0) {
        output.WriteRawTag(218, 6);
        output.WriteString(AddSVPoint);
      }
      if (Movie.Length != 0) {
        output.WriteRawTag(226, 6);
        output.WriteString(Movie);
      }
      if (ColorChg.Length != 0) {
        output.WriteRawTag(234, 6);
        output.WriteString(ColorChg);
      }
      if (Bangding.Length != 0) {
        output.WriteRawTag(242, 6);
        output.WriteString(Bangding);
      }
      if (MagicsBook.Length != 0) {
        output.WriteRawTag(250, 6);
        output.WriteString(MagicsBook);
      }
      if (SeekStyle.Length != 0) {
        output.WriteRawTag(130, 7);
        output.WriteString(SeekStyle);
      }
      if (Combat.Length != 0) {
        output.WriteRawTag(138, 7);
        output.WriteString(Combat);
      }
      if (CameraTrace != false) {
        output.WriteRawTag(144, 7);
        output.WriteBool(CameraTrace);
      }
      if (Frame.Length != 0) {
        output.WriteRawTag(154, 7);
        output.WriteString(Frame);
      }
      if (MainSkillID.Length != 0) {
        output.WriteRawTag(162, 7);
        output.WriteString(MainSkillID);
      }
      if (NeedMoney.Length != 0) {
        output.WriteRawTag(170, 7);
        output.WriteString(NeedMoney);
      }
      if (NeedGoods.Length != 0) {
        output.WriteRawTag(178, 7);
        output.WriteString(NeedGoods);
      }
      if (ShowNextDelayTime.Length != 0) {
        output.WriteRawTag(186, 7);
        output.WriteString(ShowNextDelayTime);
      }
      if (ShowNewHitDecoration.Length != 0) {
        output.WriteRawTag(194, 7);
        output.WriteString(ShowNewHitDecoration);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ID);
      }
      if (MagicNameID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MagicNameID);
      }
      if (NextMagicID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NextMagicID);
      }
      if (ParentMagicID != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ParentMagicID);
      }
      if (MainMagicID != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MainMagicID);
      }
      if (SkillType != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(SkillType);
      }
      if (OperateType.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(OperateType);
      }
      if (DefanceStyle.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(DefanceStyle);
      }
      if (HitId != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(HitId);
      }
      if (RepelTime.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(RepelTime);
      }
      if (RepelStunTime.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(RepelStunTime);
      }
      if (RepelSpeed.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(RepelSpeed);
      }
      if (ExpCost.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(ExpCost);
      }
      if (Features.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Features);
      }
      if (Queue.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Queue);
      }
      if (InjureType.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(InjureType);
      }
      if (DelayDecoToMap.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(DelayDecoToMap);
      }
      if (PreSkillAction.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(PreSkillAction);
      }
      if (SkillAction.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(SkillAction);
      }
      if (EndSkillAction.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(EndSkillAction);
      }
      if (SkillDirection != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(SkillDirection);
      }
      if (ToOcuupation.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(ToOcuupation);
      }
      if (TalkName.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(TalkName);
      }
      if (LearnCondition.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(LearnCondition);
      }
      if (AutoStart != false) {
        output.WriteRawTag(200, 1);
        output.WriteBool(AutoStart);
      }
      if (LearnTask != 0) {
        output.WriteRawTag(208, 1);
        output.WriteUInt32(LearnTask);
      }
      if (LearnPoint.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(LearnPoint);
      }
      if (PreMagicId.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteString(PreMagicId);
      }
      if (HasDirection.Length != 0) {
        output.WriteRawTag(234, 1);
        output.WriteString(HasDirection);
      }
      if (DamageType.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(DamageType);
      }
      if (UseType.Length != 0) {
        output.WriteRawTag(250, 1);
        output.WriteString(UseType);
      }
      if (FanWeiDescription.Length != 0) {
        output.WriteRawTag(130, 2);
        output.WriteString(FanWeiDescription);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(138, 2);
        output.WriteString(Description);
      }
      if (Description2.Length != 0) {
        output.WriteRawTag(146, 2);
        output.WriteString(Description2);
      }
      if (DescriptionNum.Length != 0) {
        output.WriteRawTag(154, 2);
        output.WriteString(DescriptionNum);
      }
      if (CDTime != 0L) {
        output.WriteRawTag(160, 2);
        output.WriteInt64(CDTime);
      }
      if (InitCDTime.Length != 0) {
        output.WriteRawTag(170, 2);
        output.WriteString(InitCDTime);
      }
      if (BaseMagic.Length != 0) {
        output.WriteRawTag(178, 2);
        output.WriteString(BaseMagic);
      }
      if (ResetTarget.Length != 0) {
        output.WriteRawTag(186, 2);
        output.WriteString(ResetTarget);
      }
      if (BreakMagic.Length != 0) {
        output.WriteRawTag(194, 2);
        output.WriteString(BreakMagic);
      }
      if (IgnoreHitFlyType.Length != 0) {
        output.WriteRawTag(202, 2);
        output.WriteString(IgnoreHitFlyType);
      }
      if (MagicTypeDes.Length != 0) {
        output.WriteRawTag(210, 2);
        output.WriteString(MagicTypeDes);
      }
      if (MagicType.Length != 0) {
        output.WriteRawTag(218, 2);
        output.WriteString(MagicType);
      }
      if (TargetPos.Length != 0) {
        output.WriteRawTag(226, 2);
        output.WriteString(TargetPos);
      }
      targetType_.WriteTo(ref output, _repeated_targetType_codec);
      if (AttackDistance.Length != 0) {
        output.WriteRawTag(242, 2);
        output.WriteString(AttackDistance);
      }
      if (ScanType.Length != 0) {
        output.WriteRawTag(250, 2);
        output.WriteString(ScanType);
      }
      if (MagicScripts.Length != 0) {
        output.WriteRawTag(130, 3);
        output.WriteString(MagicScripts);
      }
      if (ManyTimeDmage.Length != 0) {
        output.WriteRawTag(138, 3);
        output.WriteString(ManyTimeDmage);
      }
      if (IntoneTime.Length != 0) {
        output.WriteRawTag(146, 3);
        output.WriteString(IntoneTime);
      }
      moveDelay_.WriteTo(ref output, _repeated_moveDelay_codec);
      if (StepMove.Length != 0) {
        output.WriteRawTag(162, 3);
        output.WriteString(StepMove);
      }
      if (WitchTimeBreak.Length != 0) {
        output.WriteRawTag(170, 3);
        output.WriteString(WitchTimeBreak);
      }
      if (WaringEffectConf.Length != 0) {
        output.WriteRawTag(178, 3);
        output.WriteString(WaringEffectConf);
      }
      if (DynamicShift.Length != 0) {
        output.WriteRawTag(186, 3);
        output.WriteString(DynamicShift);
      }
      if (PubCDTime.Length != 0) {
        output.WriteRawTag(194, 3);
        output.WriteString(PubCDTime);
      }
      if (AttackInterval.Length != 0) {
        output.WriteRawTag(202, 3);
        output.WriteString(AttackInterval);
      }
      if (MinAttackDistance.Length != 0) {
        output.WriteRawTag(210, 3);
        output.WriteString(MinAttackDistance);
      }
      if (MagicRange.Length != 0) {
        output.WriteRawTag(218, 3);
        output.WriteString(MagicRange);
      }
      if (ClientManyTimeDmage.Length != 0) {
        output.WriteRawTag(226, 3);
        output.WriteString(ClientManyTimeDmage);
      }
      if (MaxNum.Length != 0) {
        output.WriteRawTag(234, 3);
        output.WriteString(MaxNum);
      }
      if (MagicTime.Length != 0) {
        output.WriteRawTag(242, 3);
        output.WriteString(MagicTime);
      }
      if (MoveSpeed != 0) {
        output.WriteRawTag(248, 3);
        output.WriteInt32(MoveSpeed);
      }
      if (MoveDistance.Length != 0) {
        output.WriteRawTag(130, 4);
        output.WriteString(MoveDistance);
      }
      if (UseNum.Length != 0) {
        output.WriteRawTag(138, 4);
        output.WriteString(UseNum);
      }
      if (ResetTime.Length != 0) {
        output.WriteRawTag(146, 4);
        output.WriteString(ResetTime);
      }
      if (ClientManyTimeDmageDelay.Length != 0) {
        output.WriteRawTag(154, 4);
        output.WriteString(ClientManyTimeDmageDelay);
      }
      if (DistanceDecay.Length != 0) {
        output.WriteRawTag(162, 4);
        output.WriteString(DistanceDecay);
      }
      if (ClientMoveDistance != 0) {
        output.WriteRawTag(168, 4);
        output.WriteInt32(ClientMoveDistance);
      }
      if (MoveStyle.Length != 0) {
        output.WriteRawTag(178, 4);
        output.WriteString(MoveStyle);
      }
      if (MoveCondition.Length != 0) {
        output.WriteRawTag(186, 4);
        output.WriteString(MoveCondition);
      }
      if (AutoFindDistance.Length != 0) {
        output.WriteRawTag(194, 4);
        output.WriteString(AutoFindDistance);
      }
      if (HintTime.Length != 0) {
        output.WriteRawTag(202, 4);
        output.WriteString(HintTime);
      }
      if (TriggerCD.Length != 0) {
        output.WriteRawTag(210, 4);
        output.WriteString(TriggerCD);
      }
      if (TriggerType.Length != 0) {
        output.WriteRawTag(218, 4);
        output.WriteString(TriggerType);
      }
      if (TriggerOdds.Length != 0) {
        output.WriteRawTag(226, 4);
        output.WriteString(TriggerOdds);
      }
      if (TriggerPubCDTime.Length != 0) {
        output.WriteRawTag(234, 4);
        output.WriteString(TriggerPubCDTime);
      }
      if (MagicIcon.Length != 0) {
        output.WriteRawTag(242, 4);
        output.WriteString(MagicIcon);
      }
      if (MagicColor.Length != 0) {
        output.WriteRawTag(250, 4);
        output.WriteString(MagicColor);
      }
      if (ActionType.Length != 0) {
        output.WriteRawTag(130, 5);
        output.WriteString(ActionType);
      }
      if (InputDir.Length != 0) {
        output.WriteRawTag(138, 5);
        output.WriteString(InputDir);
      }
      if (MagicCode.Length != 0) {
        output.WriteRawTag(146, 5);
        output.WriteString(MagicCode);
      }
      if (TargetGroundDecoration.Length != 0) {
        output.WriteRawTag(154, 5);
        output.WriteString(TargetGroundDecoration);
      }
      if (FlyDecoration.Length != 0) {
        output.WriteRawTag(162, 5);
        output.WriteString(FlyDecoration);
      }
      if (TargetDecoration.Length != 0) {
        output.WriteRawTag(170, 5);
        output.WriteString(TargetDecoration);
      }
      if (LineRender.Length != 0) {
        output.WriteRawTag(178, 5);
        output.WriteString(LineRender);
      }
      if (NeedEnemy.Length != 0) {
        output.WriteRawTag(186, 5);
        output.WriteString(NeedEnemy);
      }
      if (DelayDecoration.Length != 0) {
        output.WriteRawTag(194, 5);
        output.WriteString(DelayDecoration);
      }
      if (StateDecoration.Length != 0) {
        output.WriteRawTag(202, 5);
        output.WriteString(StateDecoration);
      }
      if (ScreenDecoration.Length != 0) {
        output.WriteRawTag(210, 5);
        output.WriteString(ScreenDecoration);
      }
      if (SceneEffect.Length != 0) {
        output.WriteRawTag(218, 5);
        output.WriteString(SceneEffect);
      }
      if (MoveTargetEffect.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(MoveTargetEffect);
      }
      if (TargetPlayingType.Length != 0) {
        output.WriteRawTag(234, 5);
        output.WriteString(TargetPlayingType);
      }
      if (MusicWeapon.Length != 0) {
        output.WriteRawTag(242, 5);
        output.WriteString(MusicWeapon);
      }
      if (MusicInjured.Length != 0) {
        output.WriteRawTag(250, 5);
        output.WriteString(MusicInjured);
      }
      if (ActionIndex.Length != 0) {
        output.WriteRawTag(130, 6);
        output.WriteString(ActionIndex);
      }
      if (MoveType.Length != 0) {
        output.WriteRawTag(138, 6);
        output.WriteString(MoveType);
      }
      if (SpEffect.Length != 0) {
        output.WriteRawTag(146, 6);
        output.WriteString(SpEffect);
      }
      if (HitSpEffect.Length != 0) {
        output.WriteRawTag(154, 6);
        output.WriteString(HitSpEffect);
      }
      if (FreeAngle.Length != 0) {
        output.WriteRawTag(162, 6);
        output.WriteString(FreeAngle);
      }
      if (ShowJoyStick.Length != 0) {
        output.WriteRawTag(170, 6);
        output.WriteString(ShowJoyStick);
      }
      if (AddMagic.Length != 0) {
        output.WriteRawTag(178, 6);
        output.WriteString(AddMagic);
      }
      if (Camera.Length != 0) {
        output.WriteRawTag(186, 6);
        output.WriteString(Camera);
      }
      if (SlowCamera.Length != 0) {
        output.WriteRawTag(194, 6);
        output.WriteString(SlowCamera);
      }
      if (BasePhysical.Length != 0) {
        output.WriteRawTag(202, 6);
        output.WriteString(BasePhysical);
      }
      if (BaseSVPoint.Length != 0) {
        output.WriteRawTag(210, 6);
        output.WriteString(BaseSVPoint);
      }
      if (AddSVPoint.Length != 0) {
        output.WriteRawTag(218, 6);
        output.WriteString(AddSVPoint);
      }
      if (Movie.Length != 0) {
        output.WriteRawTag(226, 6);
        output.WriteString(Movie);
      }
      if (ColorChg.Length != 0) {
        output.WriteRawTag(234, 6);
        output.WriteString(ColorChg);
      }
      if (Bangding.Length != 0) {
        output.WriteRawTag(242, 6);
        output.WriteString(Bangding);
      }
      if (MagicsBook.Length != 0) {
        output.WriteRawTag(250, 6);
        output.WriteString(MagicsBook);
      }
      if (SeekStyle.Length != 0) {
        output.WriteRawTag(130, 7);
        output.WriteString(SeekStyle);
      }
      if (Combat.Length != 0) {
        output.WriteRawTag(138, 7);
        output.WriteString(Combat);
      }
      if (CameraTrace != false) {
        output.WriteRawTag(144, 7);
        output.WriteBool(CameraTrace);
      }
      if (Frame.Length != 0) {
        output.WriteRawTag(154, 7);
        output.WriteString(Frame);
      }
      if (MainSkillID.Length != 0) {
        output.WriteRawTag(162, 7);
        output.WriteString(MainSkillID);
      }
      if (NeedMoney.Length != 0) {
        output.WriteRawTag(170, 7);
        output.WriteString(NeedMoney);
      }
      if (NeedGoods.Length != 0) {
        output.WriteRawTag(178, 7);
        output.WriteString(NeedGoods);
      }
      if (ShowNextDelayTime.Length != 0) {
        output.WriteRawTag(186, 7);
        output.WriteString(ShowNextDelayTime);
      }
      if (ShowNewHitDecoration.Length != 0) {
        output.WriteRawTag(194, 7);
        output.WriteString(ShowNewHitDecoration);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ID);
      }
      if (MagicNameID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MagicNameID);
      }
      if (NextMagicID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NextMagicID);
      }
      if (ParentMagicID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ParentMagicID);
      }
      if (MainMagicID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MainMagicID);
      }
      if (SkillType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillType);
      }
      if (OperateType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OperateType);
      }
      if (DefanceStyle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DefanceStyle);
      }
      if (HitId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HitId);
      }
      if (RepelTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RepelTime);
      }
      if (RepelStunTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RepelStunTime);
      }
      if (RepelSpeed.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RepelSpeed);
      }
      if (ExpCost.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExpCost);
      }
      if (Features.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Features);
      }
      if (Queue.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Queue);
      }
      if (InjureType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(InjureType);
      }
      if (DelayDecoToMap.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DelayDecoToMap);
      }
      if (PreSkillAction.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PreSkillAction);
      }
      if (SkillAction.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SkillAction);
      }
      if (EndSkillAction.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(EndSkillAction);
      }
      if (SkillDirection != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SkillDirection);
      }
      if (ToOcuupation.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ToOcuupation);
      }
      if (TalkName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TalkName);
      }
      if (LearnCondition.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(LearnCondition);
      }
      if (AutoStart != false) {
        size += 2 + 1;
      }
      if (LearnTask != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LearnTask);
      }
      if (LearnPoint.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(LearnPoint);
      }
      if (PreMagicId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PreMagicId);
      }
      if (HasDirection.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HasDirection);
      }
      if (DamageType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DamageType);
      }
      if (UseType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(UseType);
      }
      if (FanWeiDescription.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FanWeiDescription);
      }
      if (Description.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (Description2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Description2);
      }
      if (DescriptionNum.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DescriptionNum);
      }
      if (CDTime != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(CDTime);
      }
      if (InitCDTime.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(InitCDTime);
      }
      if (BaseMagic.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BaseMagic);
      }
      if (ResetTarget.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ResetTarget);
      }
      if (BreakMagic.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BreakMagic);
      }
      if (IgnoreHitFlyType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(IgnoreHitFlyType);
      }
      if (MagicTypeDes.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MagicTypeDes);
      }
      if (MagicType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MagicType);
      }
      if (TargetPos.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TargetPos);
      }
      size += targetType_.CalculateSize(_repeated_targetType_codec);
      if (AttackDistance.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AttackDistance);
      }
      if (ScanType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ScanType);
      }
      if (MagicScripts.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MagicScripts);
      }
      if (ManyTimeDmage.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ManyTimeDmage);
      }
      if (IntoneTime.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(IntoneTime);
      }
      size += moveDelay_.CalculateSize(_repeated_moveDelay_codec);
      if (StepMove.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(StepMove);
      }
      if (WitchTimeBreak.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WitchTimeBreak);
      }
      if (WaringEffectConf.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WaringEffectConf);
      }
      if (DynamicShift.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DynamicShift);
      }
      if (PubCDTime.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PubCDTime);
      }
      if (AttackInterval.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AttackInterval);
      }
      if (MinAttackDistance.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MinAttackDistance);
      }
      if (MagicRange.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MagicRange);
      }
      if (ClientManyTimeDmage.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ClientManyTimeDmage);
      }
      if (MaxNum.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MaxNum);
      }
      if (MagicTime.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MagicTime);
      }
      if (MoveSpeed != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MoveSpeed);
      }
      if (MoveDistance.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MoveDistance);
      }
      if (UseNum.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(UseNum);
      }
      if (ResetTime.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ResetTime);
      }
      if (ClientManyTimeDmageDelay.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ClientManyTimeDmageDelay);
      }
      if (DistanceDecay.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DistanceDecay);
      }
      if (ClientMoveDistance != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ClientMoveDistance);
      }
      if (MoveStyle.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MoveStyle);
      }
      if (MoveCondition.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MoveCondition);
      }
      if (AutoFindDistance.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AutoFindDistance);
      }
      if (HintTime.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HintTime);
      }
      if (TriggerCD.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TriggerCD);
      }
      if (TriggerType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TriggerType);
      }
      if (TriggerOdds.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TriggerOdds);
      }
      if (TriggerPubCDTime.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TriggerPubCDTime);
      }
      if (MagicIcon.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MagicIcon);
      }
      if (MagicColor.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MagicColor);
      }
      if (ActionType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ActionType);
      }
      if (InputDir.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(InputDir);
      }
      if (MagicCode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MagicCode);
      }
      if (TargetGroundDecoration.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TargetGroundDecoration);
      }
      if (FlyDecoration.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FlyDecoration);
      }
      if (TargetDecoration.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TargetDecoration);
      }
      if (LineRender.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(LineRender);
      }
      if (NeedEnemy.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(NeedEnemy);
      }
      if (DelayDecoration.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DelayDecoration);
      }
      if (StateDecoration.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(StateDecoration);
      }
      if (ScreenDecoration.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ScreenDecoration);
      }
      if (SceneEffect.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SceneEffect);
      }
      if (MoveTargetEffect.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MoveTargetEffect);
      }
      if (TargetPlayingType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TargetPlayingType);
      }
      if (MusicWeapon.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MusicWeapon);
      }
      if (MusicInjured.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MusicInjured);
      }
      if (ActionIndex.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ActionIndex);
      }
      if (MoveType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MoveType);
      }
      if (SpEffect.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SpEffect);
      }
      if (HitSpEffect.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HitSpEffect);
      }
      if (FreeAngle.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FreeAngle);
      }
      if (ShowJoyStick.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ShowJoyStick);
      }
      if (AddMagic.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AddMagic);
      }
      if (Camera.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Camera);
      }
      if (SlowCamera.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SlowCamera);
      }
      if (BasePhysical.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BasePhysical);
      }
      if (BaseSVPoint.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BaseSVPoint);
      }
      if (AddSVPoint.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AddSVPoint);
      }
      if (Movie.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Movie);
      }
      if (ColorChg.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ColorChg);
      }
      if (Bangding.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Bangding);
      }
      if (MagicsBook.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MagicsBook);
      }
      if (SeekStyle.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SeekStyle);
      }
      if (Combat.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Combat);
      }
      if (CameraTrace != false) {
        size += 2 + 1;
      }
      if (Frame.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Frame);
      }
      if (MainSkillID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MainSkillID);
      }
      if (NeedMoney.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(NeedMoney);
      }
      if (NeedGoods.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(NeedGoods);
      }
      if (ShowNextDelayTime.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ShowNextDelayTime);
      }
      if (ShowNewHitDecoration.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ShowNewHitDecoration);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Magics other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.MagicNameID.Length != 0) {
        MagicNameID = other.MagicNameID;
      }
      if (other.NextMagicID != 0) {
        NextMagicID = other.NextMagicID;
      }
      if (other.ParentMagicID != 0) {
        ParentMagicID = other.ParentMagicID;
      }
      if (other.MainMagicID != 0) {
        MainMagicID = other.MainMagicID;
      }
      if (other.SkillType != 0) {
        SkillType = other.SkillType;
      }
      if (other.OperateType.Length != 0) {
        OperateType = other.OperateType;
      }
      if (other.DefanceStyle.Length != 0) {
        DefanceStyle = other.DefanceStyle;
      }
      if (other.HitId != 0) {
        HitId = other.HitId;
      }
      if (other.RepelTime.Length != 0) {
        RepelTime = other.RepelTime;
      }
      if (other.RepelStunTime.Length != 0) {
        RepelStunTime = other.RepelStunTime;
      }
      if (other.RepelSpeed.Length != 0) {
        RepelSpeed = other.RepelSpeed;
      }
      if (other.ExpCost.Length != 0) {
        ExpCost = other.ExpCost;
      }
      if (other.Features.Length != 0) {
        Features = other.Features;
      }
      if (other.Queue.Length != 0) {
        Queue = other.Queue;
      }
      if (other.InjureType.Length != 0) {
        InjureType = other.InjureType;
      }
      if (other.DelayDecoToMap.Length != 0) {
        DelayDecoToMap = other.DelayDecoToMap;
      }
      if (other.PreSkillAction.Length != 0) {
        PreSkillAction = other.PreSkillAction;
      }
      if (other.SkillAction.Length != 0) {
        SkillAction = other.SkillAction;
      }
      if (other.EndSkillAction.Length != 0) {
        EndSkillAction = other.EndSkillAction;
      }
      if (other.SkillDirection != 0) {
        SkillDirection = other.SkillDirection;
      }
      if (other.ToOcuupation.Length != 0) {
        ToOcuupation = other.ToOcuupation;
      }
      if (other.TalkName.Length != 0) {
        TalkName = other.TalkName;
      }
      if (other.LearnCondition.Length != 0) {
        LearnCondition = other.LearnCondition;
      }
      if (other.AutoStart != false) {
        AutoStart = other.AutoStart;
      }
      if (other.LearnTask != 0) {
        LearnTask = other.LearnTask;
      }
      if (other.LearnPoint.Length != 0) {
        LearnPoint = other.LearnPoint;
      }
      if (other.PreMagicId.Length != 0) {
        PreMagicId = other.PreMagicId;
      }
      if (other.HasDirection.Length != 0) {
        HasDirection = other.HasDirection;
      }
      if (other.DamageType.Length != 0) {
        DamageType = other.DamageType;
      }
      if (other.UseType.Length != 0) {
        UseType = other.UseType;
      }
      if (other.FanWeiDescription.Length != 0) {
        FanWeiDescription = other.FanWeiDescription;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Description2.Length != 0) {
        Description2 = other.Description2;
      }
      if (other.DescriptionNum.Length != 0) {
        DescriptionNum = other.DescriptionNum;
      }
      if (other.CDTime != 0L) {
        CDTime = other.CDTime;
      }
      if (other.InitCDTime.Length != 0) {
        InitCDTime = other.InitCDTime;
      }
      if (other.BaseMagic.Length != 0) {
        BaseMagic = other.BaseMagic;
      }
      if (other.ResetTarget.Length != 0) {
        ResetTarget = other.ResetTarget;
      }
      if (other.BreakMagic.Length != 0) {
        BreakMagic = other.BreakMagic;
      }
      if (other.IgnoreHitFlyType.Length != 0) {
        IgnoreHitFlyType = other.IgnoreHitFlyType;
      }
      if (other.MagicTypeDes.Length != 0) {
        MagicTypeDes = other.MagicTypeDes;
      }
      if (other.MagicType.Length != 0) {
        MagicType = other.MagicType;
      }
      if (other.TargetPos.Length != 0) {
        TargetPos = other.TargetPos;
      }
      targetType_.Add(other.targetType_);
      if (other.AttackDistance.Length != 0) {
        AttackDistance = other.AttackDistance;
      }
      if (other.ScanType.Length != 0) {
        ScanType = other.ScanType;
      }
      if (other.MagicScripts.Length != 0) {
        MagicScripts = other.MagicScripts;
      }
      if (other.ManyTimeDmage.Length != 0) {
        ManyTimeDmage = other.ManyTimeDmage;
      }
      if (other.IntoneTime.Length != 0) {
        IntoneTime = other.IntoneTime;
      }
      moveDelay_.Add(other.moveDelay_);
      if (other.StepMove.Length != 0) {
        StepMove = other.StepMove;
      }
      if (other.WitchTimeBreak.Length != 0) {
        WitchTimeBreak = other.WitchTimeBreak;
      }
      if (other.WaringEffectConf.Length != 0) {
        WaringEffectConf = other.WaringEffectConf;
      }
      if (other.DynamicShift.Length != 0) {
        DynamicShift = other.DynamicShift;
      }
      if (other.PubCDTime.Length != 0) {
        PubCDTime = other.PubCDTime;
      }
      if (other.AttackInterval.Length != 0) {
        AttackInterval = other.AttackInterval;
      }
      if (other.MinAttackDistance.Length != 0) {
        MinAttackDistance = other.MinAttackDistance;
      }
      if (other.MagicRange.Length != 0) {
        MagicRange = other.MagicRange;
      }
      if (other.ClientManyTimeDmage.Length != 0) {
        ClientManyTimeDmage = other.ClientManyTimeDmage;
      }
      if (other.MaxNum.Length != 0) {
        MaxNum = other.MaxNum;
      }
      if (other.MagicTime.Length != 0) {
        MagicTime = other.MagicTime;
      }
      if (other.MoveSpeed != 0) {
        MoveSpeed = other.MoveSpeed;
      }
      if (other.MoveDistance.Length != 0) {
        MoveDistance = other.MoveDistance;
      }
      if (other.UseNum.Length != 0) {
        UseNum = other.UseNum;
      }
      if (other.ResetTime.Length != 0) {
        ResetTime = other.ResetTime;
      }
      if (other.ClientManyTimeDmageDelay.Length != 0) {
        ClientManyTimeDmageDelay = other.ClientManyTimeDmageDelay;
      }
      if (other.DistanceDecay.Length != 0) {
        DistanceDecay = other.DistanceDecay;
      }
      if (other.ClientMoveDistance != 0) {
        ClientMoveDistance = other.ClientMoveDistance;
      }
      if (other.MoveStyle.Length != 0) {
        MoveStyle = other.MoveStyle;
      }
      if (other.MoveCondition.Length != 0) {
        MoveCondition = other.MoveCondition;
      }
      if (other.AutoFindDistance.Length != 0) {
        AutoFindDistance = other.AutoFindDistance;
      }
      if (other.HintTime.Length != 0) {
        HintTime = other.HintTime;
      }
      if (other.TriggerCD.Length != 0) {
        TriggerCD = other.TriggerCD;
      }
      if (other.TriggerType.Length != 0) {
        TriggerType = other.TriggerType;
      }
      if (other.TriggerOdds.Length != 0) {
        TriggerOdds = other.TriggerOdds;
      }
      if (other.TriggerPubCDTime.Length != 0) {
        TriggerPubCDTime = other.TriggerPubCDTime;
      }
      if (other.MagicIcon.Length != 0) {
        MagicIcon = other.MagicIcon;
      }
      if (other.MagicColor.Length != 0) {
        MagicColor = other.MagicColor;
      }
      if (other.ActionType.Length != 0) {
        ActionType = other.ActionType;
      }
      if (other.InputDir.Length != 0) {
        InputDir = other.InputDir;
      }
      if (other.MagicCode.Length != 0) {
        MagicCode = other.MagicCode;
      }
      if (other.TargetGroundDecoration.Length != 0) {
        TargetGroundDecoration = other.TargetGroundDecoration;
      }
      if (other.FlyDecoration.Length != 0) {
        FlyDecoration = other.FlyDecoration;
      }
      if (other.TargetDecoration.Length != 0) {
        TargetDecoration = other.TargetDecoration;
      }
      if (other.LineRender.Length != 0) {
        LineRender = other.LineRender;
      }
      if (other.NeedEnemy.Length != 0) {
        NeedEnemy = other.NeedEnemy;
      }
      if (other.DelayDecoration.Length != 0) {
        DelayDecoration = other.DelayDecoration;
      }
      if (other.StateDecoration.Length != 0) {
        StateDecoration = other.StateDecoration;
      }
      if (other.ScreenDecoration.Length != 0) {
        ScreenDecoration = other.ScreenDecoration;
      }
      if (other.SceneEffect.Length != 0) {
        SceneEffect = other.SceneEffect;
      }
      if (other.MoveTargetEffect.Length != 0) {
        MoveTargetEffect = other.MoveTargetEffect;
      }
      if (other.TargetPlayingType.Length != 0) {
        TargetPlayingType = other.TargetPlayingType;
      }
      if (other.MusicWeapon.Length != 0) {
        MusicWeapon = other.MusicWeapon;
      }
      if (other.MusicInjured.Length != 0) {
        MusicInjured = other.MusicInjured;
      }
      if (other.ActionIndex.Length != 0) {
        ActionIndex = other.ActionIndex;
      }
      if (other.MoveType.Length != 0) {
        MoveType = other.MoveType;
      }
      if (other.SpEffect.Length != 0) {
        SpEffect = other.SpEffect;
      }
      if (other.HitSpEffect.Length != 0) {
        HitSpEffect = other.HitSpEffect;
      }
      if (other.FreeAngle.Length != 0) {
        FreeAngle = other.FreeAngle;
      }
      if (other.ShowJoyStick.Length != 0) {
        ShowJoyStick = other.ShowJoyStick;
      }
      if (other.AddMagic.Length != 0) {
        AddMagic = other.AddMagic;
      }
      if (other.Camera.Length != 0) {
        Camera = other.Camera;
      }
      if (other.SlowCamera.Length != 0) {
        SlowCamera = other.SlowCamera;
      }
      if (other.BasePhysical.Length != 0) {
        BasePhysical = other.BasePhysical;
      }
      if (other.BaseSVPoint.Length != 0) {
        BaseSVPoint = other.BaseSVPoint;
      }
      if (other.AddSVPoint.Length != 0) {
        AddSVPoint = other.AddSVPoint;
      }
      if (other.Movie.Length != 0) {
        Movie = other.Movie;
      }
      if (other.ColorChg.Length != 0) {
        ColorChg = other.ColorChg;
      }
      if (other.Bangding.Length != 0) {
        Bangding = other.Bangding;
      }
      if (other.MagicsBook.Length != 0) {
        MagicsBook = other.MagicsBook;
      }
      if (other.SeekStyle.Length != 0) {
        SeekStyle = other.SeekStyle;
      }
      if (other.Combat.Length != 0) {
        Combat = other.Combat;
      }
      if (other.CameraTrace != false) {
        CameraTrace = other.CameraTrace;
      }
      if (other.Frame.Length != 0) {
        Frame = other.Frame;
      }
      if (other.MainSkillID.Length != 0) {
        MainSkillID = other.MainSkillID;
      }
      if (other.NeedMoney.Length != 0) {
        NeedMoney = other.NeedMoney;
      }
      if (other.NeedGoods.Length != 0) {
        NeedGoods = other.NeedGoods;
      }
      if (other.ShowNextDelayTime.Length != 0) {
        ShowNextDelayTime = other.ShowNextDelayTime;
      }
      if (other.ShowNewHitDecoration.Length != 0) {
        ShowNewHitDecoration = other.ShowNewHitDecoration;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ID = input.ReadUInt32();
            break;
          }
          case 18: {
            MagicNameID = input.ReadString();
            break;
          }
          case 24: {
            NextMagicID = input.ReadInt32();
            break;
          }
          case 32: {
            ParentMagicID = input.ReadInt32();
            break;
          }
          case 40: {
            MainMagicID = input.ReadInt32();
            break;
          }
          case 48: {
            SkillType = input.ReadInt32();
            break;
          }
          case 58: {
            OperateType = input.ReadString();
            break;
          }
          case 66: {
            DefanceStyle = input.ReadString();
            break;
          }
          case 72: {
            HitId = input.ReadInt32();
            break;
          }
          case 82: {
            RepelTime = input.ReadString();
            break;
          }
          case 90: {
            RepelStunTime = input.ReadString();
            break;
          }
          case 98: {
            RepelSpeed = input.ReadString();
            break;
          }
          case 106: {
            ExpCost = input.ReadString();
            break;
          }
          case 114: {
            Features = input.ReadString();
            break;
          }
          case 122: {
            Queue = input.ReadString();
            break;
          }
          case 130: {
            InjureType = input.ReadString();
            break;
          }
          case 138: {
            DelayDecoToMap = input.ReadString();
            break;
          }
          case 146: {
            PreSkillAction = input.ReadString();
            break;
          }
          case 154: {
            SkillAction = input.ReadString();
            break;
          }
          case 162: {
            EndSkillAction = input.ReadString();
            break;
          }
          case 168: {
            SkillDirection = input.ReadInt32();
            break;
          }
          case 178: {
            ToOcuupation = input.ReadString();
            break;
          }
          case 186: {
            TalkName = input.ReadString();
            break;
          }
          case 194: {
            LearnCondition = input.ReadString();
            break;
          }
          case 200: {
            AutoStart = input.ReadBool();
            break;
          }
          case 208: {
            LearnTask = input.ReadUInt32();
            break;
          }
          case 218: {
            LearnPoint = input.ReadString();
            break;
          }
          case 226: {
            PreMagicId = input.ReadString();
            break;
          }
          case 234: {
            HasDirection = input.ReadString();
            break;
          }
          case 242: {
            DamageType = input.ReadString();
            break;
          }
          case 250: {
            UseType = input.ReadString();
            break;
          }
          case 258: {
            FanWeiDescription = input.ReadString();
            break;
          }
          case 266: {
            Description = input.ReadString();
            break;
          }
          case 274: {
            Description2 = input.ReadString();
            break;
          }
          case 282: {
            DescriptionNum = input.ReadString();
            break;
          }
          case 288: {
            CDTime = input.ReadInt64();
            break;
          }
          case 298: {
            InitCDTime = input.ReadString();
            break;
          }
          case 306: {
            BaseMagic = input.ReadString();
            break;
          }
          case 314: {
            ResetTarget = input.ReadString();
            break;
          }
          case 322: {
            BreakMagic = input.ReadString();
            break;
          }
          case 330: {
            IgnoreHitFlyType = input.ReadString();
            break;
          }
          case 338: {
            MagicTypeDes = input.ReadString();
            break;
          }
          case 346: {
            MagicType = input.ReadString();
            break;
          }
          case 354: {
            TargetPos = input.ReadString();
            break;
          }
          case 362:
          case 360: {
            targetType_.AddEntriesFrom(input, _repeated_targetType_codec);
            break;
          }
          case 370: {
            AttackDistance = input.ReadString();
            break;
          }
          case 378: {
            ScanType = input.ReadString();
            break;
          }
          case 386: {
            MagicScripts = input.ReadString();
            break;
          }
          case 394: {
            ManyTimeDmage = input.ReadString();
            break;
          }
          case 402: {
            IntoneTime = input.ReadString();
            break;
          }
          case 410:
          case 408: {
            moveDelay_.AddEntriesFrom(input, _repeated_moveDelay_codec);
            break;
          }
          case 418: {
            StepMove = input.ReadString();
            break;
          }
          case 426: {
            WitchTimeBreak = input.ReadString();
            break;
          }
          case 434: {
            WaringEffectConf = input.ReadString();
            break;
          }
          case 442: {
            DynamicShift = input.ReadString();
            break;
          }
          case 450: {
            PubCDTime = input.ReadString();
            break;
          }
          case 458: {
            AttackInterval = input.ReadString();
            break;
          }
          case 466: {
            MinAttackDistance = input.ReadString();
            break;
          }
          case 474: {
            MagicRange = input.ReadString();
            break;
          }
          case 482: {
            ClientManyTimeDmage = input.ReadString();
            break;
          }
          case 490: {
            MaxNum = input.ReadString();
            break;
          }
          case 498: {
            MagicTime = input.ReadString();
            break;
          }
          case 504: {
            MoveSpeed = input.ReadInt32();
            break;
          }
          case 514: {
            MoveDistance = input.ReadString();
            break;
          }
          case 522: {
            UseNum = input.ReadString();
            break;
          }
          case 530: {
            ResetTime = input.ReadString();
            break;
          }
          case 538: {
            ClientManyTimeDmageDelay = input.ReadString();
            break;
          }
          case 546: {
            DistanceDecay = input.ReadString();
            break;
          }
          case 552: {
            ClientMoveDistance = input.ReadInt32();
            break;
          }
          case 562: {
            MoveStyle = input.ReadString();
            break;
          }
          case 570: {
            MoveCondition = input.ReadString();
            break;
          }
          case 578: {
            AutoFindDistance = input.ReadString();
            break;
          }
          case 586: {
            HintTime = input.ReadString();
            break;
          }
          case 594: {
            TriggerCD = input.ReadString();
            break;
          }
          case 602: {
            TriggerType = input.ReadString();
            break;
          }
          case 610: {
            TriggerOdds = input.ReadString();
            break;
          }
          case 618: {
            TriggerPubCDTime = input.ReadString();
            break;
          }
          case 626: {
            MagicIcon = input.ReadString();
            break;
          }
          case 634: {
            MagicColor = input.ReadString();
            break;
          }
          case 642: {
            ActionType = input.ReadString();
            break;
          }
          case 650: {
            InputDir = input.ReadString();
            break;
          }
          case 658: {
            MagicCode = input.ReadString();
            break;
          }
          case 666: {
            TargetGroundDecoration = input.ReadString();
            break;
          }
          case 674: {
            FlyDecoration = input.ReadString();
            break;
          }
          case 682: {
            TargetDecoration = input.ReadString();
            break;
          }
          case 690: {
            LineRender = input.ReadString();
            break;
          }
          case 698: {
            NeedEnemy = input.ReadString();
            break;
          }
          case 706: {
            DelayDecoration = input.ReadString();
            break;
          }
          case 714: {
            StateDecoration = input.ReadString();
            break;
          }
          case 722: {
            ScreenDecoration = input.ReadString();
            break;
          }
          case 730: {
            SceneEffect = input.ReadString();
            break;
          }
          case 738: {
            MoveTargetEffect = input.ReadString();
            break;
          }
          case 746: {
            TargetPlayingType = input.ReadString();
            break;
          }
          case 754: {
            MusicWeapon = input.ReadString();
            break;
          }
          case 762: {
            MusicInjured = input.ReadString();
            break;
          }
          case 770: {
            ActionIndex = input.ReadString();
            break;
          }
          case 778: {
            MoveType = input.ReadString();
            break;
          }
          case 786: {
            SpEffect = input.ReadString();
            break;
          }
          case 794: {
            HitSpEffect = input.ReadString();
            break;
          }
          case 802: {
            FreeAngle = input.ReadString();
            break;
          }
          case 810: {
            ShowJoyStick = input.ReadString();
            break;
          }
          case 818: {
            AddMagic = input.ReadString();
            break;
          }
          case 826: {
            Camera = input.ReadString();
            break;
          }
          case 834: {
            SlowCamera = input.ReadString();
            break;
          }
          case 842: {
            BasePhysical = input.ReadString();
            break;
          }
          case 850: {
            BaseSVPoint = input.ReadString();
            break;
          }
          case 858: {
            AddSVPoint = input.ReadString();
            break;
          }
          case 866: {
            Movie = input.ReadString();
            break;
          }
          case 874: {
            ColorChg = input.ReadString();
            break;
          }
          case 882: {
            Bangding = input.ReadString();
            break;
          }
          case 890: {
            MagicsBook = input.ReadString();
            break;
          }
          case 898: {
            SeekStyle = input.ReadString();
            break;
          }
          case 906: {
            Combat = input.ReadString();
            break;
          }
          case 912: {
            CameraTrace = input.ReadBool();
            break;
          }
          case 922: {
            Frame = input.ReadString();
            break;
          }
          case 930: {
            MainSkillID = input.ReadString();
            break;
          }
          case 938: {
            NeedMoney = input.ReadString();
            break;
          }
          case 946: {
            NeedGoods = input.ReadString();
            break;
          }
          case 954: {
            ShowNextDelayTime = input.ReadString();
            break;
          }
          case 962: {
            ShowNewHitDecoration = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ID = input.ReadUInt32();
            break;
          }
          case 18: {
            MagicNameID = input.ReadString();
            break;
          }
          case 24: {
            NextMagicID = input.ReadInt32();
            break;
          }
          case 32: {
            ParentMagicID = input.ReadInt32();
            break;
          }
          case 40: {
            MainMagicID = input.ReadInt32();
            break;
          }
          case 48: {
            SkillType = input.ReadInt32();
            break;
          }
          case 58: {
            OperateType = input.ReadString();
            break;
          }
          case 66: {
            DefanceStyle = input.ReadString();
            break;
          }
          case 72: {
            HitId = input.ReadInt32();
            break;
          }
          case 82: {
            RepelTime = input.ReadString();
            break;
          }
          case 90: {
            RepelStunTime = input.ReadString();
            break;
          }
          case 98: {
            RepelSpeed = input.ReadString();
            break;
          }
          case 106: {
            ExpCost = input.ReadString();
            break;
          }
          case 114: {
            Features = input.ReadString();
            break;
          }
          case 122: {
            Queue = input.ReadString();
            break;
          }
          case 130: {
            InjureType = input.ReadString();
            break;
          }
          case 138: {
            DelayDecoToMap = input.ReadString();
            break;
          }
          case 146: {
            PreSkillAction = input.ReadString();
            break;
          }
          case 154: {
            SkillAction = input.ReadString();
            break;
          }
          case 162: {
            EndSkillAction = input.ReadString();
            break;
          }
          case 168: {
            SkillDirection = input.ReadInt32();
            break;
          }
          case 178: {
            ToOcuupation = input.ReadString();
            break;
          }
          case 186: {
            TalkName = input.ReadString();
            break;
          }
          case 194: {
            LearnCondition = input.ReadString();
            break;
          }
          case 200: {
            AutoStart = input.ReadBool();
            break;
          }
          case 208: {
            LearnTask = input.ReadUInt32();
            break;
          }
          case 218: {
            LearnPoint = input.ReadString();
            break;
          }
          case 226: {
            PreMagicId = input.ReadString();
            break;
          }
          case 234: {
            HasDirection = input.ReadString();
            break;
          }
          case 242: {
            DamageType = input.ReadString();
            break;
          }
          case 250: {
            UseType = input.ReadString();
            break;
          }
          case 258: {
            FanWeiDescription = input.ReadString();
            break;
          }
          case 266: {
            Description = input.ReadString();
            break;
          }
          case 274: {
            Description2 = input.ReadString();
            break;
          }
          case 282: {
            DescriptionNum = input.ReadString();
            break;
          }
          case 288: {
            CDTime = input.ReadInt64();
            break;
          }
          case 298: {
            InitCDTime = input.ReadString();
            break;
          }
          case 306: {
            BaseMagic = input.ReadString();
            break;
          }
          case 314: {
            ResetTarget = input.ReadString();
            break;
          }
          case 322: {
            BreakMagic = input.ReadString();
            break;
          }
          case 330: {
            IgnoreHitFlyType = input.ReadString();
            break;
          }
          case 338: {
            MagicTypeDes = input.ReadString();
            break;
          }
          case 346: {
            MagicType = input.ReadString();
            break;
          }
          case 354: {
            TargetPos = input.ReadString();
            break;
          }
          case 362:
          case 360: {
            targetType_.AddEntriesFrom(ref input, _repeated_targetType_codec);
            break;
          }
          case 370: {
            AttackDistance = input.ReadString();
            break;
          }
          case 378: {
            ScanType = input.ReadString();
            break;
          }
          case 386: {
            MagicScripts = input.ReadString();
            break;
          }
          case 394: {
            ManyTimeDmage = input.ReadString();
            break;
          }
          case 402: {
            IntoneTime = input.ReadString();
            break;
          }
          case 410:
          case 408: {
            moveDelay_.AddEntriesFrom(ref input, _repeated_moveDelay_codec);
            break;
          }
          case 418: {
            StepMove = input.ReadString();
            break;
          }
          case 426: {
            WitchTimeBreak = input.ReadString();
            break;
          }
          case 434: {
            WaringEffectConf = input.ReadString();
            break;
          }
          case 442: {
            DynamicShift = input.ReadString();
            break;
          }
          case 450: {
            PubCDTime = input.ReadString();
            break;
          }
          case 458: {
            AttackInterval = input.ReadString();
            break;
          }
          case 466: {
            MinAttackDistance = input.ReadString();
            break;
          }
          case 474: {
            MagicRange = input.ReadString();
            break;
          }
          case 482: {
            ClientManyTimeDmage = input.ReadString();
            break;
          }
          case 490: {
            MaxNum = input.ReadString();
            break;
          }
          case 498: {
            MagicTime = input.ReadString();
            break;
          }
          case 504: {
            MoveSpeed = input.ReadInt32();
            break;
          }
          case 514: {
            MoveDistance = input.ReadString();
            break;
          }
          case 522: {
            UseNum = input.ReadString();
            break;
          }
          case 530: {
            ResetTime = input.ReadString();
            break;
          }
          case 538: {
            ClientManyTimeDmageDelay = input.ReadString();
            break;
          }
          case 546: {
            DistanceDecay = input.ReadString();
            break;
          }
          case 552: {
            ClientMoveDistance = input.ReadInt32();
            break;
          }
          case 562: {
            MoveStyle = input.ReadString();
            break;
          }
          case 570: {
            MoveCondition = input.ReadString();
            break;
          }
          case 578: {
            AutoFindDistance = input.ReadString();
            break;
          }
          case 586: {
            HintTime = input.ReadString();
            break;
          }
          case 594: {
            TriggerCD = input.ReadString();
            break;
          }
          case 602: {
            TriggerType = input.ReadString();
            break;
          }
          case 610: {
            TriggerOdds = input.ReadString();
            break;
          }
          case 618: {
            TriggerPubCDTime = input.ReadString();
            break;
          }
          case 626: {
            MagicIcon = input.ReadString();
            break;
          }
          case 634: {
            MagicColor = input.ReadString();
            break;
          }
          case 642: {
            ActionType = input.ReadString();
            break;
          }
          case 650: {
            InputDir = input.ReadString();
            break;
          }
          case 658: {
            MagicCode = input.ReadString();
            break;
          }
          case 666: {
            TargetGroundDecoration = input.ReadString();
            break;
          }
          case 674: {
            FlyDecoration = input.ReadString();
            break;
          }
          case 682: {
            TargetDecoration = input.ReadString();
            break;
          }
          case 690: {
            LineRender = input.ReadString();
            break;
          }
          case 698: {
            NeedEnemy = input.ReadString();
            break;
          }
          case 706: {
            DelayDecoration = input.ReadString();
            break;
          }
          case 714: {
            StateDecoration = input.ReadString();
            break;
          }
          case 722: {
            ScreenDecoration = input.ReadString();
            break;
          }
          case 730: {
            SceneEffect = input.ReadString();
            break;
          }
          case 738: {
            MoveTargetEffect = input.ReadString();
            break;
          }
          case 746: {
            TargetPlayingType = input.ReadString();
            break;
          }
          case 754: {
            MusicWeapon = input.ReadString();
            break;
          }
          case 762: {
            MusicInjured = input.ReadString();
            break;
          }
          case 770: {
            ActionIndex = input.ReadString();
            break;
          }
          case 778: {
            MoveType = input.ReadString();
            break;
          }
          case 786: {
            SpEffect = input.ReadString();
            break;
          }
          case 794: {
            HitSpEffect = input.ReadString();
            break;
          }
          case 802: {
            FreeAngle = input.ReadString();
            break;
          }
          case 810: {
            ShowJoyStick = input.ReadString();
            break;
          }
          case 818: {
            AddMagic = input.ReadString();
            break;
          }
          case 826: {
            Camera = input.ReadString();
            break;
          }
          case 834: {
            SlowCamera = input.ReadString();
            break;
          }
          case 842: {
            BasePhysical = input.ReadString();
            break;
          }
          case 850: {
            BaseSVPoint = input.ReadString();
            break;
          }
          case 858: {
            AddSVPoint = input.ReadString();
            break;
          }
          case 866: {
            Movie = input.ReadString();
            break;
          }
          case 874: {
            ColorChg = input.ReadString();
            break;
          }
          case 882: {
            Bangding = input.ReadString();
            break;
          }
          case 890: {
            MagicsBook = input.ReadString();
            break;
          }
          case 898: {
            SeekStyle = input.ReadString();
            break;
          }
          case 906: {
            Combat = input.ReadString();
            break;
          }
          case 912: {
            CameraTrace = input.ReadBool();
            break;
          }
          case 922: {
            Frame = input.ReadString();
            break;
          }
          case 930: {
            MainSkillID = input.ReadString();
            break;
          }
          case 938: {
            NeedMoney = input.ReadString();
            break;
          }
          case 946: {
            NeedGoods = input.ReadString();
            break;
          }
          case 954: {
            ShowNextDelayTime = input.ReadString();
            break;
          }
          case 962: {
            ShowNewHitDecoration = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
