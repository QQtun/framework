// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Monster.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace P5.Protobuf {

  /// <summary>Holder for reflection information generated from Monster.proto</summary>
  public static partial class MonsterReflection {

    #region Descriptor
    /// <summary>File descriptor for Monster.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MonsterReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1Nb25zdGVyLnByb3RvEgtQNS5Qcm90b2J1ZhoKQnVmZi5wcm90byK0BQoL",
            "TW9uc3RlckRhdGESCgoCaWQYASABKAUSDAoEbmFtZRgCIAEoCRILCgNzZXgY",
            "AyABKAUSDQoFbGV2ZWwYBCABKAUSEgoKZXhwZXJpZW5jZRgFIAEoBRIMCgRw",
            "b3NYGAYgASgFEgwKBHBvc1kYByABKAUSEQoJZGlyZWN0aW9uGAggASgFEhEK",
            "CWxpZmVWYWx1ZRgJIAEoARIUCgxtYXhMaWZlVmFsdWUYCiABKAESEgoKbWFn",
            "aWNWYWx1ZRgLIAEoARIVCg1tYXhNYWdpY1ZhbHVlGAwgASgBEhUKDWVxdWlw",
            "bWVudEJvZHkYDSABKAUSEwoLZXh0ZW5zaW9uSWQYDiABKAUSEwoLbW9uc3Rl",
            "clR5cGUYDyABKAUSFAoMbWFzdGVyUm9sZUlkGBAgASgFEhUKDWFpQ29udHJv",
            "bFR5cGUYESABKAUSEwoLYW5pbWFsU291bmQYEiABKAkSFAoMbW9uc3Rlckxl",
            "dmVsGBMgASgFEhMKC3BvaXNvblN0YXJ0GBQgASgDEhUKDXBvaXNvblNlY29u",
            "ZHMYFSABKAUSEQoJc3R1blN0YXJ0GBYgASgDEhMKC3N0dW5TZWNvbmRzGBcg",
            "ASgFEhcKD2JhdHRsZVdoaWNoU2lkZRgYIAEoBRIXCg9zdXBlckFybW9yVmFs",
            "dWUYGSABKAESGgoSbWF4U3VwZXJBcm1vclZhbHVlGBogASgBEhYKDmRpc2Fw",
            "cGVhclN0YXJ0GBsgASgDEhgKEGRpc2FwcGVhclNlY29uZHMYHCABKAUSEgoK",
            "YmF0dGxlU2lkZRgdIAEoBRITCgtzdGF0dWVTdGFydBgeIAEoAxIVCg1zdGF0",
            "dWVTZWNvbmRzGB8gASgFEisKDGJ1ZmZEYXRhTGlzdBggIAMoCzIVLlA1LlBy",
            "b3RvYnVmLkJ1ZmZEYXRhYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::P5.Protobuf.BuffReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::P5.Protobuf.MonsterData), global::P5.Protobuf.MonsterData.Parser, new[]{ "Id", "Name", "Sex", "Level", "Experience", "PosX", "PosY", "Direction", "LifeValue", "MaxLifeValue", "MagicValue", "MaxMagicValue", "EquipmentBody", "ExtensionId", "MonsterType", "MasterRoleId", "AiControlType", "AnimalSound", "MonsterLevel", "PoisonStart", "PoisonSeconds", "StunStart", "StunSeconds", "BattleWhichSide", "SuperArmorValue", "MaxSuperArmorValue", "DisappearStart", "DisappearSeconds", "BattleSide", "StatueStart", "StatueSeconds", "BuffDataList" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///怪物資料
  /// </summary>
  public sealed partial class MonsterData : pb::IMessage<MonsterData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MonsterData> _parser = new pb::MessageParser<MonsterData>(() => new MonsterData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MonsterData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::P5.Protobuf.MonsterReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonsterData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonsterData(MonsterData other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      sex_ = other.sex_;
      level_ = other.level_;
      experience_ = other.experience_;
      posX_ = other.posX_;
      posY_ = other.posY_;
      direction_ = other.direction_;
      lifeValue_ = other.lifeValue_;
      maxLifeValue_ = other.maxLifeValue_;
      magicValue_ = other.magicValue_;
      maxMagicValue_ = other.maxMagicValue_;
      equipmentBody_ = other.equipmentBody_;
      extensionId_ = other.extensionId_;
      monsterType_ = other.monsterType_;
      masterRoleId_ = other.masterRoleId_;
      aiControlType_ = other.aiControlType_;
      animalSound_ = other.animalSound_;
      monsterLevel_ = other.monsterLevel_;
      poisonStart_ = other.poisonStart_;
      poisonSeconds_ = other.poisonSeconds_;
      stunStart_ = other.stunStart_;
      stunSeconds_ = other.stunSeconds_;
      battleWhichSide_ = other.battleWhichSide_;
      superArmorValue_ = other.superArmorValue_;
      maxSuperArmorValue_ = other.maxSuperArmorValue_;
      disappearStart_ = other.disappearStart_;
      disappearSeconds_ = other.disappearSeconds_;
      battleSide_ = other.battleSide_;
      statueStart_ = other.statueStart_;
      statueSeconds_ = other.statueSeconds_;
      buffDataList_ = other.buffDataList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonsterData Clone() {
      return new MonsterData(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    ///怪物Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sex" field.</summary>
    public const int SexFieldNumber = 3;
    private int sex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sex {
      get { return sex_; }
      set {
        sex_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 4;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "experience" field.</summary>
    public const int ExperienceFieldNumber = 5;
    private int experience_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Experience {
      get { return experience_; }
      set {
        experience_ = value;
      }
    }

    /// <summary>Field number for the "posX" field.</summary>
    public const int PosXFieldNumber = 6;
    private int posX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PosX {
      get { return posX_; }
      set {
        posX_ = value;
      }
    }

    /// <summary>Field number for the "posY" field.</summary>
    public const int PosYFieldNumber = 7;
    private int posY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PosY {
      get { return posY_; }
      set {
        posY_ = value;
      }
    }

    /// <summary>Field number for the "direction" field.</summary>
    public const int DirectionFieldNumber = 8;
    private int direction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Direction {
      get { return direction_; }
      set {
        direction_ = value;
      }
    }

    /// <summary>Field number for the "lifeValue" field.</summary>
    public const int LifeValueFieldNumber = 9;
    private double lifeValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LifeValue {
      get { return lifeValue_; }
      set {
        lifeValue_ = value;
      }
    }

    /// <summary>Field number for the "maxLifeValue" field.</summary>
    public const int MaxLifeValueFieldNumber = 10;
    private double maxLifeValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MaxLifeValue {
      get { return maxLifeValue_; }
      set {
        maxLifeValue_ = value;
      }
    }

    /// <summary>Field number for the "magicValue" field.</summary>
    public const int MagicValueFieldNumber = 11;
    private double magicValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MagicValue {
      get { return magicValue_; }
      set {
        magicValue_ = value;
      }
    }

    /// <summary>Field number for the "maxMagicValue" field.</summary>
    public const int MaxMagicValueFieldNumber = 12;
    private double maxMagicValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MaxMagicValue {
      get { return maxMagicValue_; }
      set {
        maxMagicValue_ = value;
      }
    }

    /// <summary>Field number for the "equipmentBody" field.</summary>
    public const int EquipmentBodyFieldNumber = 13;
    private int equipmentBody_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EquipmentBody {
      get { return equipmentBody_; }
      set {
        equipmentBody_ = value;
      }
    }

    /// <summary>Field number for the "extensionId" field.</summary>
    public const int ExtensionIdFieldNumber = 14;
    private int extensionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExtensionId {
      get { return extensionId_; }
      set {
        extensionId_ = value;
      }
    }

    /// <summary>Field number for the "monsterType" field.</summary>
    public const int MonsterTypeFieldNumber = 15;
    private int monsterType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MonsterType {
      get { return monsterType_; }
      set {
        monsterType_ = value;
      }
    }

    /// <summary>Field number for the "masterRoleId" field.</summary>
    public const int MasterRoleIdFieldNumber = 16;
    private int masterRoleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MasterRoleId {
      get { return masterRoleId_; }
      set {
        masterRoleId_ = value;
      }
    }

    /// <summary>Field number for the "aiControlType" field.</summary>
    public const int AiControlTypeFieldNumber = 17;
    private int aiControlType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AiControlType {
      get { return aiControlType_; }
      set {
        aiControlType_ = value;
      }
    }

    /// <summary>Field number for the "animalSound" field.</summary>
    public const int AnimalSoundFieldNumber = 18;
    private string animalSound_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AnimalSound {
      get { return animalSound_; }
      set {
        animalSound_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "monsterLevel" field.</summary>
    public const int MonsterLevelFieldNumber = 19;
    private int monsterLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MonsterLevel {
      get { return monsterLevel_; }
      set {
        monsterLevel_ = value;
      }
    }

    /// <summary>Field number for the "poisonStart" field.</summary>
    public const int PoisonStartFieldNumber = 20;
    private long poisonStart_;
    /// <summary>
    ///中毒開始時間
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PoisonStart {
      get { return poisonStart_; }
      set {
        poisonStart_ = value;
      }
    }

    /// <summary>Field number for the "poisonSeconds" field.</summary>
    public const int PoisonSecondsFieldNumber = 21;
    private int poisonSeconds_;
    /// <summary>
    ///中毒秒數
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PoisonSeconds {
      get { return poisonSeconds_; }
      set {
        poisonSeconds_ = value;
      }
    }

    /// <summary>Field number for the "stunStart" field.</summary>
    public const int StunStartFieldNumber = 22;
    private long stunStart_;
    /// <summary>
    ///暈眩開始時間
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StunStart {
      get { return stunStart_; }
      set {
        stunStart_ = value;
      }
    }

    /// <summary>Field number for the "stunSeconds" field.</summary>
    public const int StunSecondsFieldNumber = 23;
    private int stunSeconds_;
    /// <summary>
    ///暈眩秒數
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StunSeconds {
      get { return stunSeconds_; }
      set {
        stunSeconds_ = value;
      }
    }

    /// <summary>Field number for the "battleWhichSide" field.</summary>
    public const int BattleWhichSideFieldNumber = 24;
    private int battleWhichSide_;
    /// <summary>
    ///戰鬥陣營
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BattleWhichSide {
      get { return battleWhichSide_; }
      set {
        battleWhichSide_ = value;
      }
    }

    /// <summary>Field number for the "superArmorValue" field.</summary>
    public const int SuperArmorValueFieldNumber = 25;
    private double superArmorValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SuperArmorValue {
      get { return superArmorValue_; }
      set {
        superArmorValue_ = value;
      }
    }

    /// <summary>Field number for the "maxSuperArmorValue" field.</summary>
    public const int MaxSuperArmorValueFieldNumber = 26;
    private double maxSuperArmorValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MaxSuperArmorValue {
      get { return maxSuperArmorValue_; }
      set {
        maxSuperArmorValue_ = value;
      }
    }

    /// <summary>Field number for the "disappearStart" field.</summary>
    public const int DisappearStartFieldNumber = 27;
    private long disappearStart_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DisappearStart {
      get { return disappearStart_; }
      set {
        disappearStart_ = value;
      }
    }

    /// <summary>Field number for the "disappearSeconds" field.</summary>
    public const int DisappearSecondsFieldNumber = 28;
    private int disappearSeconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DisappearSeconds {
      get { return disappearSeconds_; }
      set {
        disappearSeconds_ = value;
      }
    }

    /// <summary>Field number for the "battleSide" field.</summary>
    public const int BattleSideFieldNumber = 29;
    private int battleSide_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BattleSide {
      get { return battleSide_; }
      set {
        battleSide_ = value;
      }
    }

    /// <summary>Field number for the "statueStart" field.</summary>
    public const int StatueStartFieldNumber = 30;
    private long statueStart_;
    /// <summary>
    ///石化開始
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StatueStart {
      get { return statueStart_; }
      set {
        statueStart_ = value;
      }
    }

    /// <summary>Field number for the "statueSeconds" field.</summary>
    public const int StatueSecondsFieldNumber = 31;
    private int statueSeconds_;
    /// <summary>
    ///石化秒數
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StatueSeconds {
      get { return statueSeconds_; }
      set {
        statueSeconds_ = value;
      }
    }

    /// <summary>Field number for the "buffDataList" field.</summary>
    public const int BuffDataListFieldNumber = 32;
    private static readonly pb::FieldCodec<global::P5.Protobuf.BuffData> _repeated_buffDataList_codec
        = pb::FieldCodec.ForMessage(258, global::P5.Protobuf.BuffData.Parser);
    private readonly pbc::RepeatedField<global::P5.Protobuf.BuffData> buffDataList_ = new pbc::RepeatedField<global::P5.Protobuf.BuffData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::P5.Protobuf.BuffData> BuffDataList {
      get { return buffDataList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MonsterData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MonsterData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Sex != other.Sex) return false;
      if (Level != other.Level) return false;
      if (Experience != other.Experience) return false;
      if (PosX != other.PosX) return false;
      if (PosY != other.PosY) return false;
      if (Direction != other.Direction) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LifeValue, other.LifeValue)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MaxLifeValue, other.MaxLifeValue)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MagicValue, other.MagicValue)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MaxMagicValue, other.MaxMagicValue)) return false;
      if (EquipmentBody != other.EquipmentBody) return false;
      if (ExtensionId != other.ExtensionId) return false;
      if (MonsterType != other.MonsterType) return false;
      if (MasterRoleId != other.MasterRoleId) return false;
      if (AiControlType != other.AiControlType) return false;
      if (AnimalSound != other.AnimalSound) return false;
      if (MonsterLevel != other.MonsterLevel) return false;
      if (PoisonStart != other.PoisonStart) return false;
      if (PoisonSeconds != other.PoisonSeconds) return false;
      if (StunStart != other.StunStart) return false;
      if (StunSeconds != other.StunSeconds) return false;
      if (BattleWhichSide != other.BattleWhichSide) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SuperArmorValue, other.SuperArmorValue)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MaxSuperArmorValue, other.MaxSuperArmorValue)) return false;
      if (DisappearStart != other.DisappearStart) return false;
      if (DisappearSeconds != other.DisappearSeconds) return false;
      if (BattleSide != other.BattleSide) return false;
      if (StatueStart != other.StatueStart) return false;
      if (StatueSeconds != other.StatueSeconds) return false;
      if(!buffDataList_.Equals(other.buffDataList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Sex != 0) hash ^= Sex.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Experience != 0) hash ^= Experience.GetHashCode();
      if (PosX != 0) hash ^= PosX.GetHashCode();
      if (PosY != 0) hash ^= PosY.GetHashCode();
      if (Direction != 0) hash ^= Direction.GetHashCode();
      if (LifeValue != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LifeValue);
      if (MaxLifeValue != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MaxLifeValue);
      if (MagicValue != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MagicValue);
      if (MaxMagicValue != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MaxMagicValue);
      if (EquipmentBody != 0) hash ^= EquipmentBody.GetHashCode();
      if (ExtensionId != 0) hash ^= ExtensionId.GetHashCode();
      if (MonsterType != 0) hash ^= MonsterType.GetHashCode();
      if (MasterRoleId != 0) hash ^= MasterRoleId.GetHashCode();
      if (AiControlType != 0) hash ^= AiControlType.GetHashCode();
      if (AnimalSound.Length != 0) hash ^= AnimalSound.GetHashCode();
      if (MonsterLevel != 0) hash ^= MonsterLevel.GetHashCode();
      if (PoisonStart != 0L) hash ^= PoisonStart.GetHashCode();
      if (PoisonSeconds != 0) hash ^= PoisonSeconds.GetHashCode();
      if (StunStart != 0L) hash ^= StunStart.GetHashCode();
      if (StunSeconds != 0) hash ^= StunSeconds.GetHashCode();
      if (BattleWhichSide != 0) hash ^= BattleWhichSide.GetHashCode();
      if (SuperArmorValue != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SuperArmorValue);
      if (MaxSuperArmorValue != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MaxSuperArmorValue);
      if (DisappearStart != 0L) hash ^= DisappearStart.GetHashCode();
      if (DisappearSeconds != 0) hash ^= DisappearSeconds.GetHashCode();
      if (BattleSide != 0) hash ^= BattleSide.GetHashCode();
      if (StatueStart != 0L) hash ^= StatueStart.GetHashCode();
      if (StatueSeconds != 0) hash ^= StatueSeconds.GetHashCode();
      hash ^= buffDataList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Sex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Sex);
      }
      if (Level != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Level);
      }
      if (Experience != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Experience);
      }
      if (PosX != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(PosX);
      }
      if (PosY != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(PosY);
      }
      if (Direction != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Direction);
      }
      if (LifeValue != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(LifeValue);
      }
      if (MaxLifeValue != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(MaxLifeValue);
      }
      if (MagicValue != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(MagicValue);
      }
      if (MaxMagicValue != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(MaxMagicValue);
      }
      if (EquipmentBody != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(EquipmentBody);
      }
      if (ExtensionId != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(ExtensionId);
      }
      if (MonsterType != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(MonsterType);
      }
      if (MasterRoleId != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(MasterRoleId);
      }
      if (AiControlType != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(AiControlType);
      }
      if (AnimalSound.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(AnimalSound);
      }
      if (MonsterLevel != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(MonsterLevel);
      }
      if (PoisonStart != 0L) {
        output.WriteRawTag(160, 1);
        output.WriteInt64(PoisonStart);
      }
      if (PoisonSeconds != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(PoisonSeconds);
      }
      if (StunStart != 0L) {
        output.WriteRawTag(176, 1);
        output.WriteInt64(StunStart);
      }
      if (StunSeconds != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(StunSeconds);
      }
      if (BattleWhichSide != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(BattleWhichSide);
      }
      if (SuperArmorValue != 0D) {
        output.WriteRawTag(201, 1);
        output.WriteDouble(SuperArmorValue);
      }
      if (MaxSuperArmorValue != 0D) {
        output.WriteRawTag(209, 1);
        output.WriteDouble(MaxSuperArmorValue);
      }
      if (DisappearStart != 0L) {
        output.WriteRawTag(216, 1);
        output.WriteInt64(DisappearStart);
      }
      if (DisappearSeconds != 0) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(DisappearSeconds);
      }
      if (BattleSide != 0) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(BattleSide);
      }
      if (StatueStart != 0L) {
        output.WriteRawTag(240, 1);
        output.WriteInt64(StatueStart);
      }
      if (StatueSeconds != 0) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(StatueSeconds);
      }
      buffDataList_.WriteTo(output, _repeated_buffDataList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Sex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Sex);
      }
      if (Level != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Level);
      }
      if (Experience != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Experience);
      }
      if (PosX != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(PosX);
      }
      if (PosY != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(PosY);
      }
      if (Direction != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Direction);
      }
      if (LifeValue != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(LifeValue);
      }
      if (MaxLifeValue != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(MaxLifeValue);
      }
      if (MagicValue != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(MagicValue);
      }
      if (MaxMagicValue != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(MaxMagicValue);
      }
      if (EquipmentBody != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(EquipmentBody);
      }
      if (ExtensionId != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(ExtensionId);
      }
      if (MonsterType != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(MonsterType);
      }
      if (MasterRoleId != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(MasterRoleId);
      }
      if (AiControlType != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(AiControlType);
      }
      if (AnimalSound.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(AnimalSound);
      }
      if (MonsterLevel != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(MonsterLevel);
      }
      if (PoisonStart != 0L) {
        output.WriteRawTag(160, 1);
        output.WriteInt64(PoisonStart);
      }
      if (PoisonSeconds != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(PoisonSeconds);
      }
      if (StunStart != 0L) {
        output.WriteRawTag(176, 1);
        output.WriteInt64(StunStart);
      }
      if (StunSeconds != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(StunSeconds);
      }
      if (BattleWhichSide != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(BattleWhichSide);
      }
      if (SuperArmorValue != 0D) {
        output.WriteRawTag(201, 1);
        output.WriteDouble(SuperArmorValue);
      }
      if (MaxSuperArmorValue != 0D) {
        output.WriteRawTag(209, 1);
        output.WriteDouble(MaxSuperArmorValue);
      }
      if (DisappearStart != 0L) {
        output.WriteRawTag(216, 1);
        output.WriteInt64(DisappearStart);
      }
      if (DisappearSeconds != 0) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(DisappearSeconds);
      }
      if (BattleSide != 0) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(BattleSide);
      }
      if (StatueStart != 0L) {
        output.WriteRawTag(240, 1);
        output.WriteInt64(StatueStart);
      }
      if (StatueSeconds != 0) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(StatueSeconds);
      }
      buffDataList_.WriteTo(ref output, _repeated_buffDataList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Sex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sex);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Experience != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Experience);
      }
      if (PosX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PosX);
      }
      if (PosY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PosY);
      }
      if (Direction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Direction);
      }
      if (LifeValue != 0D) {
        size += 1 + 8;
      }
      if (MaxLifeValue != 0D) {
        size += 1 + 8;
      }
      if (MagicValue != 0D) {
        size += 1 + 8;
      }
      if (MaxMagicValue != 0D) {
        size += 1 + 8;
      }
      if (EquipmentBody != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EquipmentBody);
      }
      if (ExtensionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExtensionId);
      }
      if (MonsterType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MonsterType);
      }
      if (MasterRoleId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MasterRoleId);
      }
      if (AiControlType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AiControlType);
      }
      if (AnimalSound.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AnimalSound);
      }
      if (MonsterLevel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MonsterLevel);
      }
      if (PoisonStart != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(PoisonStart);
      }
      if (PoisonSeconds != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PoisonSeconds);
      }
      if (StunStart != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(StunStart);
      }
      if (StunSeconds != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(StunSeconds);
      }
      if (BattleWhichSide != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BattleWhichSide);
      }
      if (SuperArmorValue != 0D) {
        size += 2 + 8;
      }
      if (MaxSuperArmorValue != 0D) {
        size += 2 + 8;
      }
      if (DisappearStart != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(DisappearStart);
      }
      if (DisappearSeconds != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DisappearSeconds);
      }
      if (BattleSide != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BattleSide);
      }
      if (StatueStart != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(StatueStart);
      }
      if (StatueSeconds != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(StatueSeconds);
      }
      size += buffDataList_.CalculateSize(_repeated_buffDataList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MonsterData other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Sex != 0) {
        Sex = other.Sex;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Experience != 0) {
        Experience = other.Experience;
      }
      if (other.PosX != 0) {
        PosX = other.PosX;
      }
      if (other.PosY != 0) {
        PosY = other.PosY;
      }
      if (other.Direction != 0) {
        Direction = other.Direction;
      }
      if (other.LifeValue != 0D) {
        LifeValue = other.LifeValue;
      }
      if (other.MaxLifeValue != 0D) {
        MaxLifeValue = other.MaxLifeValue;
      }
      if (other.MagicValue != 0D) {
        MagicValue = other.MagicValue;
      }
      if (other.MaxMagicValue != 0D) {
        MaxMagicValue = other.MaxMagicValue;
      }
      if (other.EquipmentBody != 0) {
        EquipmentBody = other.EquipmentBody;
      }
      if (other.ExtensionId != 0) {
        ExtensionId = other.ExtensionId;
      }
      if (other.MonsterType != 0) {
        MonsterType = other.MonsterType;
      }
      if (other.MasterRoleId != 0) {
        MasterRoleId = other.MasterRoleId;
      }
      if (other.AiControlType != 0) {
        AiControlType = other.AiControlType;
      }
      if (other.AnimalSound.Length != 0) {
        AnimalSound = other.AnimalSound;
      }
      if (other.MonsterLevel != 0) {
        MonsterLevel = other.MonsterLevel;
      }
      if (other.PoisonStart != 0L) {
        PoisonStart = other.PoisonStart;
      }
      if (other.PoisonSeconds != 0) {
        PoisonSeconds = other.PoisonSeconds;
      }
      if (other.StunStart != 0L) {
        StunStart = other.StunStart;
      }
      if (other.StunSeconds != 0) {
        StunSeconds = other.StunSeconds;
      }
      if (other.BattleWhichSide != 0) {
        BattleWhichSide = other.BattleWhichSide;
      }
      if (other.SuperArmorValue != 0D) {
        SuperArmorValue = other.SuperArmorValue;
      }
      if (other.MaxSuperArmorValue != 0D) {
        MaxSuperArmorValue = other.MaxSuperArmorValue;
      }
      if (other.DisappearStart != 0L) {
        DisappearStart = other.DisappearStart;
      }
      if (other.DisappearSeconds != 0) {
        DisappearSeconds = other.DisappearSeconds;
      }
      if (other.BattleSide != 0) {
        BattleSide = other.BattleSide;
      }
      if (other.StatueStart != 0L) {
        StatueStart = other.StatueStart;
      }
      if (other.StatueSeconds != 0) {
        StatueSeconds = other.StatueSeconds;
      }
      buffDataList_.Add(other.buffDataList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Sex = input.ReadInt32();
            break;
          }
          case 32: {
            Level = input.ReadInt32();
            break;
          }
          case 40: {
            Experience = input.ReadInt32();
            break;
          }
          case 48: {
            PosX = input.ReadInt32();
            break;
          }
          case 56: {
            PosY = input.ReadInt32();
            break;
          }
          case 64: {
            Direction = input.ReadInt32();
            break;
          }
          case 73: {
            LifeValue = input.ReadDouble();
            break;
          }
          case 81: {
            MaxLifeValue = input.ReadDouble();
            break;
          }
          case 89: {
            MagicValue = input.ReadDouble();
            break;
          }
          case 97: {
            MaxMagicValue = input.ReadDouble();
            break;
          }
          case 104: {
            EquipmentBody = input.ReadInt32();
            break;
          }
          case 112: {
            ExtensionId = input.ReadInt32();
            break;
          }
          case 120: {
            MonsterType = input.ReadInt32();
            break;
          }
          case 128: {
            MasterRoleId = input.ReadInt32();
            break;
          }
          case 136: {
            AiControlType = input.ReadInt32();
            break;
          }
          case 146: {
            AnimalSound = input.ReadString();
            break;
          }
          case 152: {
            MonsterLevel = input.ReadInt32();
            break;
          }
          case 160: {
            PoisonStart = input.ReadInt64();
            break;
          }
          case 168: {
            PoisonSeconds = input.ReadInt32();
            break;
          }
          case 176: {
            StunStart = input.ReadInt64();
            break;
          }
          case 184: {
            StunSeconds = input.ReadInt32();
            break;
          }
          case 192: {
            BattleWhichSide = input.ReadInt32();
            break;
          }
          case 201: {
            SuperArmorValue = input.ReadDouble();
            break;
          }
          case 209: {
            MaxSuperArmorValue = input.ReadDouble();
            break;
          }
          case 216: {
            DisappearStart = input.ReadInt64();
            break;
          }
          case 224: {
            DisappearSeconds = input.ReadInt32();
            break;
          }
          case 232: {
            BattleSide = input.ReadInt32();
            break;
          }
          case 240: {
            StatueStart = input.ReadInt64();
            break;
          }
          case 248: {
            StatueSeconds = input.ReadInt32();
            break;
          }
          case 258: {
            buffDataList_.AddEntriesFrom(input, _repeated_buffDataList_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Sex = input.ReadInt32();
            break;
          }
          case 32: {
            Level = input.ReadInt32();
            break;
          }
          case 40: {
            Experience = input.ReadInt32();
            break;
          }
          case 48: {
            PosX = input.ReadInt32();
            break;
          }
          case 56: {
            PosY = input.ReadInt32();
            break;
          }
          case 64: {
            Direction = input.ReadInt32();
            break;
          }
          case 73: {
            LifeValue = input.ReadDouble();
            break;
          }
          case 81: {
            MaxLifeValue = input.ReadDouble();
            break;
          }
          case 89: {
            MagicValue = input.ReadDouble();
            break;
          }
          case 97: {
            MaxMagicValue = input.ReadDouble();
            break;
          }
          case 104: {
            EquipmentBody = input.ReadInt32();
            break;
          }
          case 112: {
            ExtensionId = input.ReadInt32();
            break;
          }
          case 120: {
            MonsterType = input.ReadInt32();
            break;
          }
          case 128: {
            MasterRoleId = input.ReadInt32();
            break;
          }
          case 136: {
            AiControlType = input.ReadInt32();
            break;
          }
          case 146: {
            AnimalSound = input.ReadString();
            break;
          }
          case 152: {
            MonsterLevel = input.ReadInt32();
            break;
          }
          case 160: {
            PoisonStart = input.ReadInt64();
            break;
          }
          case 168: {
            PoisonSeconds = input.ReadInt32();
            break;
          }
          case 176: {
            StunStart = input.ReadInt64();
            break;
          }
          case 184: {
            StunSeconds = input.ReadInt32();
            break;
          }
          case 192: {
            BattleWhichSide = input.ReadInt32();
            break;
          }
          case 201: {
            SuperArmorValue = input.ReadDouble();
            break;
          }
          case 209: {
            MaxSuperArmorValue = input.ReadDouble();
            break;
          }
          case 216: {
            DisappearStart = input.ReadInt64();
            break;
          }
          case 224: {
            DisappearSeconds = input.ReadInt32();
            break;
          }
          case 232: {
            BattleSide = input.ReadInt32();
            break;
          }
          case 240: {
            StatueStart = input.ReadInt64();
            break;
          }
          case 248: {
            StatueSeconds = input.ReadInt32();
            break;
          }
          case 258: {
            buffDataList_.AddEntriesFrom(ref input, _repeated_buffDataList_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
