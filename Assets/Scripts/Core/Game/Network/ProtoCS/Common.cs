// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Common.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace P5.Protobuf {

  /// <summary>Holder for reflection information generated from Common.proto</summary>
  public static partial class CommonReflection {

    #region Descriptor
    /// <summary>File descriptor for Common.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CommonReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxDb21tb24ucHJvdG8SC1A1LlByb3RvYnVmIh8KB015UG9pbnQSCQoBeBgB",
            "IAEoBRIJCgF5GAIgASgFIjYKD0NvbW1vbkVycm9yQ29kZRITCgtlcnJvckNv",
            "ZGVJZBgBIAEoBRIOCgZ2YWx1ZTEYAiABKAkiPwoLQ2xpZW50SGVhcnQSEQoJ",
            "cmFuZFRva2VuGAEgASgFEh0KFXJlcG9ydENsaWVudFJlYWxUaWNrcxgCIAEo",
            "AyI+ChNDbGllbnRIZWFydFJlc3BvbnNlEhMKC3NlcnZlclRpY2tzGAEgASgD",
            "EhIKCmFsbG93VGlja3MYAiABKAUiRAoLU3ByaXRlTGVhdmUSDgoGcm9sZUlk",
            "GAEgASgFEhIKCnNwcml0ZVR5cGUYAiABKAUSEQoJbGlmZVZhbHVlGAMgASgB",
            "IpcFCgpHb29kc0RhdGEyEgwKBGRiSWQYASABKAUSDwoHZ29vZHNJZBgCIAEo",
            "BRIPCgdpc1VzaW5nGAMgASgFEhIKCmZvcmdlTGV2ZWwYBCABKAUSEQoJc3Rh",
            "cnRUaW1lGAUgASgJEg8KB2VuZFRpbWUYBiABKAkSDAoEc2l0ZRgHIAEoBRIP",
            "CgdxdWFsaXR5GAggASgFEg0KBXByb3BzGAkgASgJEg4KBmdDb3VudBgKIAEo",
            "BRIPCgdiaW5kaW5nGAsgASgFEhEKCWpld2VsTGlzdBgMIAEoCRIQCghiYWdJ",
            "bmRleBgNIAEoBRISCgpzYWxlTW9uZXkxGA4gASgFEhAKCHNhbGVHb2lkGA8g",
            "ASgFEhAKCHNhbGVDb2luGBAgASgFEhQKDGFkZFByb3BJbmRleBgRIAEoBRIR",
            "Cglib3JuSW5kZXgYEiABKAUSDQoFbHVja3kYEyABKAUSDgoGc3Ryb25nGBQg",
            "ASgFEhYKDmV4Y2VsbGVuY2VJbmZvGBUgASgFEhQKDEFwcGVuZFByb3BMdhgW",
            "IAEoBRIZChFlcXVpcENoYW5nZUxpZmVMdhgXIAEoBRIRCgl3YXNoUHJvcHMY",
            "GCADKAUSGAoQZWxlbWVudGhydHNQcm9wcxgZIAMoBRIPCgdwcml2aXR5GBog",
            "ASgFEhYKDmV4Y2VsbGVuY2VMaXN0GBsgAygFEhAKCGZvcmdlRXhwGBwgASgF",
            "Eg8KB2dlbUxpc3QYHSADKAUSDQoFY29sb3IYHiABKAUSFgoOYXV0aGVudGlj",
            "YXRpb24YHyABKAUSEAoIc2VsbFRpbWUYICABKAkSDgoGaXNMb2NrGCEgASgF",
            "EhAKCGJvcm5UaW1lGCIgASgDEhAKCG1ha2VOYW1lGCMgASgJIj0KD0dvb2Rz",
            "TGlzdFByb3RvMhIqCglnb29kc0xpc3QYASADKAsyFy5QNS5Qcm90b2J1Zi5H",
            "b29kc0RhdGEyYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::P5.Protobuf.MyPoint), global::P5.Protobuf.MyPoint.Parser, new[]{ "X", "Y" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::P5.Protobuf.CommonErrorCode), global::P5.Protobuf.CommonErrorCode.Parser, new[]{ "ErrorCodeId", "Value1" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::P5.Protobuf.ClientHeart), global::P5.Protobuf.ClientHeart.Parser, new[]{ "RandToken", "ReportClientRealTicks" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::P5.Protobuf.ClientHeartResponse), global::P5.Protobuf.ClientHeartResponse.Parser, new[]{ "ServerTicks", "AllowTicks" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::P5.Protobuf.SpriteLeave), global::P5.Protobuf.SpriteLeave.Parser, new[]{ "RoleId", "SpriteType", "LifeValue" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::P5.Protobuf.GoodsData2), global::P5.Protobuf.GoodsData2.Parser, new[]{ "DbId", "GoodsId", "IsUsing", "ForgeLevel", "StartTime", "EndTime", "Site", "Quality", "Props", "GCount", "Binding", "JewelList", "BagIndex", "SaleMoney1", "SaleGoid", "SaleCoin", "AddPropIndex", "BornIndex", "Lucky", "Strong", "ExcellenceInfo", "AppendPropLv", "EquipChangeLifeLv", "WashProps", "ElementhrtsProps", "Privity", "ExcellenceList", "ForgeExp", "GemList", "Color", "Authentication", "SellTime", "IsLock", "BornTime", "MakeName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::P5.Protobuf.GoodsListProto2), global::P5.Protobuf.GoodsListProto2.Parser, new[]{ "GoodsList" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///座標點
  /// </summary>
  public sealed partial class MyPoint : pb::IMessage<MyPoint>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MyPoint> _parser = new pb::MessageParser<MyPoint>(() => new MyPoint());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MyPoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::P5.Protobuf.CommonReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MyPoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MyPoint(MyPoint other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MyPoint Clone() {
      return new MyPoint(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private int x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private int y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MyPoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MyPoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (X != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Y);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (X != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Y);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MyPoint other) {
      if (other == null) {
        return;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            X = input.ReadInt32();
            break;
          }
          case 16: {
            Y = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            X = input.ReadInt32();
            break;
          }
          case 16: {
            Y = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///錯誤碼
  /// </summary>
  public sealed partial class CommonErrorCode : pb::IMessage<CommonErrorCode>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CommonErrorCode> _parser = new pb::MessageParser<CommonErrorCode>(() => new CommonErrorCode());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommonErrorCode> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::P5.Protobuf.CommonReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonErrorCode() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonErrorCode(CommonErrorCode other) : this() {
      errorCodeId_ = other.errorCodeId_;
      value1_ = other.value1_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonErrorCode Clone() {
      return new CommonErrorCode(this);
    }

    /// <summary>Field number for the "errorCodeId" field.</summary>
    public const int ErrorCodeIdFieldNumber = 1;
    private int errorCodeId_;
    /// <summary>
    ///對應CommonErrorCodeEnum的值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ErrorCodeId {
      get { return errorCodeId_; }
      set {
        errorCodeId_ = value;
      }
    }

    /// <summary>Field number for the "value1" field.</summary>
    public const int Value1FieldNumber = 2;
    private string value1_ = "";
    /// <summary>
    ///附帶參數  可能某些error需要一些回傳值 如:時間
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value1 {
      get { return value1_; }
      set {
        value1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommonErrorCode);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommonErrorCode other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ErrorCodeId != other.ErrorCodeId) return false;
      if (Value1 != other.Value1) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ErrorCodeId != 0) hash ^= ErrorCodeId.GetHashCode();
      if (Value1.Length != 0) hash ^= Value1.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ErrorCodeId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ErrorCodeId);
      }
      if (Value1.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value1);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ErrorCodeId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ErrorCodeId);
      }
      if (Value1.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value1);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ErrorCodeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ErrorCodeId);
      }
      if (Value1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value1);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommonErrorCode other) {
      if (other == null) {
        return;
      }
      if (other.ErrorCodeId != 0) {
        ErrorCodeId = other.ErrorCodeId;
      }
      if (other.Value1.Length != 0) {
        Value1 = other.Value1;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ErrorCodeId = input.ReadInt32();
            break;
          }
          case 18: {
            Value1 = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ErrorCodeId = input.ReadInt32();
            break;
          }
          case 18: {
            Value1 = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///客戶端心跳
  /// </summary>
  public sealed partial class ClientHeart : pb::IMessage<ClientHeart>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ClientHeart> _parser = new pb::MessageParser<ClientHeart>(() => new ClientHeart());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientHeart> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::P5.Protobuf.CommonReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientHeart() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientHeart(ClientHeart other) : this() {
      randToken_ = other.randToken_;
      reportClientRealTicks_ = other.reportClientRealTicks_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientHeart Clone() {
      return new ClientHeart(this);
    }

    /// <summary>Field number for the "randToken" field.</summary>
    public const int RandTokenFieldNumber = 1;
    private int randToken_;
    /// <summary>
    /// TcpRandkey  用共用的randomseed 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RandToken {
      get { return randToken_; }
      set {
        randToken_ = value;
      }
    }

    /// <summary>Field number for the "reportClientRealTicks" field.</summary>
    public const int ReportClientRealTicksFieldNumber = 2;
    private long reportClientRealTicks_;
    /// <summary>
    ///檢查心跳加速用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ReportClientRealTicks {
      get { return reportClientRealTicks_; }
      set {
        reportClientRealTicks_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientHeart);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientHeart other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RandToken != other.RandToken) return false;
      if (ReportClientRealTicks != other.ReportClientRealTicks) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RandToken != 0) hash ^= RandToken.GetHashCode();
      if (ReportClientRealTicks != 0L) hash ^= ReportClientRealTicks.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (RandToken != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RandToken);
      }
      if (ReportClientRealTicks != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ReportClientRealTicks);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (RandToken != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RandToken);
      }
      if (ReportClientRealTicks != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ReportClientRealTicks);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RandToken != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RandToken);
      }
      if (ReportClientRealTicks != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ReportClientRealTicks);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientHeart other) {
      if (other == null) {
        return;
      }
      if (other.RandToken != 0) {
        RandToken = other.RandToken;
      }
      if (other.ReportClientRealTicks != 0L) {
        ReportClientRealTicks = other.ReportClientRealTicks;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RandToken = input.ReadInt32();
            break;
          }
          case 16: {
            ReportClientRealTicks = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            RandToken = input.ReadInt32();
            break;
          }
          case 16: {
            ReportClientRealTicks = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///客戶端心跳回傳
  /// </summary>
  public sealed partial class ClientHeartResponse : pb::IMessage<ClientHeartResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ClientHeartResponse> _parser = new pb::MessageParser<ClientHeartResponse>(() => new ClientHeartResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientHeartResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::P5.Protobuf.CommonReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientHeartResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientHeartResponse(ClientHeartResponse other) : this() {
      serverTicks_ = other.serverTicks_;
      allowTicks_ = other.allowTicks_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientHeartResponse Clone() {
      return new ClientHeartResponse(this);
    }

    /// <summary>Field number for the "serverTicks" field.</summary>
    public const int ServerTicksFieldNumber = 1;
    private long serverTicks_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ServerTicks {
      get { return serverTicks_; }
      set {
        serverTicks_ = value;
      }
    }

    /// <summary>Field number for the "allowTicks" field.</summary>
    public const int AllowTicksFieldNumber = 2;
    private int allowTicks_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AllowTicks {
      get { return allowTicks_; }
      set {
        allowTicks_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientHeartResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientHeartResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServerTicks != other.ServerTicks) return false;
      if (AllowTicks != other.AllowTicks) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServerTicks != 0L) hash ^= ServerTicks.GetHashCode();
      if (AllowTicks != 0) hash ^= AllowTicks.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ServerTicks != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ServerTicks);
      }
      if (AllowTicks != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AllowTicks);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ServerTicks != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ServerTicks);
      }
      if (AllowTicks != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AllowTicks);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServerTicks != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ServerTicks);
      }
      if (AllowTicks != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AllowTicks);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientHeartResponse other) {
      if (other == null) {
        return;
      }
      if (other.ServerTicks != 0L) {
        ServerTicks = other.ServerTicks;
      }
      if (other.AllowTicks != 0) {
        AllowTicks = other.AllowTicks;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ServerTicks = input.ReadInt64();
            break;
          }
          case 16: {
            AllowTicks = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ServerTicks = input.ReadInt64();
            break;
          }
          case 16: {
            AllowTicks = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///離開視野範圍
  /// </summary>
  public sealed partial class SpriteLeave : pb::IMessage<SpriteLeave>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SpriteLeave> _parser = new pb::MessageParser<SpriteLeave>(() => new SpriteLeave());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpriteLeave> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::P5.Protobuf.CommonReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpriteLeave() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpriteLeave(SpriteLeave other) : this() {
      roleId_ = other.roleId_;
      spriteType_ = other.spriteType_;
      lifeValue_ = other.lifeValue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpriteLeave Clone() {
      return new SpriteLeave(this);
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private int roleId_;
    /// <summary>
    ///離開的id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "spriteType" field.</summary>
    public const int SpriteTypeFieldNumber = 2;
    private int spriteType_;
    /// <summary>
    ///類型  Other , Monster
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpriteType {
      get { return spriteType_; }
      set {
        spriteType_ = value;
      }
    }

    /// <summary>Field number for the "lifeValue" field.</summary>
    public const int LifeValueFieldNumber = 3;
    private double lifeValue_;
    /// <summary>
    ///當前血量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LifeValue {
      get { return lifeValue_; }
      set {
        lifeValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SpriteLeave);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SpriteLeave other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoleId != other.RoleId) return false;
      if (SpriteType != other.SpriteType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LifeValue, other.LifeValue)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoleId != 0) hash ^= RoleId.GetHashCode();
      if (SpriteType != 0) hash ^= SpriteType.GetHashCode();
      if (LifeValue != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LifeValue);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (RoleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoleId);
      }
      if (SpriteType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SpriteType);
      }
      if (LifeValue != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(LifeValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (RoleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoleId);
      }
      if (SpriteType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SpriteType);
      }
      if (LifeValue != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(LifeValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoleId);
      }
      if (SpriteType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpriteType);
      }
      if (LifeValue != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SpriteLeave other) {
      if (other == null) {
        return;
      }
      if (other.RoleId != 0) {
        RoleId = other.RoleId;
      }
      if (other.SpriteType != 0) {
        SpriteType = other.SpriteType;
      }
      if (other.LifeValue != 0D) {
        LifeValue = other.LifeValue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoleId = input.ReadInt32();
            break;
          }
          case 16: {
            SpriteType = input.ReadInt32();
            break;
          }
          case 25: {
            LifeValue = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            RoleId = input.ReadInt32();
            break;
          }
          case 16: {
            SpriteType = input.ReadInt32();
            break;
          }
          case 25: {
            LifeValue = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///物品
  /// </summary>
  public sealed partial class GoodsData2 : pb::IMessage<GoodsData2>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GoodsData2> _parser = new pb::MessageParser<GoodsData2>(() => new GoodsData2());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GoodsData2> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::P5.Protobuf.CommonReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GoodsData2() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GoodsData2(GoodsData2 other) : this() {
      dbId_ = other.dbId_;
      goodsId_ = other.goodsId_;
      isUsing_ = other.isUsing_;
      forgeLevel_ = other.forgeLevel_;
      startTime_ = other.startTime_;
      endTime_ = other.endTime_;
      site_ = other.site_;
      quality_ = other.quality_;
      props_ = other.props_;
      gCount_ = other.gCount_;
      binding_ = other.binding_;
      jewelList_ = other.jewelList_;
      bagIndex_ = other.bagIndex_;
      saleMoney1_ = other.saleMoney1_;
      saleGoid_ = other.saleGoid_;
      saleCoin_ = other.saleCoin_;
      addPropIndex_ = other.addPropIndex_;
      bornIndex_ = other.bornIndex_;
      lucky_ = other.lucky_;
      strong_ = other.strong_;
      excellenceInfo_ = other.excellenceInfo_;
      appendPropLv_ = other.appendPropLv_;
      equipChangeLifeLv_ = other.equipChangeLifeLv_;
      washProps_ = other.washProps_.Clone();
      elementhrtsProps_ = other.elementhrtsProps_.Clone();
      privity_ = other.privity_;
      excellenceList_ = other.excellenceList_.Clone();
      forgeExp_ = other.forgeExp_;
      gemList_ = other.gemList_.Clone();
      color_ = other.color_;
      authentication_ = other.authentication_;
      sellTime_ = other.sellTime_;
      isLock_ = other.isLock_;
      bornTime_ = other.bornTime_;
      makeName_ = other.makeName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GoodsData2 Clone() {
      return new GoodsData2(this);
    }

    /// <summary>Field number for the "dbId" field.</summary>
    public const int DbIdFieldNumber = 1;
    private int dbId_;
    /// <summary>
    ///database裡的Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DbId {
      get { return dbId_; }
      set {
        dbId_ = value;
      }
    }

    /// <summary>Field number for the "goodsId" field.</summary>
    public const int GoodsIdFieldNumber = 2;
    private int goodsId_;
    /// <summary>
    ///物品id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GoodsId {
      get { return goodsId_; }
      set {
        goodsId_ = value;
      }
    }

    /// <summary>Field number for the "isUsing" field.</summary>
    public const int IsUsingFieldNumber = 3;
    private int isUsing_;
    /// <summary>
    ///是否使用中 0:否 1:是
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsUsing {
      get { return isUsing_; }
      set {
        isUsing_ = value;
      }
    }

    /// <summary>Field number for the "forgeLevel" field.</summary>
    public const int ForgeLevelFieldNumber = 4;
    private int forgeLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ForgeLevel {
      get { return forgeLevel_; }
      set {
        forgeLevel_ = value;
      }
    }

    /// <summary>Field number for the "startTime" field.</summary>
    public const int StartTimeFieldNumber = 5;
    private string startTime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StartTime {
      get { return startTime_; }
      set {
        startTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "endTime" field.</summary>
    public const int EndTimeFieldNumber = 6;
    private string endTime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EndTime {
      get { return endTime_; }
      set {
        endTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "site" field.</summary>
    public const int SiteFieldNumber = 7;
    private int site_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Site {
      get { return site_; }
      set {
        site_ = value;
      }
    }

    /// <summary>Field number for the "quality" field.</summary>
    public const int QualityFieldNumber = 8;
    private int quality_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Quality {
      get { return quality_; }
      set {
        quality_ = value;
      }
    }

    /// <summary>Field number for the "props" field.</summary>
    public const int PropsFieldNumber = 9;
    private string props_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Props {
      get { return props_; }
      set {
        props_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gCount" field.</summary>
    public const int GCountFieldNumber = 10;
    private int gCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GCount {
      get { return gCount_; }
      set {
        gCount_ = value;
      }
    }

    /// <summary>Field number for the "binding" field.</summary>
    public const int BindingFieldNumber = 11;
    private int binding_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Binding {
      get { return binding_; }
      set {
        binding_ = value;
      }
    }

    /// <summary>Field number for the "jewelList" field.</summary>
    public const int JewelListFieldNumber = 12;
    private string jewelList_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string JewelList {
      get { return jewelList_; }
      set {
        jewelList_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bagIndex" field.</summary>
    public const int BagIndexFieldNumber = 13;
    private int bagIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BagIndex {
      get { return bagIndex_; }
      set {
        bagIndex_ = value;
      }
    }

    /// <summary>Field number for the "saleMoney1" field.</summary>
    public const int SaleMoney1FieldNumber = 14;
    private int saleMoney1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SaleMoney1 {
      get { return saleMoney1_; }
      set {
        saleMoney1_ = value;
      }
    }

    /// <summary>Field number for the "saleGoid" field.</summary>
    public const int SaleGoidFieldNumber = 15;
    private int saleGoid_;
    /// <summary>
    ///販賣元寶
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SaleGoid {
      get { return saleGoid_; }
      set {
        saleGoid_ = value;
      }
    }

    /// <summary>Field number for the "saleCoin" field.</summary>
    public const int SaleCoinFieldNumber = 16;
    private int saleCoin_;
    /// <summary>
    ///販賣銀票
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SaleCoin {
      get { return saleCoin_; }
      set {
        saleCoin_ = value;
      }
    }

    /// <summary>Field number for the "addPropIndex" field.</summary>
    public const int AddPropIndexFieldNumber = 17;
    private int addPropIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AddPropIndex {
      get { return addPropIndex_; }
      set {
        addPropIndex_ = value;
      }
    }

    /// <summary>Field number for the "bornIndex" field.</summary>
    public const int BornIndexFieldNumber = 18;
    private int bornIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BornIndex {
      get { return bornIndex_; }
      set {
        bornIndex_ = value;
      }
    }

    /// <summary>Field number for the "lucky" field.</summary>
    public const int LuckyFieldNumber = 19;
    private int lucky_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Lucky {
      get { return lucky_; }
      set {
        lucky_ = value;
      }
    }

    /// <summary>Field number for the "strong" field.</summary>
    public const int StrongFieldNumber = 20;
    private int strong_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Strong {
      get { return strong_; }
      set {
        strong_ = value;
      }
    }

    /// <summary>Field number for the "excellenceInfo" field.</summary>
    public const int ExcellenceInfoFieldNumber = 21;
    private int excellenceInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExcellenceInfo {
      get { return excellenceInfo_; }
      set {
        excellenceInfo_ = value;
      }
    }

    /// <summary>Field number for the "AppendPropLv" field.</summary>
    public const int AppendPropLvFieldNumber = 22;
    private int appendPropLv_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AppendPropLv {
      get { return appendPropLv_; }
      set {
        appendPropLv_ = value;
      }
    }

    /// <summary>Field number for the "equipChangeLifeLv" field.</summary>
    public const int EquipChangeLifeLvFieldNumber = 23;
    private int equipChangeLifeLv_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EquipChangeLifeLv {
      get { return equipChangeLifeLv_; }
      set {
        equipChangeLifeLv_ = value;
      }
    }

    /// <summary>Field number for the "washProps" field.</summary>
    public const int WashPropsFieldNumber = 24;
    private static readonly pb::FieldCodec<int> _repeated_washProps_codec
        = pb::FieldCodec.ForInt32(194);
    private readonly pbc::RepeatedField<int> washProps_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> WashProps {
      get { return washProps_; }
    }

    /// <summary>Field number for the "elementhrtsProps" field.</summary>
    public const int ElementhrtsPropsFieldNumber = 25;
    private static readonly pb::FieldCodec<int> _repeated_elementhrtsProps_codec
        = pb::FieldCodec.ForInt32(202);
    private readonly pbc::RepeatedField<int> elementhrtsProps_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///元素
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> ElementhrtsProps {
      get { return elementhrtsProps_; }
    }

    /// <summary>Field number for the "privity" field.</summary>
    public const int PrivityFieldNumber = 26;
    private int privity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Privity {
      get { return privity_; }
      set {
        privity_ = value;
      }
    }

    /// <summary>Field number for the "excellenceList" field.</summary>
    public const int ExcellenceListFieldNumber = 27;
    private static readonly pb::FieldCodec<int> _repeated_excellenceList_codec
        = pb::FieldCodec.ForInt32(218);
    private readonly pbc::RepeatedField<int> excellenceList_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> ExcellenceList {
      get { return excellenceList_; }
    }

    /// <summary>Field number for the "forgeExp" field.</summary>
    public const int ForgeExpFieldNumber = 28;
    private int forgeExp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ForgeExp {
      get { return forgeExp_; }
      set {
        forgeExp_ = value;
      }
    }

    /// <summary>Field number for the "gemList" field.</summary>
    public const int GemListFieldNumber = 29;
    private static readonly pb::FieldCodec<int> _repeated_gemList_codec
        = pb::FieldCodec.ForInt32(234);
    private readonly pbc::RepeatedField<int> gemList_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> GemList {
      get { return gemList_; }
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 30;
    private int color_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    /// <summary>Field number for the "authentication" field.</summary>
    public const int AuthenticationFieldNumber = 31;
    private int authentication_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Authentication {
      get { return authentication_; }
      set {
        authentication_ = value;
      }
    }

    /// <summary>Field number for the "sellTime" field.</summary>
    public const int SellTimeFieldNumber = 32;
    private string sellTime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SellTime {
      get { return sellTime_; }
      set {
        sellTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isLock" field.</summary>
    public const int IsLockFieldNumber = 33;
    private int isLock_;
    /// <summary>
    ///是否鎖定  0:否 1:是
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsLock {
      get { return isLock_; }
      set {
        isLock_ = value;
      }
    }

    /// <summary>Field number for the "bornTime" field.</summary>
    public const int BornTimeFieldNumber = 34;
    private long bornTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BornTime {
      get { return bornTime_; }
      set {
        bornTime_ = value;
      }
    }

    /// <summary>Field number for the "makeName" field.</summary>
    public const int MakeNameFieldNumber = 35;
    private string makeName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MakeName {
      get { return makeName_; }
      set {
        makeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GoodsData2);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GoodsData2 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DbId != other.DbId) return false;
      if (GoodsId != other.GoodsId) return false;
      if (IsUsing != other.IsUsing) return false;
      if (ForgeLevel != other.ForgeLevel) return false;
      if (StartTime != other.StartTime) return false;
      if (EndTime != other.EndTime) return false;
      if (Site != other.Site) return false;
      if (Quality != other.Quality) return false;
      if (Props != other.Props) return false;
      if (GCount != other.GCount) return false;
      if (Binding != other.Binding) return false;
      if (JewelList != other.JewelList) return false;
      if (BagIndex != other.BagIndex) return false;
      if (SaleMoney1 != other.SaleMoney1) return false;
      if (SaleGoid != other.SaleGoid) return false;
      if (SaleCoin != other.SaleCoin) return false;
      if (AddPropIndex != other.AddPropIndex) return false;
      if (BornIndex != other.BornIndex) return false;
      if (Lucky != other.Lucky) return false;
      if (Strong != other.Strong) return false;
      if (ExcellenceInfo != other.ExcellenceInfo) return false;
      if (AppendPropLv != other.AppendPropLv) return false;
      if (EquipChangeLifeLv != other.EquipChangeLifeLv) return false;
      if(!washProps_.Equals(other.washProps_)) return false;
      if(!elementhrtsProps_.Equals(other.elementhrtsProps_)) return false;
      if (Privity != other.Privity) return false;
      if(!excellenceList_.Equals(other.excellenceList_)) return false;
      if (ForgeExp != other.ForgeExp) return false;
      if(!gemList_.Equals(other.gemList_)) return false;
      if (Color != other.Color) return false;
      if (Authentication != other.Authentication) return false;
      if (SellTime != other.SellTime) return false;
      if (IsLock != other.IsLock) return false;
      if (BornTime != other.BornTime) return false;
      if (MakeName != other.MakeName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DbId != 0) hash ^= DbId.GetHashCode();
      if (GoodsId != 0) hash ^= GoodsId.GetHashCode();
      if (IsUsing != 0) hash ^= IsUsing.GetHashCode();
      if (ForgeLevel != 0) hash ^= ForgeLevel.GetHashCode();
      if (StartTime.Length != 0) hash ^= StartTime.GetHashCode();
      if (EndTime.Length != 0) hash ^= EndTime.GetHashCode();
      if (Site != 0) hash ^= Site.GetHashCode();
      if (Quality != 0) hash ^= Quality.GetHashCode();
      if (Props.Length != 0) hash ^= Props.GetHashCode();
      if (GCount != 0) hash ^= GCount.GetHashCode();
      if (Binding != 0) hash ^= Binding.GetHashCode();
      if (JewelList.Length != 0) hash ^= JewelList.GetHashCode();
      if (BagIndex != 0) hash ^= BagIndex.GetHashCode();
      if (SaleMoney1 != 0) hash ^= SaleMoney1.GetHashCode();
      if (SaleGoid != 0) hash ^= SaleGoid.GetHashCode();
      if (SaleCoin != 0) hash ^= SaleCoin.GetHashCode();
      if (AddPropIndex != 0) hash ^= AddPropIndex.GetHashCode();
      if (BornIndex != 0) hash ^= BornIndex.GetHashCode();
      if (Lucky != 0) hash ^= Lucky.GetHashCode();
      if (Strong != 0) hash ^= Strong.GetHashCode();
      if (ExcellenceInfo != 0) hash ^= ExcellenceInfo.GetHashCode();
      if (AppendPropLv != 0) hash ^= AppendPropLv.GetHashCode();
      if (EquipChangeLifeLv != 0) hash ^= EquipChangeLifeLv.GetHashCode();
      hash ^= washProps_.GetHashCode();
      hash ^= elementhrtsProps_.GetHashCode();
      if (Privity != 0) hash ^= Privity.GetHashCode();
      hash ^= excellenceList_.GetHashCode();
      if (ForgeExp != 0) hash ^= ForgeExp.GetHashCode();
      hash ^= gemList_.GetHashCode();
      if (Color != 0) hash ^= Color.GetHashCode();
      if (Authentication != 0) hash ^= Authentication.GetHashCode();
      if (SellTime.Length != 0) hash ^= SellTime.GetHashCode();
      if (IsLock != 0) hash ^= IsLock.GetHashCode();
      if (BornTime != 0L) hash ^= BornTime.GetHashCode();
      if (MakeName.Length != 0) hash ^= MakeName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (DbId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DbId);
      }
      if (GoodsId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GoodsId);
      }
      if (IsUsing != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(IsUsing);
      }
      if (ForgeLevel != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ForgeLevel);
      }
      if (StartTime.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(StartTime);
      }
      if (EndTime.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(EndTime);
      }
      if (Site != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Site);
      }
      if (Quality != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Quality);
      }
      if (Props.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Props);
      }
      if (GCount != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(GCount);
      }
      if (Binding != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Binding);
      }
      if (JewelList.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(JewelList);
      }
      if (BagIndex != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(BagIndex);
      }
      if (SaleMoney1 != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(SaleMoney1);
      }
      if (SaleGoid != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(SaleGoid);
      }
      if (SaleCoin != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(SaleCoin);
      }
      if (AddPropIndex != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(AddPropIndex);
      }
      if (BornIndex != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(BornIndex);
      }
      if (Lucky != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(Lucky);
      }
      if (Strong != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(Strong);
      }
      if (ExcellenceInfo != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(ExcellenceInfo);
      }
      if (AppendPropLv != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(AppendPropLv);
      }
      if (EquipChangeLifeLv != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(EquipChangeLifeLv);
      }
      washProps_.WriteTo(output, _repeated_washProps_codec);
      elementhrtsProps_.WriteTo(output, _repeated_elementhrtsProps_codec);
      if (Privity != 0) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(Privity);
      }
      excellenceList_.WriteTo(output, _repeated_excellenceList_codec);
      if (ForgeExp != 0) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(ForgeExp);
      }
      gemList_.WriteTo(output, _repeated_gemList_codec);
      if (Color != 0) {
        output.WriteRawTag(240, 1);
        output.WriteInt32(Color);
      }
      if (Authentication != 0) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(Authentication);
      }
      if (SellTime.Length != 0) {
        output.WriteRawTag(130, 2);
        output.WriteString(SellTime);
      }
      if (IsLock != 0) {
        output.WriteRawTag(136, 2);
        output.WriteInt32(IsLock);
      }
      if (BornTime != 0L) {
        output.WriteRawTag(144, 2);
        output.WriteInt64(BornTime);
      }
      if (MakeName.Length != 0) {
        output.WriteRawTag(154, 2);
        output.WriteString(MakeName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (DbId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DbId);
      }
      if (GoodsId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GoodsId);
      }
      if (IsUsing != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(IsUsing);
      }
      if (ForgeLevel != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ForgeLevel);
      }
      if (StartTime.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(StartTime);
      }
      if (EndTime.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(EndTime);
      }
      if (Site != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Site);
      }
      if (Quality != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Quality);
      }
      if (Props.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Props);
      }
      if (GCount != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(GCount);
      }
      if (Binding != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Binding);
      }
      if (JewelList.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(JewelList);
      }
      if (BagIndex != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(BagIndex);
      }
      if (SaleMoney1 != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(SaleMoney1);
      }
      if (SaleGoid != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(SaleGoid);
      }
      if (SaleCoin != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(SaleCoin);
      }
      if (AddPropIndex != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(AddPropIndex);
      }
      if (BornIndex != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(BornIndex);
      }
      if (Lucky != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(Lucky);
      }
      if (Strong != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(Strong);
      }
      if (ExcellenceInfo != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(ExcellenceInfo);
      }
      if (AppendPropLv != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(AppendPropLv);
      }
      if (EquipChangeLifeLv != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(EquipChangeLifeLv);
      }
      washProps_.WriteTo(ref output, _repeated_washProps_codec);
      elementhrtsProps_.WriteTo(ref output, _repeated_elementhrtsProps_codec);
      if (Privity != 0) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(Privity);
      }
      excellenceList_.WriteTo(ref output, _repeated_excellenceList_codec);
      if (ForgeExp != 0) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(ForgeExp);
      }
      gemList_.WriteTo(ref output, _repeated_gemList_codec);
      if (Color != 0) {
        output.WriteRawTag(240, 1);
        output.WriteInt32(Color);
      }
      if (Authentication != 0) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(Authentication);
      }
      if (SellTime.Length != 0) {
        output.WriteRawTag(130, 2);
        output.WriteString(SellTime);
      }
      if (IsLock != 0) {
        output.WriteRawTag(136, 2);
        output.WriteInt32(IsLock);
      }
      if (BornTime != 0L) {
        output.WriteRawTag(144, 2);
        output.WriteInt64(BornTime);
      }
      if (MakeName.Length != 0) {
        output.WriteRawTag(154, 2);
        output.WriteString(MakeName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DbId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DbId);
      }
      if (GoodsId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GoodsId);
      }
      if (IsUsing != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsUsing);
      }
      if (ForgeLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ForgeLevel);
      }
      if (StartTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StartTime);
      }
      if (EndTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EndTime);
      }
      if (Site != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Site);
      }
      if (Quality != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Quality);
      }
      if (Props.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Props);
      }
      if (GCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GCount);
      }
      if (Binding != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Binding);
      }
      if (JewelList.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(JewelList);
      }
      if (BagIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BagIndex);
      }
      if (SaleMoney1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SaleMoney1);
      }
      if (SaleGoid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SaleGoid);
      }
      if (SaleCoin != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SaleCoin);
      }
      if (AddPropIndex != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AddPropIndex);
      }
      if (BornIndex != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BornIndex);
      }
      if (Lucky != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Lucky);
      }
      if (Strong != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Strong);
      }
      if (ExcellenceInfo != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ExcellenceInfo);
      }
      if (AppendPropLv != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AppendPropLv);
      }
      if (EquipChangeLifeLv != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(EquipChangeLifeLv);
      }
      size += washProps_.CalculateSize(_repeated_washProps_codec);
      size += elementhrtsProps_.CalculateSize(_repeated_elementhrtsProps_codec);
      if (Privity != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Privity);
      }
      size += excellenceList_.CalculateSize(_repeated_excellenceList_codec);
      if (ForgeExp != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ForgeExp);
      }
      size += gemList_.CalculateSize(_repeated_gemList_codec);
      if (Color != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Color);
      }
      if (Authentication != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Authentication);
      }
      if (SellTime.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SellTime);
      }
      if (IsLock != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(IsLock);
      }
      if (BornTime != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(BornTime);
      }
      if (MakeName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MakeName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GoodsData2 other) {
      if (other == null) {
        return;
      }
      if (other.DbId != 0) {
        DbId = other.DbId;
      }
      if (other.GoodsId != 0) {
        GoodsId = other.GoodsId;
      }
      if (other.IsUsing != 0) {
        IsUsing = other.IsUsing;
      }
      if (other.ForgeLevel != 0) {
        ForgeLevel = other.ForgeLevel;
      }
      if (other.StartTime.Length != 0) {
        StartTime = other.StartTime;
      }
      if (other.EndTime.Length != 0) {
        EndTime = other.EndTime;
      }
      if (other.Site != 0) {
        Site = other.Site;
      }
      if (other.Quality != 0) {
        Quality = other.Quality;
      }
      if (other.Props.Length != 0) {
        Props = other.Props;
      }
      if (other.GCount != 0) {
        GCount = other.GCount;
      }
      if (other.Binding != 0) {
        Binding = other.Binding;
      }
      if (other.JewelList.Length != 0) {
        JewelList = other.JewelList;
      }
      if (other.BagIndex != 0) {
        BagIndex = other.BagIndex;
      }
      if (other.SaleMoney1 != 0) {
        SaleMoney1 = other.SaleMoney1;
      }
      if (other.SaleGoid != 0) {
        SaleGoid = other.SaleGoid;
      }
      if (other.SaleCoin != 0) {
        SaleCoin = other.SaleCoin;
      }
      if (other.AddPropIndex != 0) {
        AddPropIndex = other.AddPropIndex;
      }
      if (other.BornIndex != 0) {
        BornIndex = other.BornIndex;
      }
      if (other.Lucky != 0) {
        Lucky = other.Lucky;
      }
      if (other.Strong != 0) {
        Strong = other.Strong;
      }
      if (other.ExcellenceInfo != 0) {
        ExcellenceInfo = other.ExcellenceInfo;
      }
      if (other.AppendPropLv != 0) {
        AppendPropLv = other.AppendPropLv;
      }
      if (other.EquipChangeLifeLv != 0) {
        EquipChangeLifeLv = other.EquipChangeLifeLv;
      }
      washProps_.Add(other.washProps_);
      elementhrtsProps_.Add(other.elementhrtsProps_);
      if (other.Privity != 0) {
        Privity = other.Privity;
      }
      excellenceList_.Add(other.excellenceList_);
      if (other.ForgeExp != 0) {
        ForgeExp = other.ForgeExp;
      }
      gemList_.Add(other.gemList_);
      if (other.Color != 0) {
        Color = other.Color;
      }
      if (other.Authentication != 0) {
        Authentication = other.Authentication;
      }
      if (other.SellTime.Length != 0) {
        SellTime = other.SellTime;
      }
      if (other.IsLock != 0) {
        IsLock = other.IsLock;
      }
      if (other.BornTime != 0L) {
        BornTime = other.BornTime;
      }
      if (other.MakeName.Length != 0) {
        MakeName = other.MakeName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DbId = input.ReadInt32();
            break;
          }
          case 16: {
            GoodsId = input.ReadInt32();
            break;
          }
          case 24: {
            IsUsing = input.ReadInt32();
            break;
          }
          case 32: {
            ForgeLevel = input.ReadInt32();
            break;
          }
          case 42: {
            StartTime = input.ReadString();
            break;
          }
          case 50: {
            EndTime = input.ReadString();
            break;
          }
          case 56: {
            Site = input.ReadInt32();
            break;
          }
          case 64: {
            Quality = input.ReadInt32();
            break;
          }
          case 74: {
            Props = input.ReadString();
            break;
          }
          case 80: {
            GCount = input.ReadInt32();
            break;
          }
          case 88: {
            Binding = input.ReadInt32();
            break;
          }
          case 98: {
            JewelList = input.ReadString();
            break;
          }
          case 104: {
            BagIndex = input.ReadInt32();
            break;
          }
          case 112: {
            SaleMoney1 = input.ReadInt32();
            break;
          }
          case 120: {
            SaleGoid = input.ReadInt32();
            break;
          }
          case 128: {
            SaleCoin = input.ReadInt32();
            break;
          }
          case 136: {
            AddPropIndex = input.ReadInt32();
            break;
          }
          case 144: {
            BornIndex = input.ReadInt32();
            break;
          }
          case 152: {
            Lucky = input.ReadInt32();
            break;
          }
          case 160: {
            Strong = input.ReadInt32();
            break;
          }
          case 168: {
            ExcellenceInfo = input.ReadInt32();
            break;
          }
          case 176: {
            AppendPropLv = input.ReadInt32();
            break;
          }
          case 184: {
            EquipChangeLifeLv = input.ReadInt32();
            break;
          }
          case 194:
          case 192: {
            washProps_.AddEntriesFrom(input, _repeated_washProps_codec);
            break;
          }
          case 202:
          case 200: {
            elementhrtsProps_.AddEntriesFrom(input, _repeated_elementhrtsProps_codec);
            break;
          }
          case 208: {
            Privity = input.ReadInt32();
            break;
          }
          case 218:
          case 216: {
            excellenceList_.AddEntriesFrom(input, _repeated_excellenceList_codec);
            break;
          }
          case 224: {
            ForgeExp = input.ReadInt32();
            break;
          }
          case 234:
          case 232: {
            gemList_.AddEntriesFrom(input, _repeated_gemList_codec);
            break;
          }
          case 240: {
            Color = input.ReadInt32();
            break;
          }
          case 248: {
            Authentication = input.ReadInt32();
            break;
          }
          case 258: {
            SellTime = input.ReadString();
            break;
          }
          case 264: {
            IsLock = input.ReadInt32();
            break;
          }
          case 272: {
            BornTime = input.ReadInt64();
            break;
          }
          case 282: {
            MakeName = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            DbId = input.ReadInt32();
            break;
          }
          case 16: {
            GoodsId = input.ReadInt32();
            break;
          }
          case 24: {
            IsUsing = input.ReadInt32();
            break;
          }
          case 32: {
            ForgeLevel = input.ReadInt32();
            break;
          }
          case 42: {
            StartTime = input.ReadString();
            break;
          }
          case 50: {
            EndTime = input.ReadString();
            break;
          }
          case 56: {
            Site = input.ReadInt32();
            break;
          }
          case 64: {
            Quality = input.ReadInt32();
            break;
          }
          case 74: {
            Props = input.ReadString();
            break;
          }
          case 80: {
            GCount = input.ReadInt32();
            break;
          }
          case 88: {
            Binding = input.ReadInt32();
            break;
          }
          case 98: {
            JewelList = input.ReadString();
            break;
          }
          case 104: {
            BagIndex = input.ReadInt32();
            break;
          }
          case 112: {
            SaleMoney1 = input.ReadInt32();
            break;
          }
          case 120: {
            SaleGoid = input.ReadInt32();
            break;
          }
          case 128: {
            SaleCoin = input.ReadInt32();
            break;
          }
          case 136: {
            AddPropIndex = input.ReadInt32();
            break;
          }
          case 144: {
            BornIndex = input.ReadInt32();
            break;
          }
          case 152: {
            Lucky = input.ReadInt32();
            break;
          }
          case 160: {
            Strong = input.ReadInt32();
            break;
          }
          case 168: {
            ExcellenceInfo = input.ReadInt32();
            break;
          }
          case 176: {
            AppendPropLv = input.ReadInt32();
            break;
          }
          case 184: {
            EquipChangeLifeLv = input.ReadInt32();
            break;
          }
          case 194:
          case 192: {
            washProps_.AddEntriesFrom(ref input, _repeated_washProps_codec);
            break;
          }
          case 202:
          case 200: {
            elementhrtsProps_.AddEntriesFrom(ref input, _repeated_elementhrtsProps_codec);
            break;
          }
          case 208: {
            Privity = input.ReadInt32();
            break;
          }
          case 218:
          case 216: {
            excellenceList_.AddEntriesFrom(ref input, _repeated_excellenceList_codec);
            break;
          }
          case 224: {
            ForgeExp = input.ReadInt32();
            break;
          }
          case 234:
          case 232: {
            gemList_.AddEntriesFrom(ref input, _repeated_gemList_codec);
            break;
          }
          case 240: {
            Color = input.ReadInt32();
            break;
          }
          case 248: {
            Authentication = input.ReadInt32();
            break;
          }
          case 258: {
            SellTime = input.ReadString();
            break;
          }
          case 264: {
            IsLock = input.ReadInt32();
            break;
          }
          case 272: {
            BornTime = input.ReadInt64();
            break;
          }
          case 282: {
            MakeName = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///物品列表
  /// </summary>
  public sealed partial class GoodsListProto2 : pb::IMessage<GoodsListProto2>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GoodsListProto2> _parser = new pb::MessageParser<GoodsListProto2>(() => new GoodsListProto2());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GoodsListProto2> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::P5.Protobuf.CommonReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GoodsListProto2() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GoodsListProto2(GoodsListProto2 other) : this() {
      goodsList_ = other.goodsList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GoodsListProto2 Clone() {
      return new GoodsListProto2(this);
    }

    /// <summary>Field number for the "goodsList" field.</summary>
    public const int GoodsListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::P5.Protobuf.GoodsData2> _repeated_goodsList_codec
        = pb::FieldCodec.ForMessage(10, global::P5.Protobuf.GoodsData2.Parser);
    private readonly pbc::RepeatedField<global::P5.Protobuf.GoodsData2> goodsList_ = new pbc::RepeatedField<global::P5.Protobuf.GoodsData2>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::P5.Protobuf.GoodsData2> GoodsList {
      get { return goodsList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GoodsListProto2);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GoodsListProto2 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!goodsList_.Equals(other.goodsList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= goodsList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      goodsList_.WriteTo(output, _repeated_goodsList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      goodsList_.WriteTo(ref output, _repeated_goodsList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += goodsList_.CalculateSize(_repeated_goodsList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GoodsListProto2 other) {
      if (other == null) {
        return;
      }
      goodsList_.Add(other.goodsList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            goodsList_.AddEntriesFrom(input, _repeated_goodsList_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            goodsList_.AddEntriesFrom(ref input, _repeated_goodsList_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
