// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Skill.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace P5.Protobuf {

  /// <summary>Holder for reflection information generated from Skill.proto</summary>
  public static partial class SkillReflection {

    #region Descriptor
    /// <summary>File descriptor for Skill.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SkillReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgtTa2lsbC5wcm90bxILUDUuUHJvdG9idWYibAoKU2tpbGxEYXRhMhIMCgRk",
            "YklkGAEgASgFEg8KB3NraWxsSWQYAiABKAUSEgoKc2tpbGxMZXZlbBgDIAEo",
            "BRIPCgd1c2VkTnVtGAQgASgFEhoKEnVzaW5nQXR0YWNoZWRJbmRleBgFIAEo",
            "BWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::P5.Protobuf.SkillData2), global::P5.Protobuf.SkillData2.Parser, new[]{ "DbId", "SkillId", "SkillLevel", "UsedNum", "UsingAttachedIndex" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///技能
  /// </summary>
  public sealed partial class SkillData2 : pb::IMessage<SkillData2>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SkillData2> _parser = new pb::MessageParser<SkillData2>(() => new SkillData2());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SkillData2> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::P5.Protobuf.SkillReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillData2() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillData2(SkillData2 other) : this() {
      dbId_ = other.dbId_;
      skillId_ = other.skillId_;
      skillLevel_ = other.skillLevel_;
      usedNum_ = other.usedNum_;
      usingAttachedIndex_ = other.usingAttachedIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillData2 Clone() {
      return new SkillData2(this);
    }

    /// <summary>Field number for the "dbId" field.</summary>
    public const int DbIdFieldNumber = 1;
    private int dbId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DbId {
      get { return dbId_; }
      set {
        dbId_ = value;
      }
    }

    /// <summary>Field number for the "skillId" field.</summary>
    public const int SkillIdFieldNumber = 2;
    private int skillId_;
    /// <summary>
    ///技能id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    /// <summary>Field number for the "skillLevel" field.</summary>
    public const int SkillLevelFieldNumber = 3;
    private int skillLevel_;
    /// <summary>
    ///技能等級
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillLevel {
      get { return skillLevel_; }
      set {
        skillLevel_ = value;
      }
    }

    /// <summary>Field number for the "usedNum" field.</summary>
    public const int UsedNumFieldNumber = 4;
    private int usedNum_;
    /// <summary>
    ///使用次數
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UsedNum {
      get { return usedNum_; }
      set {
        usedNum_ = value;
      }
    }

    /// <summary>Field number for the "usingAttachedIndex" field.</summary>
    public const int UsingAttachedIndexFieldNumber = 5;
    private int usingAttachedIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UsingAttachedIndex {
      get { return usingAttachedIndex_; }
      set {
        usingAttachedIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SkillData2);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SkillData2 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DbId != other.DbId) return false;
      if (SkillId != other.SkillId) return false;
      if (SkillLevel != other.SkillLevel) return false;
      if (UsedNum != other.UsedNum) return false;
      if (UsingAttachedIndex != other.UsingAttachedIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DbId != 0) hash ^= DbId.GetHashCode();
      if (SkillId != 0) hash ^= SkillId.GetHashCode();
      if (SkillLevel != 0) hash ^= SkillLevel.GetHashCode();
      if (UsedNum != 0) hash ^= UsedNum.GetHashCode();
      if (UsingAttachedIndex != 0) hash ^= UsingAttachedIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (DbId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DbId);
      }
      if (SkillId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SkillId);
      }
      if (SkillLevel != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SkillLevel);
      }
      if (UsedNum != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(UsedNum);
      }
      if (UsingAttachedIndex != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(UsingAttachedIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (DbId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DbId);
      }
      if (SkillId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SkillId);
      }
      if (SkillLevel != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SkillLevel);
      }
      if (UsedNum != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(UsedNum);
      }
      if (UsingAttachedIndex != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(UsingAttachedIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DbId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DbId);
      }
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillId);
      }
      if (SkillLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillLevel);
      }
      if (UsedNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UsedNum);
      }
      if (UsingAttachedIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UsingAttachedIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SkillData2 other) {
      if (other == null) {
        return;
      }
      if (other.DbId != 0) {
        DbId = other.DbId;
      }
      if (other.SkillId != 0) {
        SkillId = other.SkillId;
      }
      if (other.SkillLevel != 0) {
        SkillLevel = other.SkillLevel;
      }
      if (other.UsedNum != 0) {
        UsedNum = other.UsedNum;
      }
      if (other.UsingAttachedIndex != 0) {
        UsingAttachedIndex = other.UsingAttachedIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DbId = input.ReadInt32();
            break;
          }
          case 16: {
            SkillId = input.ReadInt32();
            break;
          }
          case 24: {
            SkillLevel = input.ReadInt32();
            break;
          }
          case 32: {
            UsedNum = input.ReadInt32();
            break;
          }
          case 40: {
            UsingAttachedIndex = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            DbId = input.ReadInt32();
            break;
          }
          case 16: {
            SkillId = input.ReadInt32();
            break;
          }
          case 24: {
            SkillLevel = input.ReadInt32();
            break;
          }
          case 32: {
            UsedNum = input.ReadInt32();
            break;
          }
          case 40: {
            UsingAttachedIndex = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
