// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Battle.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace P5.Protobuf {

  /// <summary>Holder for reflection information generated from Battle.proto</summary>
  public static partial class BattleReflection {

    #region Descriptor
    /// <summary>File descriptor for Battle.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BattleReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxCYXR0bGUucHJvdG8SC1A1LlByb3RvYnVmGgxDb21tb24ucHJvdG8iJQoO",
            "TG9hZFNwcml0ZURhdGESEwoLT3RoZXJSb2xlSWQYASABKAUitQIKFkxvYWRT",
            "cHJpdGVEYXRhUmVzcG9uc2USDgoGcm9sZUlkGAEgASgFEg8KB21hcENvZGUY",
            "AiABKAUSFgoOc3RhcnRNb3ZlVGlja3MYAyABKAMSEAoIY3VycmVudFgYBCAB",
            "KAUSEAoIY3VycmVudFkYBSABKAUSGAoQY3VycmVudERpcmVjdGlvbhgGIAEo",
            "BRIOCgZhY3Rpb24YByABKAUSCwoDdG9YGAggASgFEgsKA3RvWRgJIAEoBRIQ",
            "CghNb3ZlQ29zdBgKIAEoARIRCglleHRBY3Rpb24YCyABKAUSJgoIcGF0aExp",
            "c3QYDCADKAsyFC5QNS5Qcm90b2J1Zi5NeVBvaW50EhgKEGN1cnJlbnRQYXRo",
            "SW5kZXgYDSABKAUSEwoLZnVybml0dXJlSWQYDiABKAUisQEKCU1vdmVTdGFy",
            "dBIOCgZyb2xlSWQYASABKAUSEAoIbW92ZUNvc3QYAiABKAESDwoHbWFwQ29k",
            "ZRgDIAEoBRIOCgZhY3Rpb24YBCABKAUSCwoDdG9YGAUgASgFEgsKA3RvWRgG",
            "IAEoBRIRCglleHRBY3Rpb24YByABKAUSDQoFZnJvbVgYCCABKAUSDQoFZnJv",
            "bVkYCSABKAUSFgoOc3RhcnRNb3ZlVGlja3MYCiABKAMijgEKB01vdmVFbmQS",
            "DgoGcm9sZUlkGAEgASgFEg8KB21hcENvZGUYAiABKAUSDgoGYWN0aW9uGAMg",
            "ASgFEgsKA3RvWBgEIAEoBRILCgN0b1kYBSABKAUSEwoLdG9EaXJlY3Rpb24Y",
            "BiABKAUSDgoGdHJ5UnVuGAcgASgFEhMKC2NsaWVudFRpY2tzGAggASgDIvwB",
            "CgpSb2xlQWN0aW9uEg4KBnJvbGVJZBgBIAEoBRIPCgdtYXBDb2RlGAIgASgF",
            "EhEKCWRpcmVjdGlvbhgDIAEoBRIOCgZhY3Rpb24YBCABKAUSCwoDdG9YGAUg",
            "ASgFEgsKA3RvWRgGIAEoBRIPCgd0YXJnZXRYGAcgASgFEg8KB3RhcmdldFkY",
            "CCABKAUSDgoGeUFuZ2xlGAkgASgFEg8KB21vdmVUb1gYCiABKAUSDwoHbW92",
            "ZVRvWRgLIAEoBRITCgtjbGllbnRUaWNrcxgMIAEoAxITCgtmdXJuaXR1cmVJ",
            "ZBgNIAEoBRISCgphY3Rpb25EYXRhGA4gASgFIoYBCg1NYWdpY0NvZGVEYXRh",
            "Eg4KBnJvbGVJZBgBIAEoBRIPCgdtYXBDb2RlGAIgASgFEhEKCW1hZ2ljQ29k",
            "ZRgDIAEoBRITCgthdHRhY2tTcGVlZBgEIAEoBRIMCgRwb3NYGAUgASgFEgwK",
            "BHBvc1kYBiABKAUSEAoIdGFyZ2V0SWQYByABKAUiOAoRVXBkYXRlQXR0YWNr",
            "U3BlZWQSDgoGcm9sZUlkGAEgASgFEhMKC2F0dGFja1NwZWVkGAIgASgFIoAC",
            "CgpSb2xlQXR0YWNrEg4KBnJvbGVJZBgBIAEoBRIQCghyb2xlUG9zWBgCIAEo",
            "BRIQCghyb2xlUG9zWRgDIAEoBRIPCgdlbmVteUlkGAQgASgFEhEKCWVuZW15",
            "UG9zWBgFIAEoBRIRCgllbmVteVBvc1kYBiABKAUSFQoNcmVhbEVuZW15UG9z",
            "WBgHIAEoBRIVCg1yZWFsRW5lbXlQb3NZGAggASgFEhEKCW1hZ2ljQ29kZRgJ",
            "IAEoBRITCgtjbGllbnRUaWNrcxgKIAEoAxINCgVtb3ZlWBgLIAEoBRINCgVt",
            "b3ZlWRgMIAEoBRITCgtkYW1hZ2VQb3dlchgNIAEoBSKRAQoJUm9sZUhpdGVk",
            "Eg4KBnJvbGVJZBgBIAEoBRIPCgdlbmVteUlkGAIgASgFEhEKCWVuZW15UG9z",
            "WBgDIAEoBRIRCgllbmVteVBvc1kYBCABKAUSEQoJbWFnaWNDb2RlGAUgASgF",
            "EhIKCm1hZ2ljSW5kZXgYBiABKAUSFgoObWFueVJhbmdlSW5kZXgYByABKAUi",
            "gwMKC0luanVyZWREYXRhEhYKDmF0dGFja2VyUm9sZUlkGAEgASgFEhUKDWlu",
            "anVyZWRSb2xlSWQYAiABKAUSDQoFYnVyc3QYAyABKAUSDgoGaW5qdXJlGAQg",
            "ASgFEhcKD2luanVyZWRSb2xlTGlmZRgFIAEoARIVCg1hdHRhY2tlckxldmVs",
            "GAYgASgFEhsKE2luanVyZWRSb2xlTWF4TGlmZVYYByABKAUSGAoQaW5qdXJl",
            "ZFJvbGVNYWdpYxgIIAEoBRIcChRpbmp1cmVkUm9sZU1heE1hZ2ljVhgJIAEo",
            "BRISCgpoaXRUb0dyaWRYGAogASgFEhIKCmhpdFRvR3JpZFkYCyABKAUSFAoM",
            "bWVybGluSW5qdWVyGAwgASgFEhIKCm1lcmxpblR5cGUYDSABKAUSGAoQaW5q",
            "dXJlZFJvbGVBcm1vchgOIAEoARIPCgdoaXRUeXBlGA8gASgFEhEKCWhpdEhl",
            "aWdodBgQIAEoBRIRCgltYWdpY0NvZGUYESABKAUi+wEKGVNwcml0ZU5vdGlm",
            "eU90aGVyTW92ZURhdGESDgoGcm9sZUlkGAEgASgFEg8KB21hcENvZGUYAiAB",
            "KAUSDgoGYWN0aW9uGAMgASgFEgsKA3RvWBgEIAEoBRILCgN0b1kYBSABKAUS",
            "EQoJZXh0QWN0aW9uGAYgASgFEg0KBWZyb21YGAcgASgFEg0KBWZyb21ZGAgg",
            "ASgFEhYKDnN0YXJ0TW92ZVRpY2tzGAkgASgDEiYKCHBhdGhMaXN0GAogAygL",
            "MhQuUDUuUHJvdG9idWYuTXlQb2ludBIQCghtb3ZlQ29zdBgLIAEoARIQCgh0",
            "YXJnZXRJZBgMIAEoBWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::P5.Protobuf.CommonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::P5.Protobuf.LoadSpriteData), global::P5.Protobuf.LoadSpriteData.Parser, new[]{ "OtherRoleId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::P5.Protobuf.LoadSpriteDataResponse), global::P5.Protobuf.LoadSpriteDataResponse.Parser, new[]{ "RoleId", "MapCode", "StartMoveTicks", "CurrentX", "CurrentY", "CurrentDirection", "Action", "ToX", "ToY", "MoveCost", "ExtAction", "PathList", "CurrentPathIndex", "FurnitureId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::P5.Protobuf.MoveStart), global::P5.Protobuf.MoveStart.Parser, new[]{ "RoleId", "MoveCost", "MapCode", "Action", "ToX", "ToY", "ExtAction", "FromX", "FromY", "StartMoveTicks" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::P5.Protobuf.MoveEnd), global::P5.Protobuf.MoveEnd.Parser, new[]{ "RoleId", "MapCode", "Action", "ToX", "ToY", "ToDirection", "TryRun", "ClientTicks" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::P5.Protobuf.RoleAction), global::P5.Protobuf.RoleAction.Parser, new[]{ "RoleId", "MapCode", "Direction", "Action", "ToX", "ToY", "TargetX", "TargetY", "YAngle", "MoveToX", "MoveToY", "ClientTicks", "FurnitureId", "ActionData" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::P5.Protobuf.MagicCodeData), global::P5.Protobuf.MagicCodeData.Parser, new[]{ "RoleId", "MapCode", "MagicCode", "AttackSpeed", "PosX", "PosY", "TargetId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::P5.Protobuf.UpdateAttackSpeed), global::P5.Protobuf.UpdateAttackSpeed.Parser, new[]{ "RoleId", "AttackSpeed" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::P5.Protobuf.RoleAttack), global::P5.Protobuf.RoleAttack.Parser, new[]{ "RoleId", "RolePosX", "RolePosY", "EnemyId", "EnemyPosX", "EnemyPosY", "RealEnemyPosX", "RealEnemyPosY", "MagicCode", "ClientTicks", "MoveX", "MoveY", "DamagePower" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::P5.Protobuf.RoleHited), global::P5.Protobuf.RoleHited.Parser, new[]{ "RoleId", "EnemyId", "EnemyPosX", "EnemyPosY", "MagicCode", "MagicIndex", "ManyRangeIndex" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::P5.Protobuf.InjuredData), global::P5.Protobuf.InjuredData.Parser, new[]{ "AttackerRoleId", "InjuredRoleId", "Burst", "Injure", "InjuredRoleLife", "AttackerLevel", "InjuredRoleMaxLifeV", "InjuredRoleMagic", "InjuredRoleMaxMagicV", "HitToGridX", "HitToGridY", "MerlinInjuer", "MerlinType", "InjuredRoleArmor", "HitType", "HitHeight", "MagicCode" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::P5.Protobuf.SpriteNotifyOtherMoveData), global::P5.Protobuf.SpriteNotifyOtherMoveData.Parser, new[]{ "RoleId", "MapCode", "Action", "ToX", "ToY", "ExtAction", "FromX", "FromY", "StartMoveTicks", "PathList", "MoveCost", "TargetId" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///載入其他Client/Monster的位置資料
  /// </summary>
  public sealed partial class LoadSpriteData : pb::IMessage<LoadSpriteData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LoadSpriteData> _parser = new pb::MessageParser<LoadSpriteData>(() => new LoadSpriteData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoadSpriteData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::P5.Protobuf.BattleReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadSpriteData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadSpriteData(LoadSpriteData other) : this() {
      otherRoleId_ = other.otherRoleId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadSpriteData Clone() {
      return new LoadSpriteData(this);
    }

    /// <summary>Field number for the "OtherRoleId" field.</summary>
    public const int OtherRoleIdFieldNumber = 1;
    private int otherRoleId_;
    /// <summary>
    ///要找的Id,要注意server在確認type (client or monster) 是用id轉type判斷  轉換的方式是>>16對應的baseInt	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OtherRoleId {
      get { return otherRoleId_; }
      set {
        otherRoleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoadSpriteData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoadSpriteData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OtherRoleId != other.OtherRoleId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OtherRoleId != 0) hash ^= OtherRoleId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (OtherRoleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(OtherRoleId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (OtherRoleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(OtherRoleId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OtherRoleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OtherRoleId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoadSpriteData other) {
      if (other == null) {
        return;
      }
      if (other.OtherRoleId != 0) {
        OtherRoleId = other.OtherRoleId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OtherRoleId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            OtherRoleId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///載入其他Client/Monster的位置資料回傳
  /// </summary>
  public sealed partial class LoadSpriteDataResponse : pb::IMessage<LoadSpriteDataResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LoadSpriteDataResponse> _parser = new pb::MessageParser<LoadSpriteDataResponse>(() => new LoadSpriteDataResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoadSpriteDataResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::P5.Protobuf.BattleReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadSpriteDataResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadSpriteDataResponse(LoadSpriteDataResponse other) : this() {
      roleId_ = other.roleId_;
      mapCode_ = other.mapCode_;
      startMoveTicks_ = other.startMoveTicks_;
      currentX_ = other.currentX_;
      currentY_ = other.currentY_;
      currentDirection_ = other.currentDirection_;
      action_ = other.action_;
      toX_ = other.toX_;
      toY_ = other.toY_;
      moveCost_ = other.moveCost_;
      extAction_ = other.extAction_;
      pathList_ = other.pathList_.Clone();
      currentPathIndex_ = other.currentPathIndex_;
      furnitureId_ = other.furnitureId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadSpriteDataResponse Clone() {
      return new LoadSpriteDataResponse(this);
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private int roleId_;
    /// <summary>
    ///載入的那個角色的ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "mapCode" field.</summary>
    public const int MapCodeFieldNumber = 2;
    private int mapCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MapCode {
      get { return mapCode_; }
      set {
        mapCode_ = value;
      }
    }

    /// <summary>Field number for the "startMoveTicks" field.</summary>
    public const int StartMoveTicksFieldNumber = 3;
    private long startMoveTicks_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartMoveTicks {
      get { return startMoveTicks_; }
      set {
        startMoveTicks_ = value;
      }
    }

    /// <summary>Field number for the "currentX" field.</summary>
    public const int CurrentXFieldNumber = 4;
    private int currentX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentX {
      get { return currentX_; }
      set {
        currentX_ = value;
      }
    }

    /// <summary>Field number for the "currentY" field.</summary>
    public const int CurrentYFieldNumber = 5;
    private int currentY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentY {
      get { return currentY_; }
      set {
        currentY_ = value;
      }
    }

    /// <summary>Field number for the "currentDirection" field.</summary>
    public const int CurrentDirectionFieldNumber = 6;
    private int currentDirection_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentDirection {
      get { return currentDirection_; }
      set {
        currentDirection_ = value;
      }
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 7;
    private int action_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Action {
      get { return action_; }
      set {
        action_ = value;
      }
    }

    /// <summary>Field number for the "toX" field.</summary>
    public const int ToXFieldNumber = 8;
    private int toX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ToX {
      get { return toX_; }
      set {
        toX_ = value;
      }
    }

    /// <summary>Field number for the "toY" field.</summary>
    public const int ToYFieldNumber = 9;
    private int toY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ToY {
      get { return toY_; }
      set {
        toY_ = value;
      }
    }

    /// <summary>Field number for the "MoveCost" field.</summary>
    public const int MoveCostFieldNumber = 10;
    private double moveCost_;
    /// <summary>
    ///應該是移動速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MoveCost {
      get { return moveCost_; }
      set {
        moveCost_ = value;
      }
    }

    /// <summary>Field number for the "extAction" field.</summary>
    public const int ExtActionFieldNumber = 11;
    private int extAction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExtAction {
      get { return extAction_; }
      set {
        extAction_ = value;
      }
    }

    /// <summary>Field number for the "pathList" field.</summary>
    public const int PathListFieldNumber = 12;
    private static readonly pb::FieldCodec<global::P5.Protobuf.MyPoint> _repeated_pathList_codec
        = pb::FieldCodec.ForMessage(98, global::P5.Protobuf.MyPoint.Parser);
    private readonly pbc::RepeatedField<global::P5.Protobuf.MyPoint> pathList_ = new pbc::RepeatedField<global::P5.Protobuf.MyPoint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::P5.Protobuf.MyPoint> PathList {
      get { return pathList_; }
    }

    /// <summary>Field number for the "currentPathIndex" field.</summary>
    public const int CurrentPathIndexFieldNumber = 13;
    private int currentPathIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentPathIndex {
      get { return currentPathIndex_; }
      set {
        currentPathIndex_ = value;
      }
    }

    /// <summary>Field number for the "furnitureId" field.</summary>
    public const int FurnitureIdFieldNumber = 14;
    private int furnitureId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FurnitureId {
      get { return furnitureId_; }
      set {
        furnitureId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoadSpriteDataResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoadSpriteDataResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoleId != other.RoleId) return false;
      if (MapCode != other.MapCode) return false;
      if (StartMoveTicks != other.StartMoveTicks) return false;
      if (CurrentX != other.CurrentX) return false;
      if (CurrentY != other.CurrentY) return false;
      if (CurrentDirection != other.CurrentDirection) return false;
      if (Action != other.Action) return false;
      if (ToX != other.ToX) return false;
      if (ToY != other.ToY) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MoveCost, other.MoveCost)) return false;
      if (ExtAction != other.ExtAction) return false;
      if(!pathList_.Equals(other.pathList_)) return false;
      if (CurrentPathIndex != other.CurrentPathIndex) return false;
      if (FurnitureId != other.FurnitureId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoleId != 0) hash ^= RoleId.GetHashCode();
      if (MapCode != 0) hash ^= MapCode.GetHashCode();
      if (StartMoveTicks != 0L) hash ^= StartMoveTicks.GetHashCode();
      if (CurrentX != 0) hash ^= CurrentX.GetHashCode();
      if (CurrentY != 0) hash ^= CurrentY.GetHashCode();
      if (CurrentDirection != 0) hash ^= CurrentDirection.GetHashCode();
      if (Action != 0) hash ^= Action.GetHashCode();
      if (ToX != 0) hash ^= ToX.GetHashCode();
      if (ToY != 0) hash ^= ToY.GetHashCode();
      if (MoveCost != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MoveCost);
      if (ExtAction != 0) hash ^= ExtAction.GetHashCode();
      hash ^= pathList_.GetHashCode();
      if (CurrentPathIndex != 0) hash ^= CurrentPathIndex.GetHashCode();
      if (FurnitureId != 0) hash ^= FurnitureId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (RoleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoleId);
      }
      if (MapCode != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MapCode);
      }
      if (StartMoveTicks != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(StartMoveTicks);
      }
      if (CurrentX != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CurrentX);
      }
      if (CurrentY != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(CurrentY);
      }
      if (CurrentDirection != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(CurrentDirection);
      }
      if (Action != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Action);
      }
      if (ToX != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(ToX);
      }
      if (ToY != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(ToY);
      }
      if (MoveCost != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(MoveCost);
      }
      if (ExtAction != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(ExtAction);
      }
      pathList_.WriteTo(output, _repeated_pathList_codec);
      if (CurrentPathIndex != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(CurrentPathIndex);
      }
      if (FurnitureId != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(FurnitureId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (RoleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoleId);
      }
      if (MapCode != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MapCode);
      }
      if (StartMoveTicks != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(StartMoveTicks);
      }
      if (CurrentX != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CurrentX);
      }
      if (CurrentY != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(CurrentY);
      }
      if (CurrentDirection != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(CurrentDirection);
      }
      if (Action != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Action);
      }
      if (ToX != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(ToX);
      }
      if (ToY != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(ToY);
      }
      if (MoveCost != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(MoveCost);
      }
      if (ExtAction != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(ExtAction);
      }
      pathList_.WriteTo(ref output, _repeated_pathList_codec);
      if (CurrentPathIndex != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(CurrentPathIndex);
      }
      if (FurnitureId != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(FurnitureId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoleId);
      }
      if (MapCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MapCode);
      }
      if (StartMoveTicks != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartMoveTicks);
      }
      if (CurrentX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentX);
      }
      if (CurrentY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentY);
      }
      if (CurrentDirection != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentDirection);
      }
      if (Action != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Action);
      }
      if (ToX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ToX);
      }
      if (ToY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ToY);
      }
      if (MoveCost != 0D) {
        size += 1 + 8;
      }
      if (ExtAction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExtAction);
      }
      size += pathList_.CalculateSize(_repeated_pathList_codec);
      if (CurrentPathIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentPathIndex);
      }
      if (FurnitureId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FurnitureId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoadSpriteDataResponse other) {
      if (other == null) {
        return;
      }
      if (other.RoleId != 0) {
        RoleId = other.RoleId;
      }
      if (other.MapCode != 0) {
        MapCode = other.MapCode;
      }
      if (other.StartMoveTicks != 0L) {
        StartMoveTicks = other.StartMoveTicks;
      }
      if (other.CurrentX != 0) {
        CurrentX = other.CurrentX;
      }
      if (other.CurrentY != 0) {
        CurrentY = other.CurrentY;
      }
      if (other.CurrentDirection != 0) {
        CurrentDirection = other.CurrentDirection;
      }
      if (other.Action != 0) {
        Action = other.Action;
      }
      if (other.ToX != 0) {
        ToX = other.ToX;
      }
      if (other.ToY != 0) {
        ToY = other.ToY;
      }
      if (other.MoveCost != 0D) {
        MoveCost = other.MoveCost;
      }
      if (other.ExtAction != 0) {
        ExtAction = other.ExtAction;
      }
      pathList_.Add(other.pathList_);
      if (other.CurrentPathIndex != 0) {
        CurrentPathIndex = other.CurrentPathIndex;
      }
      if (other.FurnitureId != 0) {
        FurnitureId = other.FurnitureId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoleId = input.ReadInt32();
            break;
          }
          case 16: {
            MapCode = input.ReadInt32();
            break;
          }
          case 24: {
            StartMoveTicks = input.ReadInt64();
            break;
          }
          case 32: {
            CurrentX = input.ReadInt32();
            break;
          }
          case 40: {
            CurrentY = input.ReadInt32();
            break;
          }
          case 48: {
            CurrentDirection = input.ReadInt32();
            break;
          }
          case 56: {
            Action = input.ReadInt32();
            break;
          }
          case 64: {
            ToX = input.ReadInt32();
            break;
          }
          case 72: {
            ToY = input.ReadInt32();
            break;
          }
          case 81: {
            MoveCost = input.ReadDouble();
            break;
          }
          case 88: {
            ExtAction = input.ReadInt32();
            break;
          }
          case 98: {
            pathList_.AddEntriesFrom(input, _repeated_pathList_codec);
            break;
          }
          case 104: {
            CurrentPathIndex = input.ReadInt32();
            break;
          }
          case 112: {
            FurnitureId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            RoleId = input.ReadInt32();
            break;
          }
          case 16: {
            MapCode = input.ReadInt32();
            break;
          }
          case 24: {
            StartMoveTicks = input.ReadInt64();
            break;
          }
          case 32: {
            CurrentX = input.ReadInt32();
            break;
          }
          case 40: {
            CurrentY = input.ReadInt32();
            break;
          }
          case 48: {
            CurrentDirection = input.ReadInt32();
            break;
          }
          case 56: {
            Action = input.ReadInt32();
            break;
          }
          case 64: {
            ToX = input.ReadInt32();
            break;
          }
          case 72: {
            ToY = input.ReadInt32();
            break;
          }
          case 81: {
            MoveCost = input.ReadDouble();
            break;
          }
          case 88: {
            ExtAction = input.ReadInt32();
            break;
          }
          case 98: {
            pathList_.AddEntriesFrom(ref input, _repeated_pathList_codec);
            break;
          }
          case 104: {
            CurrentPathIndex = input.ReadInt32();
            break;
          }
          case 112: {
            FurnitureId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///開始移動 
  /// </summary>
  public sealed partial class MoveStart : pb::IMessage<MoveStart>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MoveStart> _parser = new pb::MessageParser<MoveStart>(() => new MoveStart());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MoveStart> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::P5.Protobuf.BattleReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveStart() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveStart(MoveStart other) : this() {
      roleId_ = other.roleId_;
      moveCost_ = other.moveCost_;
      mapCode_ = other.mapCode_;
      action_ = other.action_;
      toX_ = other.toX_;
      toY_ = other.toY_;
      extAction_ = other.extAction_;
      fromX_ = other.fromX_;
      fromY_ = other.fromY_;
      startMoveTicks_ = other.startMoveTicks_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveStart Clone() {
      return new MoveStart(this);
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private int roleId_;
    /// <summary>
    ///request不用傳,response會帶值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "moveCost" field.</summary>
    public const int MoveCostFieldNumber = 2;
    private double moveCost_;
    /// <summary>
    ///request不用傳,response會帶值   移動速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MoveCost {
      get { return moveCost_; }
      set {
        moveCost_ = value;
      }
    }

    /// <summary>Field number for the "mapCode" field.</summary>
    public const int MapCodeFieldNumber = 3;
    private int mapCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MapCode {
      get { return mapCode_; }
      set {
        mapCode_ = value;
      }
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 4;
    private int action_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Action {
      get { return action_; }
      set {
        action_ = value;
      }
    }

    /// <summary>Field number for the "toX" field.</summary>
    public const int ToXFieldNumber = 5;
    private int toX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ToX {
      get { return toX_; }
      set {
        toX_ = value;
      }
    }

    /// <summary>Field number for the "toY" field.</summary>
    public const int ToYFieldNumber = 6;
    private int toY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ToY {
      get { return toY_; }
      set {
        toY_ = value;
      }
    }

    /// <summary>Field number for the "extAction" field.</summary>
    public const int ExtActionFieldNumber = 7;
    private int extAction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExtAction {
      get { return extAction_; }
      set {
        extAction_ = value;
      }
    }

    /// <summary>Field number for the "fromX" field.</summary>
    public const int FromXFieldNumber = 8;
    private int fromX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FromX {
      get { return fromX_; }
      set {
        fromX_ = value;
      }
    }

    /// <summary>Field number for the "fromY" field.</summary>
    public const int FromYFieldNumber = 9;
    private int fromY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FromY {
      get { return fromY_; }
      set {
        fromY_ = value;
      }
    }

    /// <summary>Field number for the "startMoveTicks" field.</summary>
    public const int StartMoveTicksFieldNumber = 10;
    private long startMoveTicks_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartMoveTicks {
      get { return startMoveTicks_; }
      set {
        startMoveTicks_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MoveStart);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MoveStart other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoleId != other.RoleId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MoveCost, other.MoveCost)) return false;
      if (MapCode != other.MapCode) return false;
      if (Action != other.Action) return false;
      if (ToX != other.ToX) return false;
      if (ToY != other.ToY) return false;
      if (ExtAction != other.ExtAction) return false;
      if (FromX != other.FromX) return false;
      if (FromY != other.FromY) return false;
      if (StartMoveTicks != other.StartMoveTicks) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoleId != 0) hash ^= RoleId.GetHashCode();
      if (MoveCost != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MoveCost);
      if (MapCode != 0) hash ^= MapCode.GetHashCode();
      if (Action != 0) hash ^= Action.GetHashCode();
      if (ToX != 0) hash ^= ToX.GetHashCode();
      if (ToY != 0) hash ^= ToY.GetHashCode();
      if (ExtAction != 0) hash ^= ExtAction.GetHashCode();
      if (FromX != 0) hash ^= FromX.GetHashCode();
      if (FromY != 0) hash ^= FromY.GetHashCode();
      if (StartMoveTicks != 0L) hash ^= StartMoveTicks.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (RoleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoleId);
      }
      if (MoveCost != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(MoveCost);
      }
      if (MapCode != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MapCode);
      }
      if (Action != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Action);
      }
      if (ToX != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ToX);
      }
      if (ToY != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ToY);
      }
      if (ExtAction != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ExtAction);
      }
      if (FromX != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(FromX);
      }
      if (FromY != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(FromY);
      }
      if (StartMoveTicks != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(StartMoveTicks);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (RoleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoleId);
      }
      if (MoveCost != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(MoveCost);
      }
      if (MapCode != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MapCode);
      }
      if (Action != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Action);
      }
      if (ToX != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ToX);
      }
      if (ToY != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ToY);
      }
      if (ExtAction != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ExtAction);
      }
      if (FromX != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(FromX);
      }
      if (FromY != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(FromY);
      }
      if (StartMoveTicks != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(StartMoveTicks);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoleId);
      }
      if (MoveCost != 0D) {
        size += 1 + 8;
      }
      if (MapCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MapCode);
      }
      if (Action != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Action);
      }
      if (ToX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ToX);
      }
      if (ToY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ToY);
      }
      if (ExtAction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExtAction);
      }
      if (FromX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FromX);
      }
      if (FromY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FromY);
      }
      if (StartMoveTicks != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartMoveTicks);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MoveStart other) {
      if (other == null) {
        return;
      }
      if (other.RoleId != 0) {
        RoleId = other.RoleId;
      }
      if (other.MoveCost != 0D) {
        MoveCost = other.MoveCost;
      }
      if (other.MapCode != 0) {
        MapCode = other.MapCode;
      }
      if (other.Action != 0) {
        Action = other.Action;
      }
      if (other.ToX != 0) {
        ToX = other.ToX;
      }
      if (other.ToY != 0) {
        ToY = other.ToY;
      }
      if (other.ExtAction != 0) {
        ExtAction = other.ExtAction;
      }
      if (other.FromX != 0) {
        FromX = other.FromX;
      }
      if (other.FromY != 0) {
        FromY = other.FromY;
      }
      if (other.StartMoveTicks != 0L) {
        StartMoveTicks = other.StartMoveTicks;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoleId = input.ReadInt32();
            break;
          }
          case 17: {
            MoveCost = input.ReadDouble();
            break;
          }
          case 24: {
            MapCode = input.ReadInt32();
            break;
          }
          case 32: {
            Action = input.ReadInt32();
            break;
          }
          case 40: {
            ToX = input.ReadInt32();
            break;
          }
          case 48: {
            ToY = input.ReadInt32();
            break;
          }
          case 56: {
            ExtAction = input.ReadInt32();
            break;
          }
          case 64: {
            FromX = input.ReadInt32();
            break;
          }
          case 72: {
            FromY = input.ReadInt32();
            break;
          }
          case 80: {
            StartMoveTicks = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            RoleId = input.ReadInt32();
            break;
          }
          case 17: {
            MoveCost = input.ReadDouble();
            break;
          }
          case 24: {
            MapCode = input.ReadInt32();
            break;
          }
          case 32: {
            Action = input.ReadInt32();
            break;
          }
          case 40: {
            ToX = input.ReadInt32();
            break;
          }
          case 48: {
            ToY = input.ReadInt32();
            break;
          }
          case 56: {
            ExtAction = input.ReadInt32();
            break;
          }
          case 64: {
            FromX = input.ReadInt32();
            break;
          }
          case 72: {
            FromY = input.ReadInt32();
            break;
          }
          case 80: {
            StartMoveTicks = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///結束移動 
  /// </summary>
  public sealed partial class MoveEnd : pb::IMessage<MoveEnd>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MoveEnd> _parser = new pb::MessageParser<MoveEnd>(() => new MoveEnd());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MoveEnd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::P5.Protobuf.BattleReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveEnd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveEnd(MoveEnd other) : this() {
      roleId_ = other.roleId_;
      mapCode_ = other.mapCode_;
      action_ = other.action_;
      toX_ = other.toX_;
      toY_ = other.toY_;
      toDirection_ = other.toDirection_;
      tryRun_ = other.tryRun_;
      clientTicks_ = other.clientTicks_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveEnd Clone() {
      return new MoveEnd(this);
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private int roleId_;
    /// <summary>
    ///request不用傳,response會帶值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "mapCode" field.</summary>
    public const int MapCodeFieldNumber = 2;
    private int mapCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MapCode {
      get { return mapCode_; }
      set {
        mapCode_ = value;
      }
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 3;
    private int action_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Action {
      get { return action_; }
      set {
        action_ = value;
      }
    }

    /// <summary>Field number for the "toX" field.</summary>
    public const int ToXFieldNumber = 4;
    private int toX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ToX {
      get { return toX_; }
      set {
        toX_ = value;
      }
    }

    /// <summary>Field number for the "toY" field.</summary>
    public const int ToYFieldNumber = 5;
    private int toY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ToY {
      get { return toY_; }
      set {
        toY_ = value;
      }
    }

    /// <summary>Field number for the "toDirection" field.</summary>
    public const int ToDirectionFieldNumber = 6;
    private int toDirection_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ToDirection {
      get { return toDirection_; }
      set {
        toDirection_ = value;
      }
    }

    /// <summary>Field number for the "tryRun" field.</summary>
    public const int TryRunFieldNumber = 7;
    private int tryRun_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TryRun {
      get { return tryRun_; }
      set {
        tryRun_ = value;
      }
    }

    /// <summary>Field number for the "clientTicks" field.</summary>
    public const int ClientTicksFieldNumber = 8;
    private long clientTicks_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ClientTicks {
      get { return clientTicks_; }
      set {
        clientTicks_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MoveEnd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MoveEnd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoleId != other.RoleId) return false;
      if (MapCode != other.MapCode) return false;
      if (Action != other.Action) return false;
      if (ToX != other.ToX) return false;
      if (ToY != other.ToY) return false;
      if (ToDirection != other.ToDirection) return false;
      if (TryRun != other.TryRun) return false;
      if (ClientTicks != other.ClientTicks) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoleId != 0) hash ^= RoleId.GetHashCode();
      if (MapCode != 0) hash ^= MapCode.GetHashCode();
      if (Action != 0) hash ^= Action.GetHashCode();
      if (ToX != 0) hash ^= ToX.GetHashCode();
      if (ToY != 0) hash ^= ToY.GetHashCode();
      if (ToDirection != 0) hash ^= ToDirection.GetHashCode();
      if (TryRun != 0) hash ^= TryRun.GetHashCode();
      if (ClientTicks != 0L) hash ^= ClientTicks.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (RoleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoleId);
      }
      if (MapCode != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MapCode);
      }
      if (Action != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Action);
      }
      if (ToX != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ToX);
      }
      if (ToY != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ToY);
      }
      if (ToDirection != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ToDirection);
      }
      if (TryRun != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(TryRun);
      }
      if (ClientTicks != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(ClientTicks);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (RoleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoleId);
      }
      if (MapCode != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MapCode);
      }
      if (Action != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Action);
      }
      if (ToX != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ToX);
      }
      if (ToY != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ToY);
      }
      if (ToDirection != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ToDirection);
      }
      if (TryRun != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(TryRun);
      }
      if (ClientTicks != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(ClientTicks);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoleId);
      }
      if (MapCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MapCode);
      }
      if (Action != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Action);
      }
      if (ToX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ToX);
      }
      if (ToY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ToY);
      }
      if (ToDirection != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ToDirection);
      }
      if (TryRun != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TryRun);
      }
      if (ClientTicks != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ClientTicks);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MoveEnd other) {
      if (other == null) {
        return;
      }
      if (other.RoleId != 0) {
        RoleId = other.RoleId;
      }
      if (other.MapCode != 0) {
        MapCode = other.MapCode;
      }
      if (other.Action != 0) {
        Action = other.Action;
      }
      if (other.ToX != 0) {
        ToX = other.ToX;
      }
      if (other.ToY != 0) {
        ToY = other.ToY;
      }
      if (other.ToDirection != 0) {
        ToDirection = other.ToDirection;
      }
      if (other.TryRun != 0) {
        TryRun = other.TryRun;
      }
      if (other.ClientTicks != 0L) {
        ClientTicks = other.ClientTicks;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoleId = input.ReadInt32();
            break;
          }
          case 16: {
            MapCode = input.ReadInt32();
            break;
          }
          case 24: {
            Action = input.ReadInt32();
            break;
          }
          case 32: {
            ToX = input.ReadInt32();
            break;
          }
          case 40: {
            ToY = input.ReadInt32();
            break;
          }
          case 48: {
            ToDirection = input.ReadInt32();
            break;
          }
          case 56: {
            TryRun = input.ReadInt32();
            break;
          }
          case 64: {
            ClientTicks = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            RoleId = input.ReadInt32();
            break;
          }
          case 16: {
            MapCode = input.ReadInt32();
            break;
          }
          case 24: {
            Action = input.ReadInt32();
            break;
          }
          case 32: {
            ToX = input.ReadInt32();
            break;
          }
          case 40: {
            ToY = input.ReadInt32();
            break;
          }
          case 48: {
            ToDirection = input.ReadInt32();
            break;
          }
          case 56: {
            TryRun = input.ReadInt32();
            break;
          }
          case 64: {
            ClientTicks = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///角色動作
  /// </summary>
  public sealed partial class RoleAction : pb::IMessage<RoleAction>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RoleAction> _parser = new pb::MessageParser<RoleAction>(() => new RoleAction());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleAction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::P5.Protobuf.BattleReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleAction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleAction(RoleAction other) : this() {
      roleId_ = other.roleId_;
      mapCode_ = other.mapCode_;
      direction_ = other.direction_;
      action_ = other.action_;
      toX_ = other.toX_;
      toY_ = other.toY_;
      targetX_ = other.targetX_;
      targetY_ = other.targetY_;
      yAngle_ = other.yAngle_;
      moveToX_ = other.moveToX_;
      moveToY_ = other.moveToY_;
      clientTicks_ = other.clientTicks_;
      furnitureId_ = other.furnitureId_;
      actionData_ = other.actionData_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleAction Clone() {
      return new RoleAction(this);
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private int roleId_;
    /// <summary>
    ///request不用傳,response會帶值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "mapCode" field.</summary>
    public const int MapCodeFieldNumber = 2;
    private int mapCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MapCode {
      get { return mapCode_; }
      set {
        mapCode_ = value;
      }
    }

    /// <summary>Field number for the "direction" field.</summary>
    public const int DirectionFieldNumber = 3;
    private int direction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Direction {
      get { return direction_; }
      set {
        direction_ = value;
      }
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 4;
    private int action_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Action {
      get { return action_; }
      set {
        action_ = value;
      }
    }

    /// <summary>Field number for the "toX" field.</summary>
    public const int ToXFieldNumber = 5;
    private int toX_;
    /// <summary>
    ///posX
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ToX {
      get { return toX_; }
      set {
        toX_ = value;
      }
    }

    /// <summary>Field number for the "toY" field.</summary>
    public const int ToYFieldNumber = 6;
    private int toY_;
    /// <summary>
    ///posY
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ToY {
      get { return toY_; }
      set {
        toY_ = value;
      }
    }

    /// <summary>Field number for the "targetX" field.</summary>
    public const int TargetXFieldNumber = 7;
    private int targetX_;
    /// <summary>
    ///server沒用到
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetX {
      get { return targetX_; }
      set {
        targetX_ = value;
      }
    }

    /// <summary>Field number for the "targetY" field.</summary>
    public const int TargetYFieldNumber = 8;
    private int targetY_;
    /// <summary>
    ///server沒用到
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetY {
      get { return targetY_; }
      set {
        targetY_ = value;
      }
    }

    /// <summary>Field number for the "yAngle" field.</summary>
    public const int YAngleFieldNumber = 9;
    private int yAngle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int YAngle {
      get { return yAngle_; }
      set {
        yAngle_ = value;
      }
    }

    /// <summary>Field number for the "moveToX" field.</summary>
    public const int MoveToXFieldNumber = 10;
    private int moveToX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MoveToX {
      get { return moveToX_; }
      set {
        moveToX_ = value;
      }
    }

    /// <summary>Field number for the "moveToY" field.</summary>
    public const int MoveToYFieldNumber = 11;
    private int moveToY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MoveToY {
      get { return moveToY_; }
      set {
        moveToY_ = value;
      }
    }

    /// <summary>Field number for the "clientTicks" field.</summary>
    public const int ClientTicksFieldNumber = 12;
    private long clientTicks_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ClientTicks {
      get { return clientTicks_; }
      set {
        clientTicks_ = value;
      }
    }

    /// <summary>Field number for the "furnitureId" field.</summary>
    public const int FurnitureIdFieldNumber = 13;
    private int furnitureId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FurnitureId {
      get { return furnitureId_; }
      set {
        furnitureId_ = value;
      }
    }

    /// <summary>Field number for the "actionData" field.</summary>
    public const int ActionDataFieldNumber = 14;
    private int actionData_;
    /// <summary>
    ///server沒用到
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActionData {
      get { return actionData_; }
      set {
        actionData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoleAction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoleAction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoleId != other.RoleId) return false;
      if (MapCode != other.MapCode) return false;
      if (Direction != other.Direction) return false;
      if (Action != other.Action) return false;
      if (ToX != other.ToX) return false;
      if (ToY != other.ToY) return false;
      if (TargetX != other.TargetX) return false;
      if (TargetY != other.TargetY) return false;
      if (YAngle != other.YAngle) return false;
      if (MoveToX != other.MoveToX) return false;
      if (MoveToY != other.MoveToY) return false;
      if (ClientTicks != other.ClientTicks) return false;
      if (FurnitureId != other.FurnitureId) return false;
      if (ActionData != other.ActionData) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoleId != 0) hash ^= RoleId.GetHashCode();
      if (MapCode != 0) hash ^= MapCode.GetHashCode();
      if (Direction != 0) hash ^= Direction.GetHashCode();
      if (Action != 0) hash ^= Action.GetHashCode();
      if (ToX != 0) hash ^= ToX.GetHashCode();
      if (ToY != 0) hash ^= ToY.GetHashCode();
      if (TargetX != 0) hash ^= TargetX.GetHashCode();
      if (TargetY != 0) hash ^= TargetY.GetHashCode();
      if (YAngle != 0) hash ^= YAngle.GetHashCode();
      if (MoveToX != 0) hash ^= MoveToX.GetHashCode();
      if (MoveToY != 0) hash ^= MoveToY.GetHashCode();
      if (ClientTicks != 0L) hash ^= ClientTicks.GetHashCode();
      if (FurnitureId != 0) hash ^= FurnitureId.GetHashCode();
      if (ActionData != 0) hash ^= ActionData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (RoleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoleId);
      }
      if (MapCode != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MapCode);
      }
      if (Direction != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Direction);
      }
      if (Action != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Action);
      }
      if (ToX != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ToX);
      }
      if (ToY != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ToY);
      }
      if (TargetX != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(TargetX);
      }
      if (TargetY != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(TargetY);
      }
      if (YAngle != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(YAngle);
      }
      if (MoveToX != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(MoveToX);
      }
      if (MoveToY != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(MoveToY);
      }
      if (ClientTicks != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(ClientTicks);
      }
      if (FurnitureId != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(FurnitureId);
      }
      if (ActionData != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(ActionData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (RoleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoleId);
      }
      if (MapCode != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MapCode);
      }
      if (Direction != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Direction);
      }
      if (Action != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Action);
      }
      if (ToX != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ToX);
      }
      if (ToY != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ToY);
      }
      if (TargetX != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(TargetX);
      }
      if (TargetY != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(TargetY);
      }
      if (YAngle != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(YAngle);
      }
      if (MoveToX != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(MoveToX);
      }
      if (MoveToY != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(MoveToY);
      }
      if (ClientTicks != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(ClientTicks);
      }
      if (FurnitureId != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(FurnitureId);
      }
      if (ActionData != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(ActionData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoleId);
      }
      if (MapCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MapCode);
      }
      if (Direction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Direction);
      }
      if (Action != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Action);
      }
      if (ToX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ToX);
      }
      if (ToY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ToY);
      }
      if (TargetX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetX);
      }
      if (TargetY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetY);
      }
      if (YAngle != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(YAngle);
      }
      if (MoveToX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MoveToX);
      }
      if (MoveToY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MoveToY);
      }
      if (ClientTicks != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ClientTicks);
      }
      if (FurnitureId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FurnitureId);
      }
      if (ActionData != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActionData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoleAction other) {
      if (other == null) {
        return;
      }
      if (other.RoleId != 0) {
        RoleId = other.RoleId;
      }
      if (other.MapCode != 0) {
        MapCode = other.MapCode;
      }
      if (other.Direction != 0) {
        Direction = other.Direction;
      }
      if (other.Action != 0) {
        Action = other.Action;
      }
      if (other.ToX != 0) {
        ToX = other.ToX;
      }
      if (other.ToY != 0) {
        ToY = other.ToY;
      }
      if (other.TargetX != 0) {
        TargetX = other.TargetX;
      }
      if (other.TargetY != 0) {
        TargetY = other.TargetY;
      }
      if (other.YAngle != 0) {
        YAngle = other.YAngle;
      }
      if (other.MoveToX != 0) {
        MoveToX = other.MoveToX;
      }
      if (other.MoveToY != 0) {
        MoveToY = other.MoveToY;
      }
      if (other.ClientTicks != 0L) {
        ClientTicks = other.ClientTicks;
      }
      if (other.FurnitureId != 0) {
        FurnitureId = other.FurnitureId;
      }
      if (other.ActionData != 0) {
        ActionData = other.ActionData;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoleId = input.ReadInt32();
            break;
          }
          case 16: {
            MapCode = input.ReadInt32();
            break;
          }
          case 24: {
            Direction = input.ReadInt32();
            break;
          }
          case 32: {
            Action = input.ReadInt32();
            break;
          }
          case 40: {
            ToX = input.ReadInt32();
            break;
          }
          case 48: {
            ToY = input.ReadInt32();
            break;
          }
          case 56: {
            TargetX = input.ReadInt32();
            break;
          }
          case 64: {
            TargetY = input.ReadInt32();
            break;
          }
          case 72: {
            YAngle = input.ReadInt32();
            break;
          }
          case 80: {
            MoveToX = input.ReadInt32();
            break;
          }
          case 88: {
            MoveToY = input.ReadInt32();
            break;
          }
          case 96: {
            ClientTicks = input.ReadInt64();
            break;
          }
          case 104: {
            FurnitureId = input.ReadInt32();
            break;
          }
          case 112: {
            ActionData = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            RoleId = input.ReadInt32();
            break;
          }
          case 16: {
            MapCode = input.ReadInt32();
            break;
          }
          case 24: {
            Direction = input.ReadInt32();
            break;
          }
          case 32: {
            Action = input.ReadInt32();
            break;
          }
          case 40: {
            ToX = input.ReadInt32();
            break;
          }
          case 48: {
            ToY = input.ReadInt32();
            break;
          }
          case 56: {
            TargetX = input.ReadInt32();
            break;
          }
          case 64: {
            TargetY = input.ReadInt32();
            break;
          }
          case 72: {
            YAngle = input.ReadInt32();
            break;
          }
          case 80: {
            MoveToX = input.ReadInt32();
            break;
          }
          case 88: {
            MoveToY = input.ReadInt32();
            break;
          }
          case 96: {
            ClientTicks = input.ReadInt64();
            break;
          }
          case 104: {
            FurnitureId = input.ReadInt32();
            break;
          }
          case 112: {
            ActionData = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///技能
  /// </summary>
  public sealed partial class MagicCodeData : pb::IMessage<MagicCodeData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MagicCodeData> _parser = new pb::MessageParser<MagicCodeData>(() => new MagicCodeData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MagicCodeData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::P5.Protobuf.BattleReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MagicCodeData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MagicCodeData(MagicCodeData other) : this() {
      roleId_ = other.roleId_;
      mapCode_ = other.mapCode_;
      magicCode_ = other.magicCode_;
      attackSpeed_ = other.attackSpeed_;
      posX_ = other.posX_;
      posY_ = other.posY_;
      targetId_ = other.targetId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MagicCodeData Clone() {
      return new MagicCodeData(this);
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private int roleId_;
    /// <summary>
    ///request不用傳,response會帶值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "mapCode" field.</summary>
    public const int MapCodeFieldNumber = 2;
    private int mapCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MapCode {
      get { return mapCode_; }
      set {
        mapCode_ = value;
      }
    }

    /// <summary>Field number for the "magicCode" field.</summary>
    public const int MagicCodeFieldNumber = 3;
    private int magicCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MagicCode {
      get { return magicCode_; }
      set {
        magicCode_ = value;
      }
    }

    /// <summary>Field number for the "attackSpeed" field.</summary>
    public const int AttackSpeedFieldNumber = 4;
    private int attackSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackSpeed {
      get { return attackSpeed_; }
      set {
        attackSpeed_ = value;
      }
    }

    /// <summary>Field number for the "posX" field.</summary>
    public const int PosXFieldNumber = 5;
    private int posX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PosX {
      get { return posX_; }
      set {
        posX_ = value;
      }
    }

    /// <summary>Field number for the "posY" field.</summary>
    public const int PosYFieldNumber = 6;
    private int posY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PosY {
      get { return posY_; }
      set {
        posY_ = value;
      }
    }

    /// <summary>Field number for the "targetId" field.</summary>
    public const int TargetIdFieldNumber = 7;
    private int targetId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetId {
      get { return targetId_; }
      set {
        targetId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MagicCodeData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MagicCodeData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoleId != other.RoleId) return false;
      if (MapCode != other.MapCode) return false;
      if (MagicCode != other.MagicCode) return false;
      if (AttackSpeed != other.AttackSpeed) return false;
      if (PosX != other.PosX) return false;
      if (PosY != other.PosY) return false;
      if (TargetId != other.TargetId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoleId != 0) hash ^= RoleId.GetHashCode();
      if (MapCode != 0) hash ^= MapCode.GetHashCode();
      if (MagicCode != 0) hash ^= MagicCode.GetHashCode();
      if (AttackSpeed != 0) hash ^= AttackSpeed.GetHashCode();
      if (PosX != 0) hash ^= PosX.GetHashCode();
      if (PosY != 0) hash ^= PosY.GetHashCode();
      if (TargetId != 0) hash ^= TargetId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (RoleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoleId);
      }
      if (MapCode != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MapCode);
      }
      if (MagicCode != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MagicCode);
      }
      if (AttackSpeed != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(AttackSpeed);
      }
      if (PosX != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(PosX);
      }
      if (PosY != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(PosY);
      }
      if (TargetId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(TargetId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (RoleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoleId);
      }
      if (MapCode != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MapCode);
      }
      if (MagicCode != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MagicCode);
      }
      if (AttackSpeed != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(AttackSpeed);
      }
      if (PosX != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(PosX);
      }
      if (PosY != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(PosY);
      }
      if (TargetId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(TargetId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoleId);
      }
      if (MapCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MapCode);
      }
      if (MagicCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MagicCode);
      }
      if (AttackSpeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttackSpeed);
      }
      if (PosX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PosX);
      }
      if (PosY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PosY);
      }
      if (TargetId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MagicCodeData other) {
      if (other == null) {
        return;
      }
      if (other.RoleId != 0) {
        RoleId = other.RoleId;
      }
      if (other.MapCode != 0) {
        MapCode = other.MapCode;
      }
      if (other.MagicCode != 0) {
        MagicCode = other.MagicCode;
      }
      if (other.AttackSpeed != 0) {
        AttackSpeed = other.AttackSpeed;
      }
      if (other.PosX != 0) {
        PosX = other.PosX;
      }
      if (other.PosY != 0) {
        PosY = other.PosY;
      }
      if (other.TargetId != 0) {
        TargetId = other.TargetId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoleId = input.ReadInt32();
            break;
          }
          case 16: {
            MapCode = input.ReadInt32();
            break;
          }
          case 24: {
            MagicCode = input.ReadInt32();
            break;
          }
          case 32: {
            AttackSpeed = input.ReadInt32();
            break;
          }
          case 40: {
            PosX = input.ReadInt32();
            break;
          }
          case 48: {
            PosY = input.ReadInt32();
            break;
          }
          case 56: {
            TargetId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            RoleId = input.ReadInt32();
            break;
          }
          case 16: {
            MapCode = input.ReadInt32();
            break;
          }
          case 24: {
            MagicCode = input.ReadInt32();
            break;
          }
          case 32: {
            AttackSpeed = input.ReadInt32();
            break;
          }
          case 40: {
            PosX = input.ReadInt32();
            break;
          }
          case 48: {
            PosY = input.ReadInt32();
            break;
          }
          case 56: {
            TargetId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///更新攻擊速度
  /// </summary>
  public sealed partial class UpdateAttackSpeed : pb::IMessage<UpdateAttackSpeed>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UpdateAttackSpeed> _parser = new pb::MessageParser<UpdateAttackSpeed>(() => new UpdateAttackSpeed());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateAttackSpeed> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::P5.Protobuf.BattleReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateAttackSpeed() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateAttackSpeed(UpdateAttackSpeed other) : this() {
      roleId_ = other.roleId_;
      attackSpeed_ = other.attackSpeed_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateAttackSpeed Clone() {
      return new UpdateAttackSpeed(this);
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private int roleId_;
    /// <summary>
    ///變更攻速的角色ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "attackSpeed" field.</summary>
    public const int AttackSpeedFieldNumber = 2;
    private int attackSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackSpeed {
      get { return attackSpeed_; }
      set {
        attackSpeed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateAttackSpeed);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateAttackSpeed other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoleId != other.RoleId) return false;
      if (AttackSpeed != other.AttackSpeed) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoleId != 0) hash ^= RoleId.GetHashCode();
      if (AttackSpeed != 0) hash ^= AttackSpeed.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (RoleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoleId);
      }
      if (AttackSpeed != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AttackSpeed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (RoleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoleId);
      }
      if (AttackSpeed != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AttackSpeed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoleId);
      }
      if (AttackSpeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttackSpeed);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateAttackSpeed other) {
      if (other == null) {
        return;
      }
      if (other.RoleId != 0) {
        RoleId = other.RoleId;
      }
      if (other.AttackSpeed != 0) {
        AttackSpeed = other.AttackSpeed;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoleId = input.ReadInt32();
            break;
          }
          case 16: {
            AttackSpeed = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            RoleId = input.ReadInt32();
            break;
          }
          case 16: {
            AttackSpeed = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///攻擊
  /// </summary>
  public sealed partial class RoleAttack : pb::IMessage<RoleAttack>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RoleAttack> _parser = new pb::MessageParser<RoleAttack>(() => new RoleAttack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleAttack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::P5.Protobuf.BattleReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleAttack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleAttack(RoleAttack other) : this() {
      roleId_ = other.roleId_;
      rolePosX_ = other.rolePosX_;
      rolePosY_ = other.rolePosY_;
      enemyId_ = other.enemyId_;
      enemyPosX_ = other.enemyPosX_;
      enemyPosY_ = other.enemyPosY_;
      realEnemyPosX_ = other.realEnemyPosX_;
      realEnemyPosY_ = other.realEnemyPosY_;
      magicCode_ = other.magicCode_;
      clientTicks_ = other.clientTicks_;
      moveX_ = other.moveX_;
      moveY_ = other.moveY_;
      damagePower_ = other.damagePower_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleAttack Clone() {
      return new RoleAttack(this);
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private int roleId_;
    /// <summary>
    ///request不用傳,response會帶值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "rolePosX" field.</summary>
    public const int RolePosXFieldNumber = 2;
    private int rolePosX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RolePosX {
      get { return rolePosX_; }
      set {
        rolePosX_ = value;
      }
    }

    /// <summary>Field number for the "rolePosY" field.</summary>
    public const int RolePosYFieldNumber = 3;
    private int rolePosY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RolePosY {
      get { return rolePosY_; }
      set {
        rolePosY_ = value;
      }
    }

    /// <summary>Field number for the "enemyId" field.</summary>
    public const int EnemyIdFieldNumber = 4;
    private int enemyId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EnemyId {
      get { return enemyId_; }
      set {
        enemyId_ = value;
      }
    }

    /// <summary>Field number for the "enemyPosX" field.</summary>
    public const int EnemyPosXFieldNumber = 5;
    private int enemyPosX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EnemyPosX {
      get { return enemyPosX_; }
      set {
        enemyPosX_ = value;
      }
    }

    /// <summary>Field number for the "enemyPosY" field.</summary>
    public const int EnemyPosYFieldNumber = 6;
    private int enemyPosY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EnemyPosY {
      get { return enemyPosY_; }
      set {
        enemyPosY_ = value;
      }
    }

    /// <summary>Field number for the "realEnemyPosX" field.</summary>
    public const int RealEnemyPosXFieldNumber = 7;
    private int realEnemyPosX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RealEnemyPosX {
      get { return realEnemyPosX_; }
      set {
        realEnemyPosX_ = value;
      }
    }

    /// <summary>Field number for the "realEnemyPosY" field.</summary>
    public const int RealEnemyPosYFieldNumber = 8;
    private int realEnemyPosY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RealEnemyPosY {
      get { return realEnemyPosY_; }
      set {
        realEnemyPosY_ = value;
      }
    }

    /// <summary>Field number for the "magicCode" field.</summary>
    public const int MagicCodeFieldNumber = 9;
    private int magicCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MagicCode {
      get { return magicCode_; }
      set {
        magicCode_ = value;
      }
    }

    /// <summary>Field number for the "clientTicks" field.</summary>
    public const int ClientTicksFieldNumber = 10;
    private long clientTicks_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ClientTicks {
      get { return clientTicks_; }
      set {
        clientTicks_ = value;
      }
    }

    /// <summary>Field number for the "moveX" field.</summary>
    public const int MoveXFieldNumber = 11;
    private int moveX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MoveX {
      get { return moveX_; }
      set {
        moveX_ = value;
      }
    }

    /// <summary>Field number for the "moveY" field.</summary>
    public const int MoveYFieldNumber = 12;
    private int moveY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MoveY {
      get { return moveY_; }
      set {
        moveY_ = value;
      }
    }

    /// <summary>Field number for the "damagePower" field.</summary>
    public const int DamagePowerFieldNumber = 13;
    private int damagePower_;
    /// <summary>
    ///會除100
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DamagePower {
      get { return damagePower_; }
      set {
        damagePower_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoleAttack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoleAttack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoleId != other.RoleId) return false;
      if (RolePosX != other.RolePosX) return false;
      if (RolePosY != other.RolePosY) return false;
      if (EnemyId != other.EnemyId) return false;
      if (EnemyPosX != other.EnemyPosX) return false;
      if (EnemyPosY != other.EnemyPosY) return false;
      if (RealEnemyPosX != other.RealEnemyPosX) return false;
      if (RealEnemyPosY != other.RealEnemyPosY) return false;
      if (MagicCode != other.MagicCode) return false;
      if (ClientTicks != other.ClientTicks) return false;
      if (MoveX != other.MoveX) return false;
      if (MoveY != other.MoveY) return false;
      if (DamagePower != other.DamagePower) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoleId != 0) hash ^= RoleId.GetHashCode();
      if (RolePosX != 0) hash ^= RolePosX.GetHashCode();
      if (RolePosY != 0) hash ^= RolePosY.GetHashCode();
      if (EnemyId != 0) hash ^= EnemyId.GetHashCode();
      if (EnemyPosX != 0) hash ^= EnemyPosX.GetHashCode();
      if (EnemyPosY != 0) hash ^= EnemyPosY.GetHashCode();
      if (RealEnemyPosX != 0) hash ^= RealEnemyPosX.GetHashCode();
      if (RealEnemyPosY != 0) hash ^= RealEnemyPosY.GetHashCode();
      if (MagicCode != 0) hash ^= MagicCode.GetHashCode();
      if (ClientTicks != 0L) hash ^= ClientTicks.GetHashCode();
      if (MoveX != 0) hash ^= MoveX.GetHashCode();
      if (MoveY != 0) hash ^= MoveY.GetHashCode();
      if (DamagePower != 0) hash ^= DamagePower.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (RoleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoleId);
      }
      if (RolePosX != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RolePosX);
      }
      if (RolePosY != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RolePosY);
      }
      if (EnemyId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(EnemyId);
      }
      if (EnemyPosX != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(EnemyPosX);
      }
      if (EnemyPosY != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(EnemyPosY);
      }
      if (RealEnemyPosX != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(RealEnemyPosX);
      }
      if (RealEnemyPosY != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(RealEnemyPosY);
      }
      if (MagicCode != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(MagicCode);
      }
      if (ClientTicks != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(ClientTicks);
      }
      if (MoveX != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(MoveX);
      }
      if (MoveY != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(MoveY);
      }
      if (DamagePower != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(DamagePower);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (RoleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoleId);
      }
      if (RolePosX != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RolePosX);
      }
      if (RolePosY != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RolePosY);
      }
      if (EnemyId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(EnemyId);
      }
      if (EnemyPosX != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(EnemyPosX);
      }
      if (EnemyPosY != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(EnemyPosY);
      }
      if (RealEnemyPosX != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(RealEnemyPosX);
      }
      if (RealEnemyPosY != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(RealEnemyPosY);
      }
      if (MagicCode != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(MagicCode);
      }
      if (ClientTicks != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(ClientTicks);
      }
      if (MoveX != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(MoveX);
      }
      if (MoveY != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(MoveY);
      }
      if (DamagePower != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(DamagePower);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoleId);
      }
      if (RolePosX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RolePosX);
      }
      if (RolePosY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RolePosY);
      }
      if (EnemyId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EnemyId);
      }
      if (EnemyPosX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EnemyPosX);
      }
      if (EnemyPosY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EnemyPosY);
      }
      if (RealEnemyPosX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RealEnemyPosX);
      }
      if (RealEnemyPosY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RealEnemyPosY);
      }
      if (MagicCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MagicCode);
      }
      if (ClientTicks != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ClientTicks);
      }
      if (MoveX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MoveX);
      }
      if (MoveY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MoveY);
      }
      if (DamagePower != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DamagePower);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoleAttack other) {
      if (other == null) {
        return;
      }
      if (other.RoleId != 0) {
        RoleId = other.RoleId;
      }
      if (other.RolePosX != 0) {
        RolePosX = other.RolePosX;
      }
      if (other.RolePosY != 0) {
        RolePosY = other.RolePosY;
      }
      if (other.EnemyId != 0) {
        EnemyId = other.EnemyId;
      }
      if (other.EnemyPosX != 0) {
        EnemyPosX = other.EnemyPosX;
      }
      if (other.EnemyPosY != 0) {
        EnemyPosY = other.EnemyPosY;
      }
      if (other.RealEnemyPosX != 0) {
        RealEnemyPosX = other.RealEnemyPosX;
      }
      if (other.RealEnemyPosY != 0) {
        RealEnemyPosY = other.RealEnemyPosY;
      }
      if (other.MagicCode != 0) {
        MagicCode = other.MagicCode;
      }
      if (other.ClientTicks != 0L) {
        ClientTicks = other.ClientTicks;
      }
      if (other.MoveX != 0) {
        MoveX = other.MoveX;
      }
      if (other.MoveY != 0) {
        MoveY = other.MoveY;
      }
      if (other.DamagePower != 0) {
        DamagePower = other.DamagePower;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoleId = input.ReadInt32();
            break;
          }
          case 16: {
            RolePosX = input.ReadInt32();
            break;
          }
          case 24: {
            RolePosY = input.ReadInt32();
            break;
          }
          case 32: {
            EnemyId = input.ReadInt32();
            break;
          }
          case 40: {
            EnemyPosX = input.ReadInt32();
            break;
          }
          case 48: {
            EnemyPosY = input.ReadInt32();
            break;
          }
          case 56: {
            RealEnemyPosX = input.ReadInt32();
            break;
          }
          case 64: {
            RealEnemyPosY = input.ReadInt32();
            break;
          }
          case 72: {
            MagicCode = input.ReadInt32();
            break;
          }
          case 80: {
            ClientTicks = input.ReadInt64();
            break;
          }
          case 88: {
            MoveX = input.ReadInt32();
            break;
          }
          case 96: {
            MoveY = input.ReadInt32();
            break;
          }
          case 104: {
            DamagePower = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            RoleId = input.ReadInt32();
            break;
          }
          case 16: {
            RolePosX = input.ReadInt32();
            break;
          }
          case 24: {
            RolePosY = input.ReadInt32();
            break;
          }
          case 32: {
            EnemyId = input.ReadInt32();
            break;
          }
          case 40: {
            EnemyPosX = input.ReadInt32();
            break;
          }
          case 48: {
            EnemyPosY = input.ReadInt32();
            break;
          }
          case 56: {
            RealEnemyPosX = input.ReadInt32();
            break;
          }
          case 64: {
            RealEnemyPosY = input.ReadInt32();
            break;
          }
          case 72: {
            MagicCode = input.ReadInt32();
            break;
          }
          case 80: {
            ClientTicks = input.ReadInt64();
            break;
          }
          case 88: {
            MoveX = input.ReadInt32();
            break;
          }
          case 96: {
            MoveY = input.ReadInt32();
            break;
          }
          case 104: {
            DamagePower = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///擊中敵人
  /// </summary>
  public sealed partial class RoleHited : pb::IMessage<RoleHited>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RoleHited> _parser = new pb::MessageParser<RoleHited>(() => new RoleHited());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleHited> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::P5.Protobuf.BattleReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleHited() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleHited(RoleHited other) : this() {
      roleId_ = other.roleId_;
      enemyId_ = other.enemyId_;
      enemyPosX_ = other.enemyPosX_;
      enemyPosY_ = other.enemyPosY_;
      magicCode_ = other.magicCode_;
      magicIndex_ = other.magicIndex_;
      manyRangeIndex_ = other.manyRangeIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleHited Clone() {
      return new RoleHited(this);
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private int roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "enemyId" field.</summary>
    public const int EnemyIdFieldNumber = 2;
    private int enemyId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EnemyId {
      get { return enemyId_; }
      set {
        enemyId_ = value;
      }
    }

    /// <summary>Field number for the "enemyPosX" field.</summary>
    public const int EnemyPosXFieldNumber = 3;
    private int enemyPosX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EnemyPosX {
      get { return enemyPosX_; }
      set {
        enemyPosX_ = value;
      }
    }

    /// <summary>Field number for the "enemyPosY" field.</summary>
    public const int EnemyPosYFieldNumber = 4;
    private int enemyPosY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EnemyPosY {
      get { return enemyPosY_; }
      set {
        enemyPosY_ = value;
      }
    }

    /// <summary>Field number for the "magicCode" field.</summary>
    public const int MagicCodeFieldNumber = 5;
    private int magicCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MagicCode {
      get { return magicCode_; }
      set {
        magicCode_ = value;
      }
    }

    /// <summary>Field number for the "magicIndex" field.</summary>
    public const int MagicIndexFieldNumber = 6;
    private int magicIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MagicIndex {
      get { return magicIndex_; }
      set {
        magicIndex_ = value;
      }
    }

    /// <summary>Field number for the "manyRangeIndex" field.</summary>
    public const int ManyRangeIndexFieldNumber = 7;
    private int manyRangeIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ManyRangeIndex {
      get { return manyRangeIndex_; }
      set {
        manyRangeIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoleHited);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoleHited other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoleId != other.RoleId) return false;
      if (EnemyId != other.EnemyId) return false;
      if (EnemyPosX != other.EnemyPosX) return false;
      if (EnemyPosY != other.EnemyPosY) return false;
      if (MagicCode != other.MagicCode) return false;
      if (MagicIndex != other.MagicIndex) return false;
      if (ManyRangeIndex != other.ManyRangeIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoleId != 0) hash ^= RoleId.GetHashCode();
      if (EnemyId != 0) hash ^= EnemyId.GetHashCode();
      if (EnemyPosX != 0) hash ^= EnemyPosX.GetHashCode();
      if (EnemyPosY != 0) hash ^= EnemyPosY.GetHashCode();
      if (MagicCode != 0) hash ^= MagicCode.GetHashCode();
      if (MagicIndex != 0) hash ^= MagicIndex.GetHashCode();
      if (ManyRangeIndex != 0) hash ^= ManyRangeIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (RoleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoleId);
      }
      if (EnemyId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(EnemyId);
      }
      if (EnemyPosX != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(EnemyPosX);
      }
      if (EnemyPosY != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(EnemyPosY);
      }
      if (MagicCode != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MagicCode);
      }
      if (MagicIndex != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(MagicIndex);
      }
      if (ManyRangeIndex != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ManyRangeIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (RoleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoleId);
      }
      if (EnemyId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(EnemyId);
      }
      if (EnemyPosX != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(EnemyPosX);
      }
      if (EnemyPosY != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(EnemyPosY);
      }
      if (MagicCode != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MagicCode);
      }
      if (MagicIndex != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(MagicIndex);
      }
      if (ManyRangeIndex != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ManyRangeIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoleId);
      }
      if (EnemyId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EnemyId);
      }
      if (EnemyPosX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EnemyPosX);
      }
      if (EnemyPosY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EnemyPosY);
      }
      if (MagicCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MagicCode);
      }
      if (MagicIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MagicIndex);
      }
      if (ManyRangeIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ManyRangeIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoleHited other) {
      if (other == null) {
        return;
      }
      if (other.RoleId != 0) {
        RoleId = other.RoleId;
      }
      if (other.EnemyId != 0) {
        EnemyId = other.EnemyId;
      }
      if (other.EnemyPosX != 0) {
        EnemyPosX = other.EnemyPosX;
      }
      if (other.EnemyPosY != 0) {
        EnemyPosY = other.EnemyPosY;
      }
      if (other.MagicCode != 0) {
        MagicCode = other.MagicCode;
      }
      if (other.MagicIndex != 0) {
        MagicIndex = other.MagicIndex;
      }
      if (other.ManyRangeIndex != 0) {
        ManyRangeIndex = other.ManyRangeIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoleId = input.ReadInt32();
            break;
          }
          case 16: {
            EnemyId = input.ReadInt32();
            break;
          }
          case 24: {
            EnemyPosX = input.ReadInt32();
            break;
          }
          case 32: {
            EnemyPosY = input.ReadInt32();
            break;
          }
          case 40: {
            MagicCode = input.ReadInt32();
            break;
          }
          case 48: {
            MagicIndex = input.ReadInt32();
            break;
          }
          case 56: {
            ManyRangeIndex = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            RoleId = input.ReadInt32();
            break;
          }
          case 16: {
            EnemyId = input.ReadInt32();
            break;
          }
          case 24: {
            EnemyPosX = input.ReadInt32();
            break;
          }
          case 32: {
            EnemyPosY = input.ReadInt32();
            break;
          }
          case 40: {
            MagicCode = input.ReadInt32();
            break;
          }
          case 48: {
            MagicIndex = input.ReadInt32();
            break;
          }
          case 56: {
            ManyRangeIndex = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///受傷資料 (任何人)
  /// </summary>
  public sealed partial class InjuredData : pb::IMessage<InjuredData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<InjuredData> _parser = new pb::MessageParser<InjuredData>(() => new InjuredData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InjuredData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::P5.Protobuf.BattleReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InjuredData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InjuredData(InjuredData other) : this() {
      attackerRoleId_ = other.attackerRoleId_;
      injuredRoleId_ = other.injuredRoleId_;
      burst_ = other.burst_;
      injure_ = other.injure_;
      injuredRoleLife_ = other.injuredRoleLife_;
      attackerLevel_ = other.attackerLevel_;
      injuredRoleMaxLifeV_ = other.injuredRoleMaxLifeV_;
      injuredRoleMagic_ = other.injuredRoleMagic_;
      injuredRoleMaxMagicV_ = other.injuredRoleMaxMagicV_;
      hitToGridX_ = other.hitToGridX_;
      hitToGridY_ = other.hitToGridY_;
      merlinInjuer_ = other.merlinInjuer_;
      merlinType_ = other.merlinType_;
      injuredRoleArmor_ = other.injuredRoleArmor_;
      hitType_ = other.hitType_;
      hitHeight_ = other.hitHeight_;
      magicCode_ = other.magicCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InjuredData Clone() {
      return new InjuredData(this);
    }

    /// <summary>Field number for the "attackerRoleId" field.</summary>
    public const int AttackerRoleIdFieldNumber = 1;
    private int attackerRoleId_;
    /// <summary>
    ///攻擊人
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackerRoleId {
      get { return attackerRoleId_; }
      set {
        attackerRoleId_ = value;
      }
    }

    /// <summary>Field number for the "injuredRoleId" field.</summary>
    public const int InjuredRoleIdFieldNumber = 2;
    private int injuredRoleId_;
    /// <summary>
    ///受傷人
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InjuredRoleId {
      get { return injuredRoleId_; }
      set {
        injuredRoleId_ = value;
      }
    }

    /// <summary>Field number for the "burst" field.</summary>
    public const int BurstFieldNumber = 3;
    private int burst_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Burst {
      get { return burst_; }
      set {
        burst_ = value;
      }
    }

    /// <summary>Field number for the "injure" field.</summary>
    public const int InjureFieldNumber = 4;
    private int injure_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Injure {
      get { return injure_; }
      set {
        injure_ = value;
      }
    }

    /// <summary>Field number for the "injuredRoleLife" field.</summary>
    public const int InjuredRoleLifeFieldNumber = 5;
    private double injuredRoleLife_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double InjuredRoleLife {
      get { return injuredRoleLife_; }
      set {
        injuredRoleLife_ = value;
      }
    }

    /// <summary>Field number for the "attackerLevel" field.</summary>
    public const int AttackerLevelFieldNumber = 6;
    private int attackerLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackerLevel {
      get { return attackerLevel_; }
      set {
        attackerLevel_ = value;
      }
    }

    /// <summary>Field number for the "injuredRoleMaxLifeV" field.</summary>
    public const int InjuredRoleMaxLifeVFieldNumber = 7;
    private int injuredRoleMaxLifeV_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InjuredRoleMaxLifeV {
      get { return injuredRoleMaxLifeV_; }
      set {
        injuredRoleMaxLifeV_ = value;
      }
    }

    /// <summary>Field number for the "injuredRoleMagic" field.</summary>
    public const int InjuredRoleMagicFieldNumber = 8;
    private int injuredRoleMagic_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InjuredRoleMagic {
      get { return injuredRoleMagic_; }
      set {
        injuredRoleMagic_ = value;
      }
    }

    /// <summary>Field number for the "injuredRoleMaxMagicV" field.</summary>
    public const int InjuredRoleMaxMagicVFieldNumber = 9;
    private int injuredRoleMaxMagicV_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InjuredRoleMaxMagicV {
      get { return injuredRoleMaxMagicV_; }
      set {
        injuredRoleMaxMagicV_ = value;
      }
    }

    /// <summary>Field number for the "hitToGridX" field.</summary>
    public const int HitToGridXFieldNumber = 10;
    private int hitToGridX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HitToGridX {
      get { return hitToGridX_; }
      set {
        hitToGridX_ = value;
      }
    }

    /// <summary>Field number for the "hitToGridY" field.</summary>
    public const int HitToGridYFieldNumber = 11;
    private int hitToGridY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HitToGridY {
      get { return hitToGridY_; }
      set {
        hitToGridY_ = value;
      }
    }

    /// <summary>Field number for the "merlinInjuer" field.</summary>
    public const int MerlinInjuerFieldNumber = 12;
    private int merlinInjuer_;
    /// <summary>
    ///用途不明 server沒用到 看client不然可以刪掉
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MerlinInjuer {
      get { return merlinInjuer_; }
      set {
        merlinInjuer_ = value;
      }
    }

    /// <summary>Field number for the "merlinType" field.</summary>
    public const int MerlinTypeFieldNumber = 13;
    private int merlinType_;
    /// <summary>
    ///用途不明 server沒用到 看client不然可以刪掉
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MerlinType {
      get { return merlinType_; }
      set {
        merlinType_ = value;
      }
    }

    /// <summary>Field number for the "injuredRoleArmor" field.</summary>
    public const int InjuredRoleArmorFieldNumber = 14;
    private double injuredRoleArmor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double InjuredRoleArmor {
      get { return injuredRoleArmor_; }
      set {
        injuredRoleArmor_ = value;
      }
    }

    /// <summary>Field number for the "hitType" field.</summary>
    public const int HitTypeFieldNumber = 15;
    private int hitType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HitType {
      get { return hitType_; }
      set {
        hitType_ = value;
      }
    }

    /// <summary>Field number for the "hitHeight" field.</summary>
    public const int HitHeightFieldNumber = 16;
    private int hitHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HitHeight {
      get { return hitHeight_; }
      set {
        hitHeight_ = value;
      }
    }

    /// <summary>Field number for the "magicCode" field.</summary>
    public const int MagicCodeFieldNumber = 17;
    private int magicCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MagicCode {
      get { return magicCode_; }
      set {
        magicCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InjuredData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InjuredData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AttackerRoleId != other.AttackerRoleId) return false;
      if (InjuredRoleId != other.InjuredRoleId) return false;
      if (Burst != other.Burst) return false;
      if (Injure != other.Injure) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(InjuredRoleLife, other.InjuredRoleLife)) return false;
      if (AttackerLevel != other.AttackerLevel) return false;
      if (InjuredRoleMaxLifeV != other.InjuredRoleMaxLifeV) return false;
      if (InjuredRoleMagic != other.InjuredRoleMagic) return false;
      if (InjuredRoleMaxMagicV != other.InjuredRoleMaxMagicV) return false;
      if (HitToGridX != other.HitToGridX) return false;
      if (HitToGridY != other.HitToGridY) return false;
      if (MerlinInjuer != other.MerlinInjuer) return false;
      if (MerlinType != other.MerlinType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(InjuredRoleArmor, other.InjuredRoleArmor)) return false;
      if (HitType != other.HitType) return false;
      if (HitHeight != other.HitHeight) return false;
      if (MagicCode != other.MagicCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AttackerRoleId != 0) hash ^= AttackerRoleId.GetHashCode();
      if (InjuredRoleId != 0) hash ^= InjuredRoleId.GetHashCode();
      if (Burst != 0) hash ^= Burst.GetHashCode();
      if (Injure != 0) hash ^= Injure.GetHashCode();
      if (InjuredRoleLife != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(InjuredRoleLife);
      if (AttackerLevel != 0) hash ^= AttackerLevel.GetHashCode();
      if (InjuredRoleMaxLifeV != 0) hash ^= InjuredRoleMaxLifeV.GetHashCode();
      if (InjuredRoleMagic != 0) hash ^= InjuredRoleMagic.GetHashCode();
      if (InjuredRoleMaxMagicV != 0) hash ^= InjuredRoleMaxMagicV.GetHashCode();
      if (HitToGridX != 0) hash ^= HitToGridX.GetHashCode();
      if (HitToGridY != 0) hash ^= HitToGridY.GetHashCode();
      if (MerlinInjuer != 0) hash ^= MerlinInjuer.GetHashCode();
      if (MerlinType != 0) hash ^= MerlinType.GetHashCode();
      if (InjuredRoleArmor != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(InjuredRoleArmor);
      if (HitType != 0) hash ^= HitType.GetHashCode();
      if (HitHeight != 0) hash ^= HitHeight.GetHashCode();
      if (MagicCode != 0) hash ^= MagicCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (AttackerRoleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AttackerRoleId);
      }
      if (InjuredRoleId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(InjuredRoleId);
      }
      if (Burst != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Burst);
      }
      if (Injure != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Injure);
      }
      if (InjuredRoleLife != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(InjuredRoleLife);
      }
      if (AttackerLevel != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(AttackerLevel);
      }
      if (InjuredRoleMaxLifeV != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(InjuredRoleMaxLifeV);
      }
      if (InjuredRoleMagic != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(InjuredRoleMagic);
      }
      if (InjuredRoleMaxMagicV != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(InjuredRoleMaxMagicV);
      }
      if (HitToGridX != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(HitToGridX);
      }
      if (HitToGridY != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(HitToGridY);
      }
      if (MerlinInjuer != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(MerlinInjuer);
      }
      if (MerlinType != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(MerlinType);
      }
      if (InjuredRoleArmor != 0D) {
        output.WriteRawTag(113);
        output.WriteDouble(InjuredRoleArmor);
      }
      if (HitType != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(HitType);
      }
      if (HitHeight != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(HitHeight);
      }
      if (MagicCode != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(MagicCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (AttackerRoleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AttackerRoleId);
      }
      if (InjuredRoleId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(InjuredRoleId);
      }
      if (Burst != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Burst);
      }
      if (Injure != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Injure);
      }
      if (InjuredRoleLife != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(InjuredRoleLife);
      }
      if (AttackerLevel != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(AttackerLevel);
      }
      if (InjuredRoleMaxLifeV != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(InjuredRoleMaxLifeV);
      }
      if (InjuredRoleMagic != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(InjuredRoleMagic);
      }
      if (InjuredRoleMaxMagicV != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(InjuredRoleMaxMagicV);
      }
      if (HitToGridX != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(HitToGridX);
      }
      if (HitToGridY != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(HitToGridY);
      }
      if (MerlinInjuer != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(MerlinInjuer);
      }
      if (MerlinType != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(MerlinType);
      }
      if (InjuredRoleArmor != 0D) {
        output.WriteRawTag(113);
        output.WriteDouble(InjuredRoleArmor);
      }
      if (HitType != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(HitType);
      }
      if (HitHeight != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(HitHeight);
      }
      if (MagicCode != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(MagicCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AttackerRoleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttackerRoleId);
      }
      if (InjuredRoleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InjuredRoleId);
      }
      if (Burst != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Burst);
      }
      if (Injure != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Injure);
      }
      if (InjuredRoleLife != 0D) {
        size += 1 + 8;
      }
      if (AttackerLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttackerLevel);
      }
      if (InjuredRoleMaxLifeV != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InjuredRoleMaxLifeV);
      }
      if (InjuredRoleMagic != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InjuredRoleMagic);
      }
      if (InjuredRoleMaxMagicV != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InjuredRoleMaxMagicV);
      }
      if (HitToGridX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HitToGridX);
      }
      if (HitToGridY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HitToGridY);
      }
      if (MerlinInjuer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MerlinInjuer);
      }
      if (MerlinType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MerlinType);
      }
      if (InjuredRoleArmor != 0D) {
        size += 1 + 8;
      }
      if (HitType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HitType);
      }
      if (HitHeight != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HitHeight);
      }
      if (MagicCode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MagicCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InjuredData other) {
      if (other == null) {
        return;
      }
      if (other.AttackerRoleId != 0) {
        AttackerRoleId = other.AttackerRoleId;
      }
      if (other.InjuredRoleId != 0) {
        InjuredRoleId = other.InjuredRoleId;
      }
      if (other.Burst != 0) {
        Burst = other.Burst;
      }
      if (other.Injure != 0) {
        Injure = other.Injure;
      }
      if (other.InjuredRoleLife != 0D) {
        InjuredRoleLife = other.InjuredRoleLife;
      }
      if (other.AttackerLevel != 0) {
        AttackerLevel = other.AttackerLevel;
      }
      if (other.InjuredRoleMaxLifeV != 0) {
        InjuredRoleMaxLifeV = other.InjuredRoleMaxLifeV;
      }
      if (other.InjuredRoleMagic != 0) {
        InjuredRoleMagic = other.InjuredRoleMagic;
      }
      if (other.InjuredRoleMaxMagicV != 0) {
        InjuredRoleMaxMagicV = other.InjuredRoleMaxMagicV;
      }
      if (other.HitToGridX != 0) {
        HitToGridX = other.HitToGridX;
      }
      if (other.HitToGridY != 0) {
        HitToGridY = other.HitToGridY;
      }
      if (other.MerlinInjuer != 0) {
        MerlinInjuer = other.MerlinInjuer;
      }
      if (other.MerlinType != 0) {
        MerlinType = other.MerlinType;
      }
      if (other.InjuredRoleArmor != 0D) {
        InjuredRoleArmor = other.InjuredRoleArmor;
      }
      if (other.HitType != 0) {
        HitType = other.HitType;
      }
      if (other.HitHeight != 0) {
        HitHeight = other.HitHeight;
      }
      if (other.MagicCode != 0) {
        MagicCode = other.MagicCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AttackerRoleId = input.ReadInt32();
            break;
          }
          case 16: {
            InjuredRoleId = input.ReadInt32();
            break;
          }
          case 24: {
            Burst = input.ReadInt32();
            break;
          }
          case 32: {
            Injure = input.ReadInt32();
            break;
          }
          case 41: {
            InjuredRoleLife = input.ReadDouble();
            break;
          }
          case 48: {
            AttackerLevel = input.ReadInt32();
            break;
          }
          case 56: {
            InjuredRoleMaxLifeV = input.ReadInt32();
            break;
          }
          case 64: {
            InjuredRoleMagic = input.ReadInt32();
            break;
          }
          case 72: {
            InjuredRoleMaxMagicV = input.ReadInt32();
            break;
          }
          case 80: {
            HitToGridX = input.ReadInt32();
            break;
          }
          case 88: {
            HitToGridY = input.ReadInt32();
            break;
          }
          case 96: {
            MerlinInjuer = input.ReadInt32();
            break;
          }
          case 104: {
            MerlinType = input.ReadInt32();
            break;
          }
          case 113: {
            InjuredRoleArmor = input.ReadDouble();
            break;
          }
          case 120: {
            HitType = input.ReadInt32();
            break;
          }
          case 128: {
            HitHeight = input.ReadInt32();
            break;
          }
          case 136: {
            MagicCode = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AttackerRoleId = input.ReadInt32();
            break;
          }
          case 16: {
            InjuredRoleId = input.ReadInt32();
            break;
          }
          case 24: {
            Burst = input.ReadInt32();
            break;
          }
          case 32: {
            Injure = input.ReadInt32();
            break;
          }
          case 41: {
            InjuredRoleLife = input.ReadDouble();
            break;
          }
          case 48: {
            AttackerLevel = input.ReadInt32();
            break;
          }
          case 56: {
            InjuredRoleMaxLifeV = input.ReadInt32();
            break;
          }
          case 64: {
            InjuredRoleMagic = input.ReadInt32();
            break;
          }
          case 72: {
            InjuredRoleMaxMagicV = input.ReadInt32();
            break;
          }
          case 80: {
            HitToGridX = input.ReadInt32();
            break;
          }
          case 88: {
            HitToGridY = input.ReadInt32();
            break;
          }
          case 96: {
            MerlinInjuer = input.ReadInt32();
            break;
          }
          case 104: {
            MerlinType = input.ReadInt32();
            break;
          }
          case 113: {
            InjuredRoleArmor = input.ReadDouble();
            break;
          }
          case 120: {
            HitType = input.ReadInt32();
            break;
          }
          case 128: {
            HitHeight = input.ReadInt32();
            break;
          }
          case 136: {
            MagicCode = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///其他人移動資料
  /// </summary>
  public sealed partial class SpriteNotifyOtherMoveData : pb::IMessage<SpriteNotifyOtherMoveData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SpriteNotifyOtherMoveData> _parser = new pb::MessageParser<SpriteNotifyOtherMoveData>(() => new SpriteNotifyOtherMoveData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpriteNotifyOtherMoveData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::P5.Protobuf.BattleReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpriteNotifyOtherMoveData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpriteNotifyOtherMoveData(SpriteNotifyOtherMoveData other) : this() {
      roleId_ = other.roleId_;
      mapCode_ = other.mapCode_;
      action_ = other.action_;
      toX_ = other.toX_;
      toY_ = other.toY_;
      extAction_ = other.extAction_;
      fromX_ = other.fromX_;
      fromY_ = other.fromY_;
      startMoveTicks_ = other.startMoveTicks_;
      pathList_ = other.pathList_.Clone();
      moveCost_ = other.moveCost_;
      targetId_ = other.targetId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpriteNotifyOtherMoveData Clone() {
      return new SpriteNotifyOtherMoveData(this);
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private int roleId_;
    /// <summary>
    ///角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "mapCode" field.</summary>
    public const int MapCodeFieldNumber = 2;
    private int mapCode_;
    /// <summary>
    ///地圖id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MapCode {
      get { return mapCode_; }
      set {
        mapCode_ = value;
      }
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 3;
    private int action_;
    /// <summary>
    ///跑or走
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Action {
      get { return action_; }
      set {
        action_ = value;
      }
    }

    /// <summary>Field number for the "toX" field.</summary>
    public const int ToXFieldNumber = 4;
    private int toX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ToX {
      get { return toX_; }
      set {
        toX_ = value;
      }
    }

    /// <summary>Field number for the "toY" field.</summary>
    public const int ToYFieldNumber = 5;
    private int toY_;
    /// <summary>
    ///往的方向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ToY {
      get { return toY_; }
      set {
        toY_ = value;
      }
    }

    /// <summary>Field number for the "extAction" field.</summary>
    public const int ExtActionFieldNumber = 6;
    private int extAction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExtAction {
      get { return extAction_; }
      set {
        extAction_ = value;
      }
    }

    /// <summary>Field number for the "fromX" field.</summary>
    public const int FromXFieldNumber = 7;
    private int fromX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FromX {
      get { return fromX_; }
      set {
        fromX_ = value;
      }
    }

    /// <summary>Field number for the "fromY" field.</summary>
    public const int FromYFieldNumber = 8;
    private int fromY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FromY {
      get { return fromY_; }
      set {
        fromY_ = value;
      }
    }

    /// <summary>Field number for the "startMoveTicks" field.</summary>
    public const int StartMoveTicksFieldNumber = 9;
    private long startMoveTicks_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartMoveTicks {
      get { return startMoveTicks_; }
      set {
        startMoveTicks_ = value;
      }
    }

    /// <summary>Field number for the "pathList" field.</summary>
    public const int PathListFieldNumber = 10;
    private static readonly pb::FieldCodec<global::P5.Protobuf.MyPoint> _repeated_pathList_codec
        = pb::FieldCodec.ForMessage(82, global::P5.Protobuf.MyPoint.Parser);
    private readonly pbc::RepeatedField<global::P5.Protobuf.MyPoint> pathList_ = new pbc::RepeatedField<global::P5.Protobuf.MyPoint>();
    /// <summary>
    ///應該是移動路徑
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::P5.Protobuf.MyPoint> PathList {
      get { return pathList_; }
    }

    /// <summary>Field number for the "moveCost" field.</summary>
    public const int MoveCostFieldNumber = 11;
    private double moveCost_;
    /// <summary>
    ///移動速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MoveCost {
      get { return moveCost_; }
      set {
        moveCost_ = value;
      }
    }

    /// <summary>Field number for the "targetId" field.</summary>
    public const int TargetIdFieldNumber = 12;
    private int targetId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetId {
      get { return targetId_; }
      set {
        targetId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SpriteNotifyOtherMoveData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SpriteNotifyOtherMoveData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoleId != other.RoleId) return false;
      if (MapCode != other.MapCode) return false;
      if (Action != other.Action) return false;
      if (ToX != other.ToX) return false;
      if (ToY != other.ToY) return false;
      if (ExtAction != other.ExtAction) return false;
      if (FromX != other.FromX) return false;
      if (FromY != other.FromY) return false;
      if (StartMoveTicks != other.StartMoveTicks) return false;
      if(!pathList_.Equals(other.pathList_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MoveCost, other.MoveCost)) return false;
      if (TargetId != other.TargetId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoleId != 0) hash ^= RoleId.GetHashCode();
      if (MapCode != 0) hash ^= MapCode.GetHashCode();
      if (Action != 0) hash ^= Action.GetHashCode();
      if (ToX != 0) hash ^= ToX.GetHashCode();
      if (ToY != 0) hash ^= ToY.GetHashCode();
      if (ExtAction != 0) hash ^= ExtAction.GetHashCode();
      if (FromX != 0) hash ^= FromX.GetHashCode();
      if (FromY != 0) hash ^= FromY.GetHashCode();
      if (StartMoveTicks != 0L) hash ^= StartMoveTicks.GetHashCode();
      hash ^= pathList_.GetHashCode();
      if (MoveCost != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MoveCost);
      if (TargetId != 0) hash ^= TargetId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (RoleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoleId);
      }
      if (MapCode != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MapCode);
      }
      if (Action != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Action);
      }
      if (ToX != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ToX);
      }
      if (ToY != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ToY);
      }
      if (ExtAction != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ExtAction);
      }
      if (FromX != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(FromX);
      }
      if (FromY != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(FromY);
      }
      if (StartMoveTicks != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(StartMoveTicks);
      }
      pathList_.WriteTo(output, _repeated_pathList_codec);
      if (MoveCost != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(MoveCost);
      }
      if (TargetId != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(TargetId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (RoleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoleId);
      }
      if (MapCode != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MapCode);
      }
      if (Action != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Action);
      }
      if (ToX != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ToX);
      }
      if (ToY != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ToY);
      }
      if (ExtAction != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ExtAction);
      }
      if (FromX != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(FromX);
      }
      if (FromY != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(FromY);
      }
      if (StartMoveTicks != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(StartMoveTicks);
      }
      pathList_.WriteTo(ref output, _repeated_pathList_codec);
      if (MoveCost != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(MoveCost);
      }
      if (TargetId != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(TargetId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoleId);
      }
      if (MapCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MapCode);
      }
      if (Action != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Action);
      }
      if (ToX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ToX);
      }
      if (ToY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ToY);
      }
      if (ExtAction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExtAction);
      }
      if (FromX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FromX);
      }
      if (FromY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FromY);
      }
      if (StartMoveTicks != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartMoveTicks);
      }
      size += pathList_.CalculateSize(_repeated_pathList_codec);
      if (MoveCost != 0D) {
        size += 1 + 8;
      }
      if (TargetId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SpriteNotifyOtherMoveData other) {
      if (other == null) {
        return;
      }
      if (other.RoleId != 0) {
        RoleId = other.RoleId;
      }
      if (other.MapCode != 0) {
        MapCode = other.MapCode;
      }
      if (other.Action != 0) {
        Action = other.Action;
      }
      if (other.ToX != 0) {
        ToX = other.ToX;
      }
      if (other.ToY != 0) {
        ToY = other.ToY;
      }
      if (other.ExtAction != 0) {
        ExtAction = other.ExtAction;
      }
      if (other.FromX != 0) {
        FromX = other.FromX;
      }
      if (other.FromY != 0) {
        FromY = other.FromY;
      }
      if (other.StartMoveTicks != 0L) {
        StartMoveTicks = other.StartMoveTicks;
      }
      pathList_.Add(other.pathList_);
      if (other.MoveCost != 0D) {
        MoveCost = other.MoveCost;
      }
      if (other.TargetId != 0) {
        TargetId = other.TargetId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoleId = input.ReadInt32();
            break;
          }
          case 16: {
            MapCode = input.ReadInt32();
            break;
          }
          case 24: {
            Action = input.ReadInt32();
            break;
          }
          case 32: {
            ToX = input.ReadInt32();
            break;
          }
          case 40: {
            ToY = input.ReadInt32();
            break;
          }
          case 48: {
            ExtAction = input.ReadInt32();
            break;
          }
          case 56: {
            FromX = input.ReadInt32();
            break;
          }
          case 64: {
            FromY = input.ReadInt32();
            break;
          }
          case 72: {
            StartMoveTicks = input.ReadInt64();
            break;
          }
          case 82: {
            pathList_.AddEntriesFrom(input, _repeated_pathList_codec);
            break;
          }
          case 89: {
            MoveCost = input.ReadDouble();
            break;
          }
          case 96: {
            TargetId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            RoleId = input.ReadInt32();
            break;
          }
          case 16: {
            MapCode = input.ReadInt32();
            break;
          }
          case 24: {
            Action = input.ReadInt32();
            break;
          }
          case 32: {
            ToX = input.ReadInt32();
            break;
          }
          case 40: {
            ToY = input.ReadInt32();
            break;
          }
          case 48: {
            ExtAction = input.ReadInt32();
            break;
          }
          case 56: {
            FromX = input.ReadInt32();
            break;
          }
          case 64: {
            FromY = input.ReadInt32();
            break;
          }
          case 72: {
            StartMoveTicks = input.ReadInt64();
            break;
          }
          case 82: {
            pathList_.AddEntriesFrom(ref input, _repeated_pathList_codec);
            break;
          }
          case 89: {
            MoveCost = input.ReadDouble();
            break;
          }
          case 96: {
            TargetId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
